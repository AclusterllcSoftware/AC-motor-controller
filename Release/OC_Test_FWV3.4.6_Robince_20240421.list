
OC_Test_FWV3.4.6_Robince_20240421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003174  08003174  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003174  08003174  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003174  08003174  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800317c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  2000000c  08003188  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08003188  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d3f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ced  00000000  00000000  00035d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ca96  00000000  00000000  00038a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  000454f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001670  00000000  00000000  00046010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e37  00000000  00000000  00047680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004547  00000000  00000000  000584b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0005c9fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002464  00000000  00000000  0005ca54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800309c 	.word	0x0800309c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800309c 	.word	0x0800309c

08000104 <__gnu_thumb1_case_sqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5609      	ldrsb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	1c08      	adds	r0, r1, #0
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 f9cb 	bl	80005e8 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f94f 	bl	8000500 <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f9bd 	bl	80005e8 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9b3 	bl	80005e8 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f95d 	bl	8000550 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 f953 	bl	8000550 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_f2uiz>:
 80002b8:	219e      	movs	r1, #158	; 0x9e
 80002ba:	b510      	push	{r4, lr}
 80002bc:	05c9      	lsls	r1, r1, #23
 80002be:	1c04      	adds	r4, r0, #0
 80002c0:	f7ff fff0 	bl	80002a4 <__aeabi_fcmpge>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d103      	bne.n	80002d0 <__aeabi_f2uiz+0x18>
 80002c8:	1c20      	adds	r0, r4, #0
 80002ca:	f000 fb9f 	bl	8000a0c <__aeabi_f2iz>
 80002ce:	bd10      	pop	{r4, pc}
 80002d0:	219e      	movs	r1, #158	; 0x9e
 80002d2:	1c20      	adds	r0, r4, #0
 80002d4:	05c9      	lsls	r1, r1, #23
 80002d6:	f000 f9d1 	bl	800067c <__aeabi_fsub>
 80002da:	f000 fb97 	bl	8000a0c <__aeabi_f2iz>
 80002de:	2380      	movs	r3, #128	; 0x80
 80002e0:	061b      	lsls	r3, r3, #24
 80002e2:	469c      	mov	ip, r3
 80002e4:	4460      	add	r0, ip
 80002e6:	e7f2      	b.n	80002ce <__aeabi_f2uiz+0x16>

080002e8 <__aeabi_fdiv>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	464f      	mov	r7, r9
 80002ec:	4646      	mov	r6, r8
 80002ee:	46d6      	mov	lr, sl
 80002f0:	0245      	lsls	r5, r0, #9
 80002f2:	b5c0      	push	{r6, r7, lr}
 80002f4:	0047      	lsls	r7, r0, #1
 80002f6:	1c0c      	adds	r4, r1, #0
 80002f8:	0a6d      	lsrs	r5, r5, #9
 80002fa:	0e3f      	lsrs	r7, r7, #24
 80002fc:	0fc6      	lsrs	r6, r0, #31
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d066      	beq.n	80003d0 <__aeabi_fdiv+0xe8>
 8000302:	2fff      	cmp	r7, #255	; 0xff
 8000304:	d06c      	beq.n	80003e0 <__aeabi_fdiv+0xf8>
 8000306:	2300      	movs	r3, #0
 8000308:	00ea      	lsls	r2, r5, #3
 800030a:	2580      	movs	r5, #128	; 0x80
 800030c:	4699      	mov	r9, r3
 800030e:	469a      	mov	sl, r3
 8000310:	04ed      	lsls	r5, r5, #19
 8000312:	4315      	orrs	r5, r2
 8000314:	3f7f      	subs	r7, #127	; 0x7f
 8000316:	0260      	lsls	r0, r4, #9
 8000318:	0061      	lsls	r1, r4, #1
 800031a:	0a43      	lsrs	r3, r0, #9
 800031c:	4698      	mov	r8, r3
 800031e:	0e09      	lsrs	r1, r1, #24
 8000320:	0fe4      	lsrs	r4, r4, #31
 8000322:	2900      	cmp	r1, #0
 8000324:	d048      	beq.n	80003b8 <__aeabi_fdiv+0xd0>
 8000326:	29ff      	cmp	r1, #255	; 0xff
 8000328:	d010      	beq.n	800034c <__aeabi_fdiv+0x64>
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	00d8      	lsls	r0, r3, #3
 800032e:	04d2      	lsls	r2, r2, #19
 8000330:	4302      	orrs	r2, r0
 8000332:	4690      	mov	r8, r2
 8000334:	2000      	movs	r0, #0
 8000336:	397f      	subs	r1, #127	; 0x7f
 8000338:	464a      	mov	r2, r9
 800033a:	0033      	movs	r3, r6
 800033c:	1a7f      	subs	r7, r7, r1
 800033e:	4302      	orrs	r2, r0
 8000340:	496c      	ldr	r1, [pc, #432]	; (80004f4 <__aeabi_fdiv+0x20c>)
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	588a      	ldr	r2, [r1, r2]
 8000346:	4063      	eors	r3, r4
 8000348:	b2db      	uxtb	r3, r3
 800034a:	4697      	mov	pc, r2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d16d      	bne.n	800042c <__aeabi_fdiv+0x144>
 8000350:	2002      	movs	r0, #2
 8000352:	3fff      	subs	r7, #255	; 0xff
 8000354:	e033      	b.n	80003be <__aeabi_fdiv+0xd6>
 8000356:	2300      	movs	r3, #0
 8000358:	4698      	mov	r8, r3
 800035a:	0026      	movs	r6, r4
 800035c:	4645      	mov	r5, r8
 800035e:	4682      	mov	sl, r0
 8000360:	4653      	mov	r3, sl
 8000362:	2b02      	cmp	r3, #2
 8000364:	d100      	bne.n	8000368 <__aeabi_fdiv+0x80>
 8000366:	e07f      	b.n	8000468 <__aeabi_fdiv+0x180>
 8000368:	2b03      	cmp	r3, #3
 800036a:	d100      	bne.n	800036e <__aeabi_fdiv+0x86>
 800036c:	e094      	b.n	8000498 <__aeabi_fdiv+0x1b0>
 800036e:	2b01      	cmp	r3, #1
 8000370:	d017      	beq.n	80003a2 <__aeabi_fdiv+0xba>
 8000372:	0038      	movs	r0, r7
 8000374:	307f      	adds	r0, #127	; 0x7f
 8000376:	2800      	cmp	r0, #0
 8000378:	dd5f      	ble.n	800043a <__aeabi_fdiv+0x152>
 800037a:	076b      	lsls	r3, r5, #29
 800037c:	d004      	beq.n	8000388 <__aeabi_fdiv+0xa0>
 800037e:	230f      	movs	r3, #15
 8000380:	402b      	ands	r3, r5
 8000382:	2b04      	cmp	r3, #4
 8000384:	d000      	beq.n	8000388 <__aeabi_fdiv+0xa0>
 8000386:	3504      	adds	r5, #4
 8000388:	012b      	lsls	r3, r5, #4
 800038a:	d503      	bpl.n	8000394 <__aeabi_fdiv+0xac>
 800038c:	0038      	movs	r0, r7
 800038e:	4b5a      	ldr	r3, [pc, #360]	; (80004f8 <__aeabi_fdiv+0x210>)
 8000390:	3080      	adds	r0, #128	; 0x80
 8000392:	401d      	ands	r5, r3
 8000394:	28fe      	cmp	r0, #254	; 0xfe
 8000396:	dc67      	bgt.n	8000468 <__aeabi_fdiv+0x180>
 8000398:	01ad      	lsls	r5, r5, #6
 800039a:	0a6d      	lsrs	r5, r5, #9
 800039c:	b2c0      	uxtb	r0, r0
 800039e:	e002      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 80003a0:	001e      	movs	r6, r3
 80003a2:	2000      	movs	r0, #0
 80003a4:	2500      	movs	r5, #0
 80003a6:	05c0      	lsls	r0, r0, #23
 80003a8:	4328      	orrs	r0, r5
 80003aa:	07f6      	lsls	r6, r6, #31
 80003ac:	4330      	orrs	r0, r6
 80003ae:	bce0      	pop	{r5, r6, r7}
 80003b0:	46ba      	mov	sl, r7
 80003b2:	46b1      	mov	r9, r6
 80003b4:	46a8      	mov	r8, r5
 80003b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d12b      	bne.n	8000414 <__aeabi_fdiv+0x12c>
 80003bc:	2001      	movs	r0, #1
 80003be:	464a      	mov	r2, r9
 80003c0:	0033      	movs	r3, r6
 80003c2:	494e      	ldr	r1, [pc, #312]	; (80004fc <__aeabi_fdiv+0x214>)
 80003c4:	4302      	orrs	r2, r0
 80003c6:	0092      	lsls	r2, r2, #2
 80003c8:	588a      	ldr	r2, [r1, r2]
 80003ca:	4063      	eors	r3, r4
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4697      	mov	pc, r2
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	d113      	bne.n	80003fc <__aeabi_fdiv+0x114>
 80003d4:	2304      	movs	r3, #4
 80003d6:	4699      	mov	r9, r3
 80003d8:	3b03      	subs	r3, #3
 80003da:	2700      	movs	r7, #0
 80003dc:	469a      	mov	sl, r3
 80003de:	e79a      	b.n	8000316 <__aeabi_fdiv+0x2e>
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d105      	bne.n	80003f0 <__aeabi_fdiv+0x108>
 80003e4:	2308      	movs	r3, #8
 80003e6:	4699      	mov	r9, r3
 80003e8:	3b06      	subs	r3, #6
 80003ea:	27ff      	movs	r7, #255	; 0xff
 80003ec:	469a      	mov	sl, r3
 80003ee:	e792      	b.n	8000316 <__aeabi_fdiv+0x2e>
 80003f0:	230c      	movs	r3, #12
 80003f2:	4699      	mov	r9, r3
 80003f4:	3b09      	subs	r3, #9
 80003f6:	27ff      	movs	r7, #255	; 0xff
 80003f8:	469a      	mov	sl, r3
 80003fa:	e78c      	b.n	8000316 <__aeabi_fdiv+0x2e>
 80003fc:	0028      	movs	r0, r5
 80003fe:	f000 fb61 	bl	8000ac4 <__clzsi2>
 8000402:	2776      	movs	r7, #118	; 0x76
 8000404:	1f43      	subs	r3, r0, #5
 8000406:	409d      	lsls	r5, r3
 8000408:	2300      	movs	r3, #0
 800040a:	427f      	negs	r7, r7
 800040c:	4699      	mov	r9, r3
 800040e:	469a      	mov	sl, r3
 8000410:	1a3f      	subs	r7, r7, r0
 8000412:	e780      	b.n	8000316 <__aeabi_fdiv+0x2e>
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fb55 	bl	8000ac4 <__clzsi2>
 800041a:	4642      	mov	r2, r8
 800041c:	1f43      	subs	r3, r0, #5
 800041e:	2176      	movs	r1, #118	; 0x76
 8000420:	409a      	lsls	r2, r3
 8000422:	4249      	negs	r1, r1
 8000424:	1a09      	subs	r1, r1, r0
 8000426:	4690      	mov	r8, r2
 8000428:	2000      	movs	r0, #0
 800042a:	e785      	b.n	8000338 <__aeabi_fdiv+0x50>
 800042c:	21ff      	movs	r1, #255	; 0xff
 800042e:	2003      	movs	r0, #3
 8000430:	e782      	b.n	8000338 <__aeabi_fdiv+0x50>
 8000432:	001e      	movs	r6, r3
 8000434:	20ff      	movs	r0, #255	; 0xff
 8000436:	2500      	movs	r5, #0
 8000438:	e7b5      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 800043a:	2301      	movs	r3, #1
 800043c:	1a1b      	subs	r3, r3, r0
 800043e:	2b1b      	cmp	r3, #27
 8000440:	dcaf      	bgt.n	80003a2 <__aeabi_fdiv+0xba>
 8000442:	379e      	adds	r7, #158	; 0x9e
 8000444:	0029      	movs	r1, r5
 8000446:	40bd      	lsls	r5, r7
 8000448:	40d9      	lsrs	r1, r3
 800044a:	1e6a      	subs	r2, r5, #1
 800044c:	4195      	sbcs	r5, r2
 800044e:	430d      	orrs	r5, r1
 8000450:	076b      	lsls	r3, r5, #29
 8000452:	d004      	beq.n	800045e <__aeabi_fdiv+0x176>
 8000454:	230f      	movs	r3, #15
 8000456:	402b      	ands	r3, r5
 8000458:	2b04      	cmp	r3, #4
 800045a:	d000      	beq.n	800045e <__aeabi_fdiv+0x176>
 800045c:	3504      	adds	r5, #4
 800045e:	016b      	lsls	r3, r5, #5
 8000460:	d544      	bpl.n	80004ec <__aeabi_fdiv+0x204>
 8000462:	2001      	movs	r0, #1
 8000464:	2500      	movs	r5, #0
 8000466:	e79e      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 8000468:	20ff      	movs	r0, #255	; 0xff
 800046a:	2500      	movs	r5, #0
 800046c:	e79b      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 800046e:	2580      	movs	r5, #128	; 0x80
 8000470:	2600      	movs	r6, #0
 8000472:	20ff      	movs	r0, #255	; 0xff
 8000474:	03ed      	lsls	r5, r5, #15
 8000476:	e796      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 8000478:	2300      	movs	r3, #0
 800047a:	4698      	mov	r8, r3
 800047c:	2080      	movs	r0, #128	; 0x80
 800047e:	03c0      	lsls	r0, r0, #15
 8000480:	4205      	tst	r5, r0
 8000482:	d009      	beq.n	8000498 <__aeabi_fdiv+0x1b0>
 8000484:	4643      	mov	r3, r8
 8000486:	4203      	tst	r3, r0
 8000488:	d106      	bne.n	8000498 <__aeabi_fdiv+0x1b0>
 800048a:	4645      	mov	r5, r8
 800048c:	4305      	orrs	r5, r0
 800048e:	026d      	lsls	r5, r5, #9
 8000490:	0026      	movs	r6, r4
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	e786      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 8000498:	2080      	movs	r0, #128	; 0x80
 800049a:	03c0      	lsls	r0, r0, #15
 800049c:	4305      	orrs	r5, r0
 800049e:	026d      	lsls	r5, r5, #9
 80004a0:	20ff      	movs	r0, #255	; 0xff
 80004a2:	0a6d      	lsrs	r5, r5, #9
 80004a4:	e77f      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 80004a6:	4641      	mov	r1, r8
 80004a8:	016a      	lsls	r2, r5, #5
 80004aa:	0148      	lsls	r0, r1, #5
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d219      	bcs.n	80004e4 <__aeabi_fdiv+0x1fc>
 80004b0:	211b      	movs	r1, #27
 80004b2:	2500      	movs	r5, #0
 80004b4:	3f01      	subs	r7, #1
 80004b6:	2601      	movs	r6, #1
 80004b8:	0014      	movs	r4, r2
 80004ba:	006d      	lsls	r5, r5, #1
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	2c00      	cmp	r4, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fdiv+0x1de>
 80004c2:	4290      	cmp	r0, r2
 80004c4:	d801      	bhi.n	80004ca <__aeabi_fdiv+0x1e2>
 80004c6:	1a12      	subs	r2, r2, r0
 80004c8:	4335      	orrs	r5, r6
 80004ca:	3901      	subs	r1, #1
 80004cc:	2900      	cmp	r1, #0
 80004ce:	d1f3      	bne.n	80004b8 <__aeabi_fdiv+0x1d0>
 80004d0:	1e50      	subs	r0, r2, #1
 80004d2:	4182      	sbcs	r2, r0
 80004d4:	0038      	movs	r0, r7
 80004d6:	307f      	adds	r0, #127	; 0x7f
 80004d8:	001e      	movs	r6, r3
 80004da:	4315      	orrs	r5, r2
 80004dc:	2800      	cmp	r0, #0
 80004de:	dd00      	ble.n	80004e2 <__aeabi_fdiv+0x1fa>
 80004e0:	e74b      	b.n	800037a <__aeabi_fdiv+0x92>
 80004e2:	e7aa      	b.n	800043a <__aeabi_fdiv+0x152>
 80004e4:	211a      	movs	r1, #26
 80004e6:	2501      	movs	r5, #1
 80004e8:	1a12      	subs	r2, r2, r0
 80004ea:	e7e4      	b.n	80004b6 <__aeabi_fdiv+0x1ce>
 80004ec:	01ad      	lsls	r5, r5, #6
 80004ee:	2000      	movs	r0, #0
 80004f0:	0a6d      	lsrs	r5, r5, #9
 80004f2:	e758      	b.n	80003a6 <__aeabi_fdiv+0xbe>
 80004f4:	080030b4 	.word	0x080030b4
 80004f8:	f7ffffff 	.word	0xf7ffffff
 80004fc:	080030f4 	.word	0x080030f4

08000500 <__eqsf2>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	0042      	lsls	r2, r0, #1
 8000504:	024e      	lsls	r6, r1, #9
 8000506:	004c      	lsls	r4, r1, #1
 8000508:	0245      	lsls	r5, r0, #9
 800050a:	0a6d      	lsrs	r5, r5, #9
 800050c:	0e12      	lsrs	r2, r2, #24
 800050e:	0fc3      	lsrs	r3, r0, #31
 8000510:	0a76      	lsrs	r6, r6, #9
 8000512:	0e24      	lsrs	r4, r4, #24
 8000514:	0fc9      	lsrs	r1, r1, #31
 8000516:	2aff      	cmp	r2, #255	; 0xff
 8000518:	d00f      	beq.n	800053a <__eqsf2+0x3a>
 800051a:	2cff      	cmp	r4, #255	; 0xff
 800051c:	d011      	beq.n	8000542 <__eqsf2+0x42>
 800051e:	2001      	movs	r0, #1
 8000520:	42a2      	cmp	r2, r4
 8000522:	d000      	beq.n	8000526 <__eqsf2+0x26>
 8000524:	bd70      	pop	{r4, r5, r6, pc}
 8000526:	42b5      	cmp	r5, r6
 8000528:	d1fc      	bne.n	8000524 <__eqsf2+0x24>
 800052a:	428b      	cmp	r3, r1
 800052c:	d00d      	beq.n	800054a <__eqsf2+0x4a>
 800052e:	2a00      	cmp	r2, #0
 8000530:	d1f8      	bne.n	8000524 <__eqsf2+0x24>
 8000532:	0028      	movs	r0, r5
 8000534:	1e45      	subs	r5, r0, #1
 8000536:	41a8      	sbcs	r0, r5
 8000538:	e7f4      	b.n	8000524 <__eqsf2+0x24>
 800053a:	2001      	movs	r0, #1
 800053c:	2d00      	cmp	r5, #0
 800053e:	d1f1      	bne.n	8000524 <__eqsf2+0x24>
 8000540:	e7eb      	b.n	800051a <__eqsf2+0x1a>
 8000542:	2001      	movs	r0, #1
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1ed      	bne.n	8000524 <__eqsf2+0x24>
 8000548:	e7e9      	b.n	800051e <__eqsf2+0x1e>
 800054a:	2000      	movs	r0, #0
 800054c:	e7ea      	b.n	8000524 <__eqsf2+0x24>
 800054e:	46c0      	nop			; (mov r8, r8)

08000550 <__gesf2>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	0042      	lsls	r2, r0, #1
 8000554:	0246      	lsls	r6, r0, #9
 8000556:	024d      	lsls	r5, r1, #9
 8000558:	004c      	lsls	r4, r1, #1
 800055a:	0fc3      	lsrs	r3, r0, #31
 800055c:	0a76      	lsrs	r6, r6, #9
 800055e:	0e12      	lsrs	r2, r2, #24
 8000560:	0a6d      	lsrs	r5, r5, #9
 8000562:	0e24      	lsrs	r4, r4, #24
 8000564:	0fc8      	lsrs	r0, r1, #31
 8000566:	2aff      	cmp	r2, #255	; 0xff
 8000568:	d01f      	beq.n	80005aa <__gesf2+0x5a>
 800056a:	2cff      	cmp	r4, #255	; 0xff
 800056c:	d010      	beq.n	8000590 <__gesf2+0x40>
 800056e:	2a00      	cmp	r2, #0
 8000570:	d11f      	bne.n	80005b2 <__gesf2+0x62>
 8000572:	4271      	negs	r1, r6
 8000574:	4171      	adcs	r1, r6
 8000576:	2c00      	cmp	r4, #0
 8000578:	d101      	bne.n	800057e <__gesf2+0x2e>
 800057a:	2d00      	cmp	r5, #0
 800057c:	d01e      	beq.n	80005bc <__gesf2+0x6c>
 800057e:	2900      	cmp	r1, #0
 8000580:	d10e      	bne.n	80005a0 <__gesf2+0x50>
 8000582:	4283      	cmp	r3, r0
 8000584:	d01e      	beq.n	80005c4 <__gesf2+0x74>
 8000586:	2102      	movs	r1, #2
 8000588:	1e58      	subs	r0, r3, #1
 800058a:	4008      	ands	r0, r1
 800058c:	3801      	subs	r0, #1
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000590:	2d00      	cmp	r5, #0
 8000592:	d126      	bne.n	80005e2 <__gesf2+0x92>
 8000594:	2a00      	cmp	r2, #0
 8000596:	d1f4      	bne.n	8000582 <__gesf2+0x32>
 8000598:	4271      	negs	r1, r6
 800059a:	4171      	adcs	r1, r6
 800059c:	2900      	cmp	r1, #0
 800059e:	d0f0      	beq.n	8000582 <__gesf2+0x32>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d1f4      	bne.n	800058e <__gesf2+0x3e>
 80005a4:	2001      	movs	r0, #1
 80005a6:	4240      	negs	r0, r0
 80005a8:	e7f1      	b.n	800058e <__gesf2+0x3e>
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d119      	bne.n	80005e2 <__gesf2+0x92>
 80005ae:	2cff      	cmp	r4, #255	; 0xff
 80005b0:	d0ee      	beq.n	8000590 <__gesf2+0x40>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d1e5      	bne.n	8000582 <__gesf2+0x32>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d1e3      	bne.n	8000582 <__gesf2+0x32>
 80005ba:	e7e4      	b.n	8000586 <__gesf2+0x36>
 80005bc:	2000      	movs	r0, #0
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d0e5      	beq.n	800058e <__gesf2+0x3e>
 80005c2:	e7e0      	b.n	8000586 <__gesf2+0x36>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	dc05      	bgt.n	80005d4 <__gesf2+0x84>
 80005c8:	dbea      	blt.n	80005a0 <__gesf2+0x50>
 80005ca:	42ae      	cmp	r6, r5
 80005cc:	d802      	bhi.n	80005d4 <__gesf2+0x84>
 80005ce:	d3e7      	bcc.n	80005a0 <__gesf2+0x50>
 80005d0:	2000      	movs	r0, #0
 80005d2:	e7dc      	b.n	800058e <__gesf2+0x3e>
 80005d4:	4241      	negs	r1, r0
 80005d6:	4141      	adcs	r1, r0
 80005d8:	4248      	negs	r0, r1
 80005da:	2102      	movs	r1, #2
 80005dc:	4008      	ands	r0, r1
 80005de:	3801      	subs	r0, #1
 80005e0:	e7d5      	b.n	800058e <__gesf2+0x3e>
 80005e2:	2002      	movs	r0, #2
 80005e4:	4240      	negs	r0, r0
 80005e6:	e7d2      	b.n	800058e <__gesf2+0x3e>

080005e8 <__lesf2>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	0042      	lsls	r2, r0, #1
 80005ec:	0246      	lsls	r6, r0, #9
 80005ee:	024d      	lsls	r5, r1, #9
 80005f0:	004c      	lsls	r4, r1, #1
 80005f2:	0fc3      	lsrs	r3, r0, #31
 80005f4:	0a76      	lsrs	r6, r6, #9
 80005f6:	0e12      	lsrs	r2, r2, #24
 80005f8:	0a6d      	lsrs	r5, r5, #9
 80005fa:	0e24      	lsrs	r4, r4, #24
 80005fc:	0fc8      	lsrs	r0, r1, #31
 80005fe:	2aff      	cmp	r2, #255	; 0xff
 8000600:	d00d      	beq.n	800061e <__lesf2+0x36>
 8000602:	2cff      	cmp	r4, #255	; 0xff
 8000604:	d00f      	beq.n	8000626 <__lesf2+0x3e>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d123      	bne.n	8000652 <__lesf2+0x6a>
 800060a:	4271      	negs	r1, r6
 800060c:	4171      	adcs	r1, r6
 800060e:	2c00      	cmp	r4, #0
 8000610:	d10f      	bne.n	8000632 <__lesf2+0x4a>
 8000612:	2d00      	cmp	r5, #0
 8000614:	d10d      	bne.n	8000632 <__lesf2+0x4a>
 8000616:	2000      	movs	r0, #0
 8000618:	2e00      	cmp	r6, #0
 800061a:	d014      	beq.n	8000646 <__lesf2+0x5e>
 800061c:	e00d      	b.n	800063a <__lesf2+0x52>
 800061e:	2e00      	cmp	r6, #0
 8000620:	d110      	bne.n	8000644 <__lesf2+0x5c>
 8000622:	2cff      	cmp	r4, #255	; 0xff
 8000624:	d115      	bne.n	8000652 <__lesf2+0x6a>
 8000626:	2d00      	cmp	r5, #0
 8000628:	d10c      	bne.n	8000644 <__lesf2+0x5c>
 800062a:	2a00      	cmp	r2, #0
 800062c:	d103      	bne.n	8000636 <__lesf2+0x4e>
 800062e:	4271      	negs	r1, r6
 8000630:	4171      	adcs	r1, r6
 8000632:	2900      	cmp	r1, #0
 8000634:	d108      	bne.n	8000648 <__lesf2+0x60>
 8000636:	4283      	cmp	r3, r0
 8000638:	d010      	beq.n	800065c <__lesf2+0x74>
 800063a:	2102      	movs	r1, #2
 800063c:	1e58      	subs	r0, r3, #1
 800063e:	4008      	ands	r0, r1
 8000640:	3801      	subs	r0, #1
 8000642:	e000      	b.n	8000646 <__lesf2+0x5e>
 8000644:	2002      	movs	r0, #2
 8000646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000648:	2800      	cmp	r0, #0
 800064a:	d1fc      	bne.n	8000646 <__lesf2+0x5e>
 800064c:	2001      	movs	r0, #1
 800064e:	4240      	negs	r0, r0
 8000650:	e7f9      	b.n	8000646 <__lesf2+0x5e>
 8000652:	2c00      	cmp	r4, #0
 8000654:	d1ef      	bne.n	8000636 <__lesf2+0x4e>
 8000656:	2d00      	cmp	r5, #0
 8000658:	d1ed      	bne.n	8000636 <__lesf2+0x4e>
 800065a:	e7ee      	b.n	800063a <__lesf2+0x52>
 800065c:	42a2      	cmp	r2, r4
 800065e:	dc05      	bgt.n	800066c <__lesf2+0x84>
 8000660:	dbf2      	blt.n	8000648 <__lesf2+0x60>
 8000662:	42ae      	cmp	r6, r5
 8000664:	d802      	bhi.n	800066c <__lesf2+0x84>
 8000666:	d3ef      	bcc.n	8000648 <__lesf2+0x60>
 8000668:	2000      	movs	r0, #0
 800066a:	e7ec      	b.n	8000646 <__lesf2+0x5e>
 800066c:	4241      	negs	r1, r0
 800066e:	4141      	adcs	r1, r0
 8000670:	4248      	negs	r0, r1
 8000672:	2102      	movs	r1, #2
 8000674:	4008      	ands	r0, r1
 8000676:	3801      	subs	r0, #1
 8000678:	e7e5      	b.n	8000646 <__lesf2+0x5e>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fsub>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	4646      	mov	r6, r8
 8000680:	46d6      	mov	lr, sl
 8000682:	464f      	mov	r7, r9
 8000684:	0243      	lsls	r3, r0, #9
 8000686:	0a5b      	lsrs	r3, r3, #9
 8000688:	00da      	lsls	r2, r3, #3
 800068a:	4694      	mov	ip, r2
 800068c:	024a      	lsls	r2, r1, #9
 800068e:	b5c0      	push	{r6, r7, lr}
 8000690:	0044      	lsls	r4, r0, #1
 8000692:	0a56      	lsrs	r6, r2, #9
 8000694:	1c05      	adds	r5, r0, #0
 8000696:	46b0      	mov	r8, r6
 8000698:	0e24      	lsrs	r4, r4, #24
 800069a:	004e      	lsls	r6, r1, #1
 800069c:	0992      	lsrs	r2, r2, #6
 800069e:	001f      	movs	r7, r3
 80006a0:	0020      	movs	r0, r4
 80006a2:	4692      	mov	sl, r2
 80006a4:	0fed      	lsrs	r5, r5, #31
 80006a6:	0e36      	lsrs	r6, r6, #24
 80006a8:	0fc9      	lsrs	r1, r1, #31
 80006aa:	2eff      	cmp	r6, #255	; 0xff
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fsub+0x34>
 80006ae:	e07f      	b.n	80007b0 <__aeabi_fsub+0x134>
 80006b0:	2201      	movs	r2, #1
 80006b2:	4051      	eors	r1, r2
 80006b4:	428d      	cmp	r5, r1
 80006b6:	d051      	beq.n	800075c <__aeabi_fsub+0xe0>
 80006b8:	1ba2      	subs	r2, r4, r6
 80006ba:	4691      	mov	r9, r2
 80006bc:	2a00      	cmp	r2, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_fsub+0x46>
 80006c0:	e07e      	b.n	80007c0 <__aeabi_fsub+0x144>
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fsub+0x4c>
 80006c6:	e099      	b.n	80007fc <__aeabi_fsub+0x180>
 80006c8:	2cff      	cmp	r4, #255	; 0xff
 80006ca:	d100      	bne.n	80006ce <__aeabi_fsub+0x52>
 80006cc:	e08c      	b.n	80007e8 <__aeabi_fsub+0x16c>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	4652      	mov	r2, sl
 80006d2:	04db      	lsls	r3, r3, #19
 80006d4:	431a      	orrs	r2, r3
 80006d6:	4692      	mov	sl, r2
 80006d8:	464a      	mov	r2, r9
 80006da:	2301      	movs	r3, #1
 80006dc:	2a1b      	cmp	r2, #27
 80006de:	dc08      	bgt.n	80006f2 <__aeabi_fsub+0x76>
 80006e0:	4653      	mov	r3, sl
 80006e2:	2120      	movs	r1, #32
 80006e4:	40d3      	lsrs	r3, r2
 80006e6:	1a89      	subs	r1, r1, r2
 80006e8:	4652      	mov	r2, sl
 80006ea:	408a      	lsls	r2, r1
 80006ec:	1e51      	subs	r1, r2, #1
 80006ee:	418a      	sbcs	r2, r1
 80006f0:	4313      	orrs	r3, r2
 80006f2:	4662      	mov	r2, ip
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	015a      	lsls	r2, r3, #5
 80006f8:	d400      	bmi.n	80006fc <__aeabi_fsub+0x80>
 80006fa:	e0f3      	b.n	80008e4 <__aeabi_fsub+0x268>
 80006fc:	019b      	lsls	r3, r3, #6
 80006fe:	099e      	lsrs	r6, r3, #6
 8000700:	0030      	movs	r0, r6
 8000702:	f000 f9df 	bl	8000ac4 <__clzsi2>
 8000706:	3805      	subs	r0, #5
 8000708:	4086      	lsls	r6, r0
 800070a:	4284      	cmp	r4, r0
 800070c:	dd00      	ble.n	8000710 <__aeabi_fsub+0x94>
 800070e:	e0f7      	b.n	8000900 <__aeabi_fsub+0x284>
 8000710:	0032      	movs	r2, r6
 8000712:	1b04      	subs	r4, r0, r4
 8000714:	2020      	movs	r0, #32
 8000716:	3401      	adds	r4, #1
 8000718:	40e2      	lsrs	r2, r4
 800071a:	1b04      	subs	r4, r0, r4
 800071c:	40a6      	lsls	r6, r4
 800071e:	0033      	movs	r3, r6
 8000720:	1e5e      	subs	r6, r3, #1
 8000722:	41b3      	sbcs	r3, r6
 8000724:	2400      	movs	r4, #0
 8000726:	4313      	orrs	r3, r2
 8000728:	075a      	lsls	r2, r3, #29
 800072a:	d004      	beq.n	8000736 <__aeabi_fsub+0xba>
 800072c:	220f      	movs	r2, #15
 800072e:	401a      	ands	r2, r3
 8000730:	2a04      	cmp	r2, #4
 8000732:	d000      	beq.n	8000736 <__aeabi_fsub+0xba>
 8000734:	3304      	adds	r3, #4
 8000736:	015a      	lsls	r2, r3, #5
 8000738:	d400      	bmi.n	800073c <__aeabi_fsub+0xc0>
 800073a:	e0d6      	b.n	80008ea <__aeabi_fsub+0x26e>
 800073c:	1c62      	adds	r2, r4, #1
 800073e:	2cfe      	cmp	r4, #254	; 0xfe
 8000740:	d100      	bne.n	8000744 <__aeabi_fsub+0xc8>
 8000742:	e0da      	b.n	80008fa <__aeabi_fsub+0x27e>
 8000744:	019b      	lsls	r3, r3, #6
 8000746:	0a5f      	lsrs	r7, r3, #9
 8000748:	b2d0      	uxtb	r0, r2
 800074a:	05c0      	lsls	r0, r0, #23
 800074c:	4338      	orrs	r0, r7
 800074e:	07ed      	lsls	r5, r5, #31
 8000750:	4328      	orrs	r0, r5
 8000752:	bce0      	pop	{r5, r6, r7}
 8000754:	46ba      	mov	sl, r7
 8000756:	46b1      	mov	r9, r6
 8000758:	46a8      	mov	r8, r5
 800075a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075c:	1ba2      	subs	r2, r4, r6
 800075e:	4691      	mov	r9, r2
 8000760:	2a00      	cmp	r2, #0
 8000762:	dd63      	ble.n	800082c <__aeabi_fsub+0x1b0>
 8000764:	2e00      	cmp	r6, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fsub+0xee>
 8000768:	e099      	b.n	800089e <__aeabi_fsub+0x222>
 800076a:	2cff      	cmp	r4, #255	; 0xff
 800076c:	d03c      	beq.n	80007e8 <__aeabi_fsub+0x16c>
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	4652      	mov	r2, sl
 8000772:	04db      	lsls	r3, r3, #19
 8000774:	431a      	orrs	r2, r3
 8000776:	4692      	mov	sl, r2
 8000778:	464a      	mov	r2, r9
 800077a:	2301      	movs	r3, #1
 800077c:	2a1b      	cmp	r2, #27
 800077e:	dc08      	bgt.n	8000792 <__aeabi_fsub+0x116>
 8000780:	4653      	mov	r3, sl
 8000782:	2120      	movs	r1, #32
 8000784:	40d3      	lsrs	r3, r2
 8000786:	1a89      	subs	r1, r1, r2
 8000788:	4652      	mov	r2, sl
 800078a:	408a      	lsls	r2, r1
 800078c:	1e51      	subs	r1, r2, #1
 800078e:	418a      	sbcs	r2, r1
 8000790:	4313      	orrs	r3, r2
 8000792:	4463      	add	r3, ip
 8000794:	015a      	lsls	r2, r3, #5
 8000796:	d400      	bmi.n	800079a <__aeabi_fsub+0x11e>
 8000798:	e0a4      	b.n	80008e4 <__aeabi_fsub+0x268>
 800079a:	3401      	adds	r4, #1
 800079c:	2cff      	cmp	r4, #255	; 0xff
 800079e:	d100      	bne.n	80007a2 <__aeabi_fsub+0x126>
 80007a0:	e0ab      	b.n	80008fa <__aeabi_fsub+0x27e>
 80007a2:	2201      	movs	r2, #1
 80007a4:	4997      	ldr	r1, [pc, #604]	; (8000a04 <__aeabi_fsub+0x388>)
 80007a6:	401a      	ands	r2, r3
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	400b      	ands	r3, r1
 80007ac:	4313      	orrs	r3, r2
 80007ae:	e7bb      	b.n	8000728 <__aeabi_fsub+0xac>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d032      	beq.n	800081a <__aeabi_fsub+0x19e>
 80007b4:	428d      	cmp	r5, r1
 80007b6:	d035      	beq.n	8000824 <__aeabi_fsub+0x1a8>
 80007b8:	22ff      	movs	r2, #255	; 0xff
 80007ba:	4252      	negs	r2, r2
 80007bc:	4691      	mov	r9, r2
 80007be:	44a1      	add	r9, r4
 80007c0:	464a      	mov	r2, r9
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d051      	beq.n	800086a <__aeabi_fsub+0x1ee>
 80007c6:	1b30      	subs	r0, r6, r4
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d000      	beq.n	80007ce <__aeabi_fsub+0x152>
 80007cc:	e09c      	b.n	8000908 <__aeabi_fsub+0x28c>
 80007ce:	4663      	mov	r3, ip
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fsub+0x15a>
 80007d4:	e0df      	b.n	8000996 <__aeabi_fsub+0x31a>
 80007d6:	3801      	subs	r0, #1
 80007d8:	2800      	cmp	r0, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fsub+0x162>
 80007dc:	e0f7      	b.n	80009ce <__aeabi_fsub+0x352>
 80007de:	2eff      	cmp	r6, #255	; 0xff
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0x168>
 80007e2:	e099      	b.n	8000918 <__aeabi_fsub+0x29c>
 80007e4:	000d      	movs	r5, r1
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fsub+0x172>
 80007ec:	e085      	b.n	80008fa <__aeabi_fsub+0x27e>
 80007ee:	2780      	movs	r7, #128	; 0x80
 80007f0:	03ff      	lsls	r7, r7, #15
 80007f2:	431f      	orrs	r7, r3
 80007f4:	027f      	lsls	r7, r7, #9
 80007f6:	20ff      	movs	r0, #255	; 0xff
 80007f8:	0a7f      	lsrs	r7, r7, #9
 80007fa:	e7a6      	b.n	800074a <__aeabi_fsub+0xce>
 80007fc:	4652      	mov	r2, sl
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d074      	beq.n	80008ec <__aeabi_fsub+0x270>
 8000802:	2201      	movs	r2, #1
 8000804:	4252      	negs	r2, r2
 8000806:	4690      	mov	r8, r2
 8000808:	44c1      	add	r9, r8
 800080a:	464a      	mov	r2, r9
 800080c:	2a00      	cmp	r2, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0x196>
 8000810:	e0c8      	b.n	80009a4 <__aeabi_fsub+0x328>
 8000812:	2cff      	cmp	r4, #255	; 0xff
 8000814:	d000      	beq.n	8000818 <__aeabi_fsub+0x19c>
 8000816:	e75f      	b.n	80006d8 <__aeabi_fsub+0x5c>
 8000818:	e7e6      	b.n	80007e8 <__aeabi_fsub+0x16c>
 800081a:	2201      	movs	r2, #1
 800081c:	4051      	eors	r1, r2
 800081e:	42a9      	cmp	r1, r5
 8000820:	d000      	beq.n	8000824 <__aeabi_fsub+0x1a8>
 8000822:	e749      	b.n	80006b8 <__aeabi_fsub+0x3c>
 8000824:	22ff      	movs	r2, #255	; 0xff
 8000826:	4252      	negs	r2, r2
 8000828:	4691      	mov	r9, r2
 800082a:	44a1      	add	r9, r4
 800082c:	464a      	mov	r2, r9
 800082e:	2a00      	cmp	r2, #0
 8000830:	d043      	beq.n	80008ba <__aeabi_fsub+0x23e>
 8000832:	1b31      	subs	r1, r6, r4
 8000834:	2c00      	cmp	r4, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fsub+0x1be>
 8000838:	e08c      	b.n	8000954 <__aeabi_fsub+0x2d8>
 800083a:	2eff      	cmp	r6, #255	; 0xff
 800083c:	d100      	bne.n	8000840 <__aeabi_fsub+0x1c4>
 800083e:	e092      	b.n	8000966 <__aeabi_fsub+0x2ea>
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	4662      	mov	r2, ip
 8000844:	04db      	lsls	r3, r3, #19
 8000846:	431a      	orrs	r2, r3
 8000848:	4694      	mov	ip, r2
 800084a:	2301      	movs	r3, #1
 800084c:	291b      	cmp	r1, #27
 800084e:	dc09      	bgt.n	8000864 <__aeabi_fsub+0x1e8>
 8000850:	2020      	movs	r0, #32
 8000852:	4663      	mov	r3, ip
 8000854:	4662      	mov	r2, ip
 8000856:	40cb      	lsrs	r3, r1
 8000858:	1a41      	subs	r1, r0, r1
 800085a:	408a      	lsls	r2, r1
 800085c:	0011      	movs	r1, r2
 800085e:	1e48      	subs	r0, r1, #1
 8000860:	4181      	sbcs	r1, r0
 8000862:	430b      	orrs	r3, r1
 8000864:	0034      	movs	r4, r6
 8000866:	4453      	add	r3, sl
 8000868:	e794      	b.n	8000794 <__aeabi_fsub+0x118>
 800086a:	22fe      	movs	r2, #254	; 0xfe
 800086c:	1c66      	adds	r6, r4, #1
 800086e:	4232      	tst	r2, r6
 8000870:	d164      	bne.n	800093c <__aeabi_fsub+0x2c0>
 8000872:	2c00      	cmp	r4, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fsub+0x1fc>
 8000876:	e082      	b.n	800097e <__aeabi_fsub+0x302>
 8000878:	4663      	mov	r3, ip
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_fsub+0x204>
 800087e:	e0ab      	b.n	80009d8 <__aeabi_fsub+0x35c>
 8000880:	4653      	mov	r3, sl
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x20c>
 8000886:	e760      	b.n	800074a <__aeabi_fsub+0xce>
 8000888:	4663      	mov	r3, ip
 800088a:	4652      	mov	r2, sl
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	015a      	lsls	r2, r3, #5
 8000890:	d400      	bmi.n	8000894 <__aeabi_fsub+0x218>
 8000892:	e0aa      	b.n	80009ea <__aeabi_fsub+0x36e>
 8000894:	4663      	mov	r3, ip
 8000896:	4652      	mov	r2, sl
 8000898:	000d      	movs	r5, r1
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	e744      	b.n	8000728 <__aeabi_fsub+0xac>
 800089e:	4652      	mov	r2, sl
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d023      	beq.n	80008ec <__aeabi_fsub+0x270>
 80008a4:	2201      	movs	r2, #1
 80008a6:	4252      	negs	r2, r2
 80008a8:	4690      	mov	r8, r2
 80008aa:	44c1      	add	r9, r8
 80008ac:	464a      	mov	r2, r9
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d075      	beq.n	800099e <__aeabi_fsub+0x322>
 80008b2:	2cff      	cmp	r4, #255	; 0xff
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fsub+0x23c>
 80008b6:	e75f      	b.n	8000778 <__aeabi_fsub+0xfc>
 80008b8:	e796      	b.n	80007e8 <__aeabi_fsub+0x16c>
 80008ba:	26fe      	movs	r6, #254	; 0xfe
 80008bc:	3401      	adds	r4, #1
 80008be:	4226      	tst	r6, r4
 80008c0:	d153      	bne.n	800096a <__aeabi_fsub+0x2ee>
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d172      	bne.n	80009ac <__aeabi_fsub+0x330>
 80008c6:	4663      	mov	r3, ip
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x252>
 80008cc:	e093      	b.n	80009f6 <__aeabi_fsub+0x37a>
 80008ce:	4653      	mov	r3, sl
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x25a>
 80008d4:	e739      	b.n	800074a <__aeabi_fsub+0xce>
 80008d6:	4463      	add	r3, ip
 80008d8:	2400      	movs	r4, #0
 80008da:	015a      	lsls	r2, r3, #5
 80008dc:	d502      	bpl.n	80008e4 <__aeabi_fsub+0x268>
 80008de:	4a4a      	ldr	r2, [pc, #296]	; (8000a08 <__aeabi_fsub+0x38c>)
 80008e0:	3401      	adds	r4, #1
 80008e2:	4013      	ands	r3, r2
 80008e4:	075a      	lsls	r2, r3, #29
 80008e6:	d000      	beq.n	80008ea <__aeabi_fsub+0x26e>
 80008e8:	e720      	b.n	800072c <__aeabi_fsub+0xb0>
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	2cff      	cmp	r4, #255	; 0xff
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fsub+0x276>
 80008f0:	e77a      	b.n	80007e8 <__aeabi_fsub+0x16c>
 80008f2:	025b      	lsls	r3, r3, #9
 80008f4:	0a5f      	lsrs	r7, r3, #9
 80008f6:	b2e0      	uxtb	r0, r4
 80008f8:	e727      	b.n	800074a <__aeabi_fsub+0xce>
 80008fa:	20ff      	movs	r0, #255	; 0xff
 80008fc:	2700      	movs	r7, #0
 80008fe:	e724      	b.n	800074a <__aeabi_fsub+0xce>
 8000900:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <__aeabi_fsub+0x38c>)
 8000902:	1a24      	subs	r4, r4, r0
 8000904:	4033      	ands	r3, r6
 8000906:	e70f      	b.n	8000728 <__aeabi_fsub+0xac>
 8000908:	2eff      	cmp	r6, #255	; 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x292>
 800090c:	e76a      	b.n	80007e4 <__aeabi_fsub+0x168>
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	4662      	mov	r2, ip
 8000912:	04db      	lsls	r3, r3, #19
 8000914:	431a      	orrs	r2, r3
 8000916:	4694      	mov	ip, r2
 8000918:	2301      	movs	r3, #1
 800091a:	281b      	cmp	r0, #27
 800091c:	dc09      	bgt.n	8000932 <__aeabi_fsub+0x2b6>
 800091e:	2420      	movs	r4, #32
 8000920:	4663      	mov	r3, ip
 8000922:	4662      	mov	r2, ip
 8000924:	40c3      	lsrs	r3, r0
 8000926:	1a20      	subs	r0, r4, r0
 8000928:	4082      	lsls	r2, r0
 800092a:	0010      	movs	r0, r2
 800092c:	1e44      	subs	r4, r0, #1
 800092e:	41a0      	sbcs	r0, r4
 8000930:	4303      	orrs	r3, r0
 8000932:	4652      	mov	r2, sl
 8000934:	000d      	movs	r5, r1
 8000936:	0034      	movs	r4, r6
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	e6dc      	b.n	80006f6 <__aeabi_fsub+0x7a>
 800093c:	4663      	mov	r3, ip
 800093e:	4652      	mov	r2, sl
 8000940:	1a9e      	subs	r6, r3, r2
 8000942:	0173      	lsls	r3, r6, #5
 8000944:	d417      	bmi.n	8000976 <__aeabi_fsub+0x2fa>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x2d0>
 800094a:	e6d9      	b.n	8000700 <__aeabi_fsub+0x84>
 800094c:	2500      	movs	r5, #0
 800094e:	2000      	movs	r0, #0
 8000950:	2700      	movs	r7, #0
 8000952:	e6fa      	b.n	800074a <__aeabi_fsub+0xce>
 8000954:	4663      	mov	r3, ip
 8000956:	2b00      	cmp	r3, #0
 8000958:	d044      	beq.n	80009e4 <__aeabi_fsub+0x368>
 800095a:	3901      	subs	r1, #1
 800095c:	2900      	cmp	r1, #0
 800095e:	d04c      	beq.n	80009fa <__aeabi_fsub+0x37e>
 8000960:	2eff      	cmp	r6, #255	; 0xff
 8000962:	d000      	beq.n	8000966 <__aeabi_fsub+0x2ea>
 8000964:	e771      	b.n	800084a <__aeabi_fsub+0x1ce>
 8000966:	4643      	mov	r3, r8
 8000968:	e73e      	b.n	80007e8 <__aeabi_fsub+0x16c>
 800096a:	2cff      	cmp	r4, #255	; 0xff
 800096c:	d0c5      	beq.n	80008fa <__aeabi_fsub+0x27e>
 800096e:	4652      	mov	r2, sl
 8000970:	4462      	add	r2, ip
 8000972:	0853      	lsrs	r3, r2, #1
 8000974:	e7b6      	b.n	80008e4 <__aeabi_fsub+0x268>
 8000976:	4663      	mov	r3, ip
 8000978:	000d      	movs	r5, r1
 800097a:	1ad6      	subs	r6, r2, r3
 800097c:	e6c0      	b.n	8000700 <__aeabi_fsub+0x84>
 800097e:	4662      	mov	r2, ip
 8000980:	2a00      	cmp	r2, #0
 8000982:	d116      	bne.n	80009b2 <__aeabi_fsub+0x336>
 8000984:	4653      	mov	r3, sl
 8000986:	2b00      	cmp	r3, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fsub+0x310>
 800098a:	e72b      	b.n	80007e4 <__aeabi_fsub+0x168>
 800098c:	2780      	movs	r7, #128	; 0x80
 800098e:	2500      	movs	r5, #0
 8000990:	20ff      	movs	r0, #255	; 0xff
 8000992:	03ff      	lsls	r7, r7, #15
 8000994:	e6d9      	b.n	800074a <__aeabi_fsub+0xce>
 8000996:	000d      	movs	r5, r1
 8000998:	4643      	mov	r3, r8
 800099a:	0034      	movs	r4, r6
 800099c:	e7a6      	b.n	80008ec <__aeabi_fsub+0x270>
 800099e:	4653      	mov	r3, sl
 80009a0:	4463      	add	r3, ip
 80009a2:	e6f7      	b.n	8000794 <__aeabi_fsub+0x118>
 80009a4:	4663      	mov	r3, ip
 80009a6:	4652      	mov	r2, sl
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	e6a4      	b.n	80006f6 <__aeabi_fsub+0x7a>
 80009ac:	4662      	mov	r2, ip
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d0d9      	beq.n	8000966 <__aeabi_fsub+0x2ea>
 80009b2:	4652      	mov	r2, sl
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x33e>
 80009b8:	e716      	b.n	80007e8 <__aeabi_fsub+0x16c>
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	03d2      	lsls	r2, r2, #15
 80009be:	4213      	tst	r3, r2
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fsub+0x348>
 80009c2:	e711      	b.n	80007e8 <__aeabi_fsub+0x16c>
 80009c4:	4640      	mov	r0, r8
 80009c6:	4210      	tst	r0, r2
 80009c8:	d000      	beq.n	80009cc <__aeabi_fsub+0x350>
 80009ca:	e70d      	b.n	80007e8 <__aeabi_fsub+0x16c>
 80009cc:	e70a      	b.n	80007e4 <__aeabi_fsub+0x168>
 80009ce:	4652      	mov	r2, sl
 80009d0:	000d      	movs	r5, r1
 80009d2:	0034      	movs	r4, r6
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	e68e      	b.n	80006f6 <__aeabi_fsub+0x7a>
 80009d8:	4653      	mov	r3, sl
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <__aeabi_fsub+0x374>
 80009de:	000d      	movs	r5, r1
 80009e0:	4647      	mov	r7, r8
 80009e2:	e6b2      	b.n	800074a <__aeabi_fsub+0xce>
 80009e4:	4643      	mov	r3, r8
 80009e6:	0034      	movs	r4, r6
 80009e8:	e780      	b.n	80008ec <__aeabi_fsub+0x270>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fsub+0x374>
 80009ee:	e779      	b.n	80008e4 <__aeabi_fsub+0x268>
 80009f0:	2500      	movs	r5, #0
 80009f2:	2700      	movs	r7, #0
 80009f4:	e6a9      	b.n	800074a <__aeabi_fsub+0xce>
 80009f6:	4647      	mov	r7, r8
 80009f8:	e6a7      	b.n	800074a <__aeabi_fsub+0xce>
 80009fa:	4653      	mov	r3, sl
 80009fc:	0034      	movs	r4, r6
 80009fe:	4463      	add	r3, ip
 8000a00:	e6c8      	b.n	8000794 <__aeabi_fsub+0x118>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	7dffffff 	.word	0x7dffffff
 8000a08:	fbffffff 	.word	0xfbffffff

08000a0c <__aeabi_f2iz>:
 8000a0c:	0241      	lsls	r1, r0, #9
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	0fc3      	lsrs	r3, r0, #31
 8000a12:	0a49      	lsrs	r1, r1, #9
 8000a14:	2000      	movs	r0, #0
 8000a16:	0e12      	lsrs	r2, r2, #24
 8000a18:	2a7e      	cmp	r2, #126	; 0x7e
 8000a1a:	d903      	bls.n	8000a24 <__aeabi_f2iz+0x18>
 8000a1c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a1e:	d902      	bls.n	8000a26 <__aeabi_f2iz+0x1a>
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <__aeabi_f2iz+0x3c>)
 8000a22:	1898      	adds	r0, r3, r2
 8000a24:	4770      	bx	lr
 8000a26:	2080      	movs	r0, #128	; 0x80
 8000a28:	0400      	lsls	r0, r0, #16
 8000a2a:	4301      	orrs	r1, r0
 8000a2c:	2a95      	cmp	r2, #149	; 0x95
 8000a2e:	dc07      	bgt.n	8000a40 <__aeabi_f2iz+0x34>
 8000a30:	2096      	movs	r0, #150	; 0x96
 8000a32:	1a82      	subs	r2, r0, r2
 8000a34:	40d1      	lsrs	r1, r2
 8000a36:	4248      	negs	r0, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f3      	bne.n	8000a24 <__aeabi_f2iz+0x18>
 8000a3c:	0008      	movs	r0, r1
 8000a3e:	e7f1      	b.n	8000a24 <__aeabi_f2iz+0x18>
 8000a40:	3a96      	subs	r2, #150	; 0x96
 8000a42:	4091      	lsls	r1, r2
 8000a44:	e7f7      	b.n	8000a36 <__aeabi_f2iz+0x2a>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	7fffffff 	.word	0x7fffffff

08000a4c <__aeabi_ui2f>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	1e05      	subs	r5, r0, #0
 8000a50:	d00e      	beq.n	8000a70 <__aeabi_ui2f+0x24>
 8000a52:	f000 f837 	bl	8000ac4 <__clzsi2>
 8000a56:	239e      	movs	r3, #158	; 0x9e
 8000a58:	0004      	movs	r4, r0
 8000a5a:	1a1b      	subs	r3, r3, r0
 8000a5c:	2b96      	cmp	r3, #150	; 0x96
 8000a5e:	dc0c      	bgt.n	8000a7a <__aeabi_ui2f+0x2e>
 8000a60:	2808      	cmp	r0, #8
 8000a62:	dd01      	ble.n	8000a68 <__aeabi_ui2f+0x1c>
 8000a64:	3c08      	subs	r4, #8
 8000a66:	40a5      	lsls	r5, r4
 8000a68:	026d      	lsls	r5, r5, #9
 8000a6a:	0a6d      	lsrs	r5, r5, #9
 8000a6c:	b2d8      	uxtb	r0, r3
 8000a6e:	e001      	b.n	8000a74 <__aeabi_ui2f+0x28>
 8000a70:	2000      	movs	r0, #0
 8000a72:	2500      	movs	r5, #0
 8000a74:	05c0      	lsls	r0, r0, #23
 8000a76:	4328      	orrs	r0, r5
 8000a78:	bd70      	pop	{r4, r5, r6, pc}
 8000a7a:	2b99      	cmp	r3, #153	; 0x99
 8000a7c:	dd09      	ble.n	8000a92 <__aeabi_ui2f+0x46>
 8000a7e:	0002      	movs	r2, r0
 8000a80:	0029      	movs	r1, r5
 8000a82:	321b      	adds	r2, #27
 8000a84:	4091      	lsls	r1, r2
 8000a86:	1e4a      	subs	r2, r1, #1
 8000a88:	4191      	sbcs	r1, r2
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	1a12      	subs	r2, r2, r0
 8000a8e:	40d5      	lsrs	r5, r2
 8000a90:	430d      	orrs	r5, r1
 8000a92:	2c05      	cmp	r4, #5
 8000a94:	dd01      	ble.n	8000a9a <__aeabi_ui2f+0x4e>
 8000a96:	1f62      	subs	r2, r4, #5
 8000a98:	4095      	lsls	r5, r2
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	4e08      	ldr	r6, [pc, #32]	; (8000ac0 <__aeabi_ui2f+0x74>)
 8000a9e:	4031      	ands	r1, r6
 8000aa0:	076a      	lsls	r2, r5, #29
 8000aa2:	d009      	beq.n	8000ab8 <__aeabi_ui2f+0x6c>
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	4028      	ands	r0, r5
 8000aa8:	2804      	cmp	r0, #4
 8000aaa:	d005      	beq.n	8000ab8 <__aeabi_ui2f+0x6c>
 8000aac:	3104      	adds	r1, #4
 8000aae:	014a      	lsls	r2, r1, #5
 8000ab0:	d502      	bpl.n	8000ab8 <__aeabi_ui2f+0x6c>
 8000ab2:	239f      	movs	r3, #159	; 0x9f
 8000ab4:	4031      	ands	r1, r6
 8000ab6:	1b1b      	subs	r3, r3, r4
 8000ab8:	0189      	lsls	r1, r1, #6
 8000aba:	0a4d      	lsrs	r5, r1, #9
 8000abc:	b2d8      	uxtb	r0, r3
 8000abe:	e7d9      	b.n	8000a74 <__aeabi_ui2f+0x28>
 8000ac0:	fbffffff 	.word	0xfbffffff

08000ac4 <__clzsi2>:
 8000ac4:	211c      	movs	r1, #28
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	4298      	cmp	r0, r3
 8000acc:	d301      	bcc.n	8000ad2 <__clzsi2+0xe>
 8000ace:	0c00      	lsrs	r0, r0, #16
 8000ad0:	3910      	subs	r1, #16
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	4298      	cmp	r0, r3
 8000ad6:	d301      	bcc.n	8000adc <__clzsi2+0x18>
 8000ad8:	0a00      	lsrs	r0, r0, #8
 8000ada:	3908      	subs	r1, #8
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d301      	bcc.n	8000ae6 <__clzsi2+0x22>
 8000ae2:	0900      	lsrs	r0, r0, #4
 8000ae4:	3904      	subs	r1, #4
 8000ae6:	a202      	add	r2, pc, #8	; (adr r2, 8000af0 <__clzsi2+0x2c>)
 8000ae8:	5c10      	ldrb	r0, [r2, r0]
 8000aea:	1840      	adds	r0, r0, r1
 8000aec:	4770      	bx	lr
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	02020304 	.word	0x02020304
 8000af4:	01010101 	.word	0x01010101
	...

08000b00 <OD_PWM_InitTriac>:
  * triacPwm acLineFrequency: AC line frequency, Asia- 50Hz, EU-60Hz
  * @retval none
  */
void OD_PWM_InitTriac(TIM_HandleTypeDef *htim,  PWM *triacPwm, uint16_t acLineFrequency){
	//HAL_TIM_Base_Start_IT(htim);
	triacPwm->incrementBy = htim->Init.Period;
 8000b00:	68c3      	ldr	r3, [r0, #12]
void OD_PWM_InitTriac(TIM_HandleTypeDef *htim,  PWM *triacPwm, uint16_t acLineFrequency){
 8000b02:	b510      	push	{r4, lr}
	triacPwm->incrementBy = htim->Init.Period;
 8000b04:	828b      	strh	r3, [r1, #20]
	triacPwm->pulse = (triacPwm->incrementBy*OD_PWM_TRIAC_TRIG_IMPULSE_DURATION);
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	618b      	str	r3, [r1, #24]
	/*---------- PWM For Triac 1 & 2-----------*/
	triacPwm->frequency		= (acLineFrequency*2U);
 8000b0a:	0050      	lsls	r0, r2, #1
void OD_PWM_InitTriac(TIM_HandleTypeDef *htim,  PWM *triacPwm, uint16_t acLineFrequency){
 8000b0c:	000c      	movs	r4, r1
	triacPwm->frequency		= (acLineFrequency*2U);
 8000b0e:	f7ff ff9d 	bl	8000a4c <__aeabi_ui2f>
	triacPwm->counter1 = 0U;
 8000b12:	2300      	movs	r3, #0
	triacPwm->frequency		= (acLineFrequency*2U);
 8000b14:	61e0      	str	r0, [r4, #28]
	triacPwm->counter1 = 0U;
 8000b16:	6063      	str	r3, [r4, #4]
	triacPwm->counter2 = 0U;
 8000b18:	60a3      	str	r3, [r4, #8]
}
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <OD_PWM_CalcTriacPWM>:
 *
  * @param triacPwm: triac related struct
  * @retval none
  */

void OD_PWM_CalcTriacPWM(PWM *triacPwm){
 8000b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(triacPwm->frequency > 0.0f && triacPwm->dutyCycleVar > 0U){
 8000b1e:	69c4      	ldr	r4, [r0, #28]
void OD_PWM_CalcTriacPWM(PWM *triacPwm){
 8000b20:	0005      	movs	r5, r0
	if(triacPwm->frequency > 0.0f && triacPwm->dutyCycleVar > 0U){
 8000b22:	2100      	movs	r1, #0
 8000b24:	1c20      	adds	r0, r4, #0
 8000b26:	f7ff fbb3 	bl	8000290 <__aeabi_fcmpgt>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d018      	beq.n	8000b60 <OD_PWM_CalcTriacPWM+0x44>
 8000b2e:	002b      	movs	r3, r5
 8000b30:	332e      	adds	r3, #46	; 0x2e
 8000b32:	781f      	ldrb	r7, [r3, #0]
 8000b34:	2f00      	cmp	r7, #0
 8000b36:	d013      	beq.n	8000b60 <OD_PWM_CalcTriacPWM+0x44>

		triacPwm->period = (uint32_t)(1000000.0f/triacPwm->frequency);					// triac pwm period in microsecond
 8000b38:	1c21      	adds	r1, r4, #0
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <OD_PWM_CalcTriacPWM+0x48>)
 8000b3c:	f7ff fbd4 	bl	80002e8 <__aeabi_fdiv>
 8000b40:	f7ff fbba 	bl	80002b8 <__aeabi_f2uiz>
		triacPwm->shiftBy = (triacPwm->period-triacPwm->zcDelayAdjust);
 8000b44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		triacPwm->period = (uint32_t)(1000000.0f/triacPwm->frequency);					// triac pwm period in microsecond
 8000b46:	0004      	movs	r4, r0
		triacPwm->shiftBy = (triacPwm->period-triacPwm->zcDelayAdjust);
 8000b48:	1ac6      	subs	r6, r0, r3
		triacPwm->onDuration = (uint32_t)((triacPwm->period*triacPwm->dutyCycleVar)/100U);	// PWM on duration time in microsecond
 8000b4a:	0038      	movs	r0, r7
 8000b4c:	2164      	movs	r1, #100	; 0x64
 8000b4e:	4360      	muls	r0, r4
		triacPwm->shiftBy = (triacPwm->period-triacPwm->zcDelayAdjust);
 8000b50:	612e      	str	r6, [r5, #16]
		triacPwm->onDuration = (uint32_t)((triacPwm->period*triacPwm->dutyCycleVar)/100U);	// PWM on duration time in microsecond
 8000b52:	f7ff faeb 	bl	800012c <__udivsi3>
 8000b56:	19a4      	adds	r4, r4, r6
		triacPwm->offDuration = (triacPwm->period - triacPwm->onDuration);		// PWM off duration time in microsecond
		triacPwm->period += triacPwm->shiftBy;
 8000b58:	62ac      	str	r4, [r5, #40]	; 0x28
		triacPwm->offDuration += triacPwm->shiftBy;
 8000b5a:	1a24      	subs	r4, r4, r0
		triacPwm->onDuration = (uint32_t)((triacPwm->period*triacPwm->dutyCycleVar)/100U);	// PWM on duration time in microsecond
 8000b5c:	6228      	str	r0, [r5, #32]
		triacPwm->offDuration += triacPwm->shiftBy;
 8000b5e:	626c      	str	r4, [r5, #36]	; 0x24
	}


}
 8000b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	49742400 	.word	0x49742400

08000b68 <OD_PWM_RegulateTriacPWM>:
/**
  * @brief regulates pwm for triac 1 & 2
  * @param triacPwm: triac related struct
  * @retval none
  */
void OD_PWM_RegulateTriacPWM(PWM *triacPwm){
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	0006      	movs	r6, r0
	if(triacPwm->enabled > 0U && triacPwm->frequency > 0.0f){
 8000b6c:	7803      	ldrb	r3, [r0, #0]
 8000b6e:	362e      	adds	r6, #46	; 0x2e
void OD_PWM_RegulateTriacPWM(PWM *triacPwm){
 8000b70:	0005      	movs	r5, r0
 8000b72:	7834      	ldrb	r4, [r6, #0]
	if(triacPwm->enabled > 0U && triacPwm->frequency > 0.0f){
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d010      	beq.n	8000b9a <OD_PWM_RegulateTriacPWM+0x32>
 8000b78:	2100      	movs	r1, #0
 8000b7a:	69c0      	ldr	r0, [r0, #28]
 8000b7c:	f7ff fb88 	bl	8000290 <__aeabi_fcmpgt>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d00a      	beq.n	8000b9a <OD_PWM_RegulateTriacPWM+0x32>
		if( (triacPwm->dutyCycleVar < triacPwm->dutyCycle) && (triacPwm->dutyCycleVar  != triacPwm->dutyCycle)){
 8000b84:	352c      	adds	r5, #44	; 0x2c
 8000b86:	782b      	ldrb	r3, [r5, #0]
 8000b88:	42a3      	cmp	r3, r4
 8000b8a:	d902      	bls.n	8000b92 <OD_PWM_RegulateTriacPWM+0x2a>
			triacPwm->dutyCycleVar ++;
 8000b8c:	3401      	adds	r4, #1
		}else if (	(triacPwm->dutyCycleVar  > triacPwm->dutyCycle)	&& (triacPwm->dutyCycleVar  != triacPwm->dutyCycle)){
			triacPwm->dutyCycleVar --;
		}
	}else{
		if(triacPwm->dutyCycleVar > 0U){
			triacPwm->dutyCycleVar--;
 8000b8e:	7034      	strb	r4, [r6, #0]
		}
	}
//	DEBUG_PRINT_INT("D: ", triacPwm->dutyCycle , "\r\n");
//	DEBUG_PRINT_INT("DV: ", triacPwm->dutyCycleVar , "\r\n");
}
 8000b90:	e005      	b.n	8000b9e <OD_PWM_RegulateTriacPWM+0x36>
		}else if (	(triacPwm->dutyCycleVar  > triacPwm->dutyCycle)	&& (triacPwm->dutyCycleVar  != triacPwm->dutyCycle)){
 8000b92:	42a3      	cmp	r3, r4
 8000b94:	d203      	bcs.n	8000b9e <OD_PWM_RegulateTriacPWM+0x36>
			triacPwm->dutyCycleVar--;
 8000b96:	3c01      	subs	r4, #1
 8000b98:	e7f9      	b.n	8000b8e <OD_PWM_RegulateTriacPWM+0x26>
		if(triacPwm->dutyCycleVar > 0U){
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1fb      	bne.n	8000b96 <OD_PWM_RegulateTriacPWM+0x2e>
}
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}

08000ba0 <OD_PWM_GenTriacPWM>:
  * @retval none
  */
void OD_PWM_GenTriacPWM(TIM_HandleTypeDef *htim, PWM *triacPwm, uint8_t triacIndex){
	//DEBUG_PRINT_INT("TRIAC_1_GPIO_Port", (uint32_t)triacPwm->channel_1_port, NEW_LINE);

	if((triacPwm->enabled > 0U || triacPwm->dutyCycleVar > 0U)){														// if triac power is on from HMI
 8000ba0:	780b      	ldrb	r3, [r1, #0]
void OD_PWM_GenTriacPWM(TIM_HandleTypeDef *htim, PWM *triacPwm, uint8_t triacIndex){
 8000ba2:	b570      	push	{r4, r5, r6, lr}
 8000ba4:	000c      	movs	r4, r1
 8000ba6:	0015      	movs	r5, r2
	if((triacPwm->enabled > 0U || triacPwm->dutyCycleVar > 0U)){														// if triac power is on from HMI
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <OD_PWM_GenTriacPWM+0x16>
 8000bac:	000b      	movs	r3, r1
 8000bae:	332e      	adds	r3, #46	; 0x2e
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d05f      	beq.n	8000c76 <OD_PWM_GenTriacPWM+0xd6>



		if(triacPwm->isZeroCrossed == 1U){																			// check if zero crossed is happend or not
 8000bb6:	0022      	movs	r2, r4
 8000bb8:	322f      	adds	r2, #47	; 0x2f
 8000bba:	7813      	ldrb	r3, [r2, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10e      	bne.n	8000bde <OD_PWM_GenTriacPWM+0x3e>
			triacPwm->isZeroCrossed = 2U;																			// reset zero cross flag
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	7013      	strb	r3, [r2, #0]
			triacPwm->counter1 = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	6063      	str	r3, [r4, #4]
		}
		if(triacPwm->isZeroCrossed >= 2U){
			if(triacPwm->dutyCycleVar <= OD_PWM_TRIAC_DUTY_LOWER_LIMIT){											// if duty cycle less than or equal lower limit, reset the pwm channel
 8000bc8:	0023      	movs	r3, r4
 8000bca:	332e      	adds	r3, #46	; 0x2e
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d80f      	bhi.n	8000bf2 <OD_PWM_GenTriacPWM+0x52>
				//HAL_GPIO_WritePin(triacPwm->channel_1_port, triacPwm->channel_1, GPIO_PIN_RESET);
				triacIndex == TRIAC_1_INDEX ? HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_RESET)
											: HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_RESET);
 8000bd2:	2d01      	cmp	r5, #1
 8000bd4:	d106      	bne.n	8000be4 <OD_PWM_GenTriacPWM+0x44>
				triacIndex == TRIAC_1_INDEX ? HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_RESET)
 8000bd6:	2200      	movs	r2, #0
			}else if(triacPwm->dutyCycleVar >=OD_PWM_TRIAC_DUTY_UPPER_LIMIT){										// if duty cycle less than or equal upper limit, set the pwm channel completely HIGH
				triacIndex == TRIAC_1_INDEX ? HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_SET)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	00c9      	lsls	r1, r1, #3
 8000bdc:	e005      	b.n	8000bea <OD_PWM_GenTriacPWM+0x4a>
		if(triacPwm->isZeroCrossed >= 2U){
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d8f2      	bhi.n	8000bc8 <OD_PWM_GenTriacPWM+0x28>
		}
	}else{
		triacPwm->counter1 = 0U;
		triacPwm->counter2 = 0U;
	}
}
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
											: HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	0109      	lsls	r1, r1, #4
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <OD_PWM_GenTriacPWM+0xdc>)
 8000bec:	f000 ff76 	bl	8001adc <HAL_GPIO_WritePin>
 8000bf0:	e7f7      	b.n	8000be2 <OD_PWM_GenTriacPWM+0x42>
			}else if(triacPwm->dutyCycleVar >=OD_PWM_TRIAC_DUTY_UPPER_LIMIT){										// if duty cycle less than or equal upper limit, set the pwm channel completely HIGH
 8000bf2:	2b5e      	cmp	r3, #94	; 0x5e
 8000bf4:	d903      	bls.n	8000bfe <OD_PWM_GenTriacPWM+0x5e>
											: HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_SET);
 8000bf6:	2d01      	cmp	r5, #1
 8000bf8:	d13b      	bne.n	8000c72 <OD_PWM_GenTriacPWM+0xd2>
				triacIndex == TRIAC_1_INDEX ? HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_SET)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	e7ec      	b.n	8000bd8 <OD_PWM_GenTriacPWM+0x38>
				triacPwm->counter1 += triacPwm->incrementBy;														// counter counts in microsecond, so 10kHz timer increment by 100us
 8000bfe:	6863      	ldr	r3, [r4, #4]
 8000c00:	8aa2      	ldrh	r2, [r4, #20]
				if(triacPwm->counter1 > (triacPwm->shiftBy+triacPwm->zcDelayAdjust)){
 8000c02:	6921      	ldr	r1, [r4, #16]
 8000c04:	6b20      	ldr	r0, [r4, #48]	; 0x30
				triacPwm->counter1 += triacPwm->incrementBy;														// counter counts in microsecond, so 10kHz timer increment by 100us
 8000c06:	18d3      	adds	r3, r2, r3
				if(triacPwm->counter1 > (triacPwm->shiftBy+triacPwm->zcDelayAdjust)){
 8000c08:	1809      	adds	r1, r1, r0
				triacPwm->counter1 += triacPwm->incrementBy;														// counter counts in microsecond, so 10kHz timer increment by 100us
 8000c0a:	6063      	str	r3, [r4, #4]
				if(triacPwm->counter1 > (triacPwm->shiftBy+triacPwm->zcDelayAdjust)){
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d921      	bls.n	8000c54 <OD_PWM_GenTriacPWM+0xb4>
					triacPwm->counter2 = triacPwm->counter1-(triacPwm->shiftBy+triacPwm->zcDelayAdjust);
 8000c10:	1a5a      	subs	r2, r3, r1
 8000c12:	60a2      	str	r2, [r4, #8]
				if((triacPwm->counter1 > triacPwm->offDuration) && (triacPwm->counter1 < triacPwm->period)){		// generate an impulse to trigger the triac
 8000c14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d90e      	bls.n	8000c38 <OD_PWM_GenTriacPWM+0x98>
 8000c1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d20b      	bcs.n	8000c38 <OD_PWM_GenTriacPWM+0x98>
					if(triacIndex == TRIAC_1_INDEX){
 8000c20:	69a1      	ldr	r1, [r4, #24]
 8000c22:	1852      	adds	r2, r2, r1
 8000c24:	2d01      	cmp	r5, #1
 8000c26:	d11a      	bne.n	8000c5e <OD_PWM_GenTriacPWM+0xbe>
						if(triacPwm->counter1 > (triacPwm->offDuration+triacPwm->pulse)){ 							// generate an impulse for 100us
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d916      	bls.n	8000c5a <OD_PWM_GenTriacPWM+0xba>
							HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
							HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_SET);
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	00c9      	lsls	r1, r1, #3
							HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_SET);
 8000c32:	4812      	ldr	r0, [pc, #72]	; (8000c7c <OD_PWM_GenTriacPWM+0xdc>)
 8000c34:	f000 ff52 	bl	8001adc <HAL_GPIO_WritePin>
				if((triacPwm->counter2 > triacPwm->offDuration) && (triacPwm->counter2 < triacPwm->period)){		// generate an impulse to trigger the triac
 8000c38:	68a2      	ldr	r2, [r4, #8]
 8000c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d9d0      	bls.n	8000be2 <OD_PWM_GenTriacPWM+0x42>
 8000c40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000c42:	428a      	cmp	r2, r1
 8000c44:	d2cd      	bcs.n	8000be2 <OD_PWM_GenTriacPWM+0x42>
					if(triacIndex == TRIAC_1_INDEX){
 8000c46:	69a1      	ldr	r1, [r4, #24]
 8000c48:	185b      	adds	r3, r3, r1
 8000c4a:	2d01      	cmp	r5, #1
 8000c4c:	d10f      	bne.n	8000c6e <OD_PWM_GenTriacPWM+0xce>
						if(triacPwm->counter2 > (triacPwm->offDuration+triacPwm->pulse)){ 							// generate an impulse for 500us
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d8c1      	bhi.n	8000bd6 <OD_PWM_GenTriacPWM+0x36>
 8000c52:	e7d2      	b.n	8000bfa <OD_PWM_GenTriacPWM+0x5a>
					triacPwm->counter2 += triacPwm->incrementBy;
 8000c54:	68a1      	ldr	r1, [r4, #8]
 8000c56:	1852      	adds	r2, r2, r1
 8000c58:	e7db      	b.n	8000c12 <OD_PWM_GenTriacPWM+0x72>
							HAL_GPIO_WritePin(TRIAC_1_GPIO_Port, TRIAC_1_Pin, GPIO_PIN_SET);
 8000c5a:	002a      	movs	r2, r5
 8000c5c:	e7e7      	b.n	8000c2e <OD_PWM_GenTriacPWM+0x8e>
						if(triacPwm->counter1 > (triacPwm->offDuration+triacPwm->pulse)){
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d903      	bls.n	8000c6a <OD_PWM_GenTriacPWM+0xca>
							HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
							HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_SET);
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0109      	lsls	r1, r1, #4
 8000c68:	e7e3      	b.n	8000c32 <OD_PWM_GenTriacPWM+0x92>
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	e7fa      	b.n	8000c64 <OD_PWM_GenTriacPWM+0xc4>
						if(triacPwm->counter2 > (triacPwm->offDuration+triacPwm->pulse)){
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d8b8      	bhi.n	8000be4 <OD_PWM_GenTriacPWM+0x44>
											: HAL_GPIO_WritePin(TRIAC_2_GPIO_Port, TRIAC_2_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	e7b7      	b.n	8000be6 <OD_PWM_GenTriacPWM+0x46>
		triacPwm->counter1 = 0U;
 8000c76:	604b      	str	r3, [r1, #4]
		triacPwm->counter2 = 0U;
 8000c78:	608b      	str	r3, [r1, #8]
}
 8000c7a:	e7b2      	b.n	8000be2 <OD_PWM_GenTriacPWM+0x42>
 8000c7c:	48000400 	.word	0x48000400

08000c80 <Test_Init>:

extern GVar_ts gVar;
extern TIM_HandleTypeDef htim14;


void Test_Init(void){
 8000c80:	b570      	push	{r4, r5, r6, lr}

	gVar.triac_1.enabled					= 1;//0U;
	gVar.triac_1.channel_1_port 			= TRIAC_1_GPIO_Port;
	gVar.triac_1.channel_1 					= TRIAC_1_Pin;
 8000c82:	2480      	movs	r4, #128	; 0x80
	gVar.triac_1.enabled					= 1;//0U;
 8000c84:	2301      	movs	r3, #1
 8000c86:	491f      	ldr	r1, [pc, #124]	; (8000d04 <Test_Init+0x84>)
	gVar.triac_1.channel_1 					= TRIAC_1_Pin;
 8000c88:	00e4      	lsls	r4, r4, #3
 8000c8a:	870c      	strh	r4, [r1, #56]	; 0x38
	gVar.triac_1.incrementBy				= 0U;
	gVar.triac_1.offDuration				= 0U;
	gVar.triac_1.onDuration					= 0U;
	gVar.triac_1.isZeroCrossed				= 0U;
	gVar.triac_1.zcDelayAdjust				= CNFG_DEF_ZC_DELAY_ADJUST;			// zero cross delay adjustment for 110V 60Hz system
	gVar.triac_1.excepStatus				= 0U;
 8000c8c:	000c      	movs	r4, r1
	gVar.triac_1.enabled					= 1;//0U;
 8000c8e:	700b      	strb	r3, [r1, #0]
	gVar.triac_1.counter1					= 0U;
 8000c90:	2300      	movs	r3, #0
	gVar.triac_1.excepStatus				= 0U;
 8000c92:	3442      	adds	r4, #66	; 0x42
 8000c94:	7023      	strb	r3, [r4, #0]
	gVar.triac_1.dutyCycle					= 0U;
 8000c96:	000a      	movs	r2, r1
	gVar.triac_2.enabled					= 0U;
	gVar.triac_2.channel_1_port 			= TRIAC_2_GPIO_Port;
	gVar.triac_2.channel_1 					= TRIAC_2_Pin;
	gVar.triac_2.counter1					= 0U;
	gVar.triac_2.counter2					= 0U;
	gVar.triac_2.dutyCycle					= 0U;
 8000c98:	000c      	movs	r4, r1
	gVar.triac_1.dutyCycle					= 0U;
 8000c9a:	322c      	adds	r2, #44	; 0x2c
	gVar.triac_2.dutyCycle					= 0U;
 8000c9c:	3470      	adds	r4, #112	; 0x70
	gVar.triac_1.dutyCycle					= 0U;
 8000c9e:	7013      	strb	r3, [r2, #0]
	gVar.triac_2.dutyCycle					= 0U;
 8000ca0:	7023      	strb	r3, [r4, #0]
	gVar.triac_1.zcDelayAdjust				= CNFG_DEF_ZC_DELAY_ADJUST;			// zero cross delay adjustment for 110V 60Hz system
 8000ca2:	4819      	ldr	r0, [pc, #100]	; (8000d08 <Test_Init+0x88>)
	gVar.triac_2.dutyCycleVar				= 0U;
	gVar.triac_2.period						= 0U;
	gVar.triac_2.incrementBy				= 0U;
 8000ca4:	000c      	movs	r4, r1
	gVar.triac_1.channel_1_port 			= TRIAC_1_GPIO_Port;
 8000ca6:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <Test_Init+0x8c>)
	gVar.triac_1.zcDelayAdjust				= CNFG_DEF_ZC_DELAY_ADJUST;			// zero cross delay adjustment for 110V 60Hz system
 8000ca8:	6308      	str	r0, [r1, #48]	; 0x30
	gVar.triac_1.channel_1_port 			= TRIAC_1_GPIO_Port;
 8000caa:	634a      	str	r2, [r1, #52]	; 0x34
	gVar.triac_2.offDuration				= 0U;
	gVar.triac_2.onDuration					= 0U;
	gVar.triac_2.isZeroCrossed				= 0U;
	gVar.triac_2.zcDelayAdjust				= CNFG_DEF_ZC_DELAY_ADJUST;			// zero cross delay adjustment for 110V 60Hz system
 8000cac:	6748      	str	r0, [r1, #116]	; 0x74
	gVar.triac_2.channel_1_port 			= TRIAC_2_GPIO_Port;
 8000cae:	678a      	str	r2, [r1, #120]	; 0x78
	gVar.triac_2.channel_1 					= TRIAC_2_Pin;
 8000cb0:	2080      	movs	r0, #128	; 0x80
 8000cb2:	000a      	movs	r2, r1
	gVar.triac_2.incrementBy				= 0U;
 8000cb4:	3458      	adds	r4, #88	; 0x58
 8000cb6:	8023      	strh	r3, [r4, #0]
	gVar.triac_2.dutyCycleVar				= 0U;
 8000cb8:	000c      	movs	r4, r1
	gVar.triac_2.channel_1 					= TRIAC_2_Pin;
 8000cba:	327c      	adds	r2, #124	; 0x7c
 8000cbc:	0100      	lsls	r0, r0, #4
 8000cbe:	8010      	strh	r0, [r2, #0]
	gVar.triac_2.excepStatus				= 0U;
 8000cc0:	000a      	movs	r2, r1
	gVar.triac_2.enabled					= 0U;
 8000cc2:	000d      	movs	r5, r1
	gVar.triac_2.dutyCycleVar				= 0U;
 8000cc4:	3472      	adds	r4, #114	; 0x72
 8000cc6:	8023      	strh	r3, [r4, #0]


	OD_PWM_InitTriac(&htim14, &gVar.triac_1, 50);
 8000cc8:	4c11      	ldr	r4, [pc, #68]	; (8000d10 <Test_Init+0x90>)
	gVar.triac_2.excepStatus				= 0U;
 8000cca:	3286      	adds	r2, #134	; 0x86
	gVar.triac_1.dutyCycleVar				= 0U;
 8000ccc:	85cb      	strh	r3, [r1, #46]	; 0x2e
	gVar.triac_2.excepStatus				= 0U;
 8000cce:	7013      	strb	r3, [r2, #0]
	gVar.triac_2.enabled					= 0U;
 8000cd0:	3544      	adds	r5, #68	; 0x44
	OD_PWM_InitTriac(&htim14, &gVar.triac_1, 50);
 8000cd2:	0020      	movs	r0, r4
 8000cd4:	2232      	movs	r2, #50	; 0x32
	gVar.triac_1.counter1					= 0U;
 8000cd6:	604b      	str	r3, [r1, #4]
	gVar.triac_1.counter2					= 0U;
 8000cd8:	608b      	str	r3, [r1, #8]
	gVar.triac_1.period						= 0U;
 8000cda:	628b      	str	r3, [r1, #40]	; 0x28
	gVar.triac_1.incrementBy				= 0U;
 8000cdc:	828b      	strh	r3, [r1, #20]
	gVar.triac_1.offDuration				= 0U;
 8000cde:	624b      	str	r3, [r1, #36]	; 0x24
	gVar.triac_1.onDuration					= 0U;
 8000ce0:	620b      	str	r3, [r1, #32]
	gVar.triac_2.enabled					= 0U;
 8000ce2:	702b      	strb	r3, [r5, #0]
	gVar.triac_2.counter1					= 0U;
 8000ce4:	648b      	str	r3, [r1, #72]	; 0x48
	gVar.triac_2.counter2					= 0U;
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
	gVar.triac_2.period						= 0U;
 8000ce8:	66cb      	str	r3, [r1, #108]	; 0x6c
	gVar.triac_2.offDuration				= 0U;
 8000cea:	668b      	str	r3, [r1, #104]	; 0x68
	gVar.triac_2.onDuration					= 0U;
 8000cec:	664b      	str	r3, [r1, #100]	; 0x64
	OD_PWM_InitTriac(&htim14, &gVar.triac_1, 50);
 8000cee:	f7ff ff07 	bl	8000b00 <OD_PWM_InitTriac>
	OD_PWM_InitTriac(&htim14, &gVar.triac_2, 50);
 8000cf2:	0029      	movs	r1, r5
 8000cf4:	2232      	movs	r2, #50	; 0x32
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	f7ff ff02 	bl	8000b00 <OD_PWM_InitTriac>

	HAL_TIM_Base_Start_IT(&htim14);
 8000cfc:	0020      	movs	r0, r4
 8000cfe:	f001 fb4d 	bl	800239c <HAL_TIM_Base_Start_IT>
}
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	20000080 	.word	0x20000080
 8000d08:	00000514 	.word	0x00000514
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	200002a0 	.word	0x200002a0

08000d14 <Test_Handler>:


void Test_Handler(void){
 8000d14:	b570      	push	{r4, r5, r6, lr}
	  static uint32_t tick = 0;
	  if((HAL_GetTick() - tick)>=20){
 8000d16:	f000 fc73 	bl	8001600 <HAL_GetTick>
 8000d1a:	2813      	cmp	r0, #19
 8000d1c:	d90d      	bls.n	8000d3a <Test_Handler+0x26>
		  OD_PWM_CalcTriacPWM(&gVar.triac_1);
 8000d1e:	4d07      	ldr	r5, [pc, #28]	; (8000d3c <Test_Handler+0x28>)
 8000d20:	0028      	movs	r0, r5
 8000d22:	f7ff fefb 	bl	8000b1c <OD_PWM_CalcTriacPWM>
		  OD_PWM_CalcTriacPWM(&gVar.triac_2);
 8000d26:	4c06      	ldr	r4, [pc, #24]	; (8000d40 <Test_Handler+0x2c>)
 8000d28:	0020      	movs	r0, r4
 8000d2a:	f7ff fef7 	bl	8000b1c <OD_PWM_CalcTriacPWM>
		  OD_PWM_RegulateTriacPWM(&gVar.triac_1);
 8000d2e:	0028      	movs	r0, r5
 8000d30:	f7ff ff1a 	bl	8000b68 <OD_PWM_RegulateTriacPWM>
		  OD_PWM_RegulateTriacPWM(&gVar.triac_2);
 8000d34:	0020      	movs	r0, r4
 8000d36:	f7ff ff17 	bl	8000b68 <OD_PWM_RegulateTriacPWM>
	  }
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	20000080 	.word	0x20000080
 8000d40:	200000c4 	.word	0x200000c4

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	2510      	movs	r5, #16
{
 8000d48:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	a809      	add	r0, sp, #36	; 0x24
 8000d50:	f002 f99b 	bl	800308a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	002a      	movs	r2, r5
 8000d56:	2100      	movs	r1, #0
 8000d58:	4668      	mov	r0, sp
 8000d5a:	f002 f996 	bl	800308a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5e:	002a      	movs	r2, r5
 8000d60:	2100      	movs	r1, #0
 8000d62:	a804      	add	r0, sp, #16
 8000d64:	f002 f991 	bl	800308a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000d68:	231a      	movs	r3, #26
 8000d6a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d76:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d78:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d7a:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7c:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d7e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d84:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d86:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d88:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d8c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f000 feff 	bl	8001b90 <HAL_RCC_OscConfig>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d96:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da0:	0021      	movs	r1, r4
 8000da2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da4:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da8:	f001 f91c 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x70>
 8000db0:	b672      	cpsid	i
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <SystemClock_Config+0x6e>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000db4:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000db8:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	f001 f9a7 	bl	800210c <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x82>
 8000dc2:	b672      	cpsid	i
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <SystemClock_Config+0x80>
}
 8000dc6:	b015      	add	sp, #84	; 0x54
 8000dc8:	bd30      	pop	{r4, r5, pc}
	...

08000dcc <main>:
{
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2780      	movs	r7, #128	; 0x80
{
 8000dd0:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8000dd2:	f000 fbf9 	bl	80015c8 <HAL_Init>
  SystemClock_Config();
 8000dd6:	f7ff ffb5 	bl	8000d44 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	2214      	movs	r2, #20
 8000ddc:	2100      	movs	r1, #0
 8000dde:	a809      	add	r0, sp, #36	; 0x24
 8000de0:	f002 f953 	bl	800308a <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4bd4      	ldr	r3, [pc, #848]	; (8001138 <main+0x36c>)
 8000de8:	033f      	lsls	r7, r7, #12
 8000dea:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	0280      	lsls	r0, r0, #10
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	433a      	orrs	r2, r7
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	403a      	ands	r2, r7
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4301      	orrs	r1, r0
 8000e02:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, M_CH_C_Pin|RS485_DIR_U2_Pin|RLY_3_Pin|RLY_4_Pin
 8000e0c:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	9201      	str	r2, [sp, #4]
 8000e10:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, M_CH_C_Pin|RS485_DIR_U2_Pin|RLY_3_Pin|RLY_4_Pin
 8000e14:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	430a      	orrs	r2, r1
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, M_CH_C_Pin|RS485_DIR_U2_Pin|RLY_3_Pin|RLY_4_Pin
 8000e1c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	400b      	ands	r3, r1
 8000e20:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, M_CH_C_Pin|RS485_DIR_U2_Pin|RLY_3_Pin|RLY_4_Pin
 8000e22:	49c6      	ldr	r1, [pc, #792]	; (800113c <main+0x370>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, M_CH_C_Pin|RS485_DIR_U2_Pin|RLY_3_Pin|RLY_4_Pin
 8000e26:	f000 fe59 	bl	8001adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, M_CH_A_Pin|TRIAC_1_Pin|TRIAC_2_Pin|RLY_1_Pin
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	49c4      	ldr	r1, [pc, #784]	; (8001140 <main+0x374>)
 8000e2e:	48c5      	ldr	r0, [pc, #788]	; (8001144 <main+0x378>)
 8000e30:	f000 fe54 	bl	8001adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DOUT_2_Pin|DOUT_1_Pin, GPIO_PIN_SET);
 8000e34:	2181      	movs	r1, #129	; 0x81
 8000e36:	2201      	movs	r2, #1
 8000e38:	48c2      	ldr	r0, [pc, #776]	; (8001144 <main+0x378>)
 8000e3a:	01c9      	lsls	r1, r1, #7
 8000e3c:	f000 fe4e 	bl	8001adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DOUT_4_Pin|DOUT_3_Pin, GPIO_PIN_SET);
 8000e40:	21c0      	movs	r1, #192	; 0xc0
 8000e42:	2090      	movs	r0, #144	; 0x90
 8000e44:	2201      	movs	r2, #1
 8000e46:	0189      	lsls	r1, r1, #6
 8000e48:	05c0      	lsls	r0, r0, #23
 8000e4a:	f000 fe47 	bl	8001adc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DINP_2_Pin|DINP_3_Pin|DINP_4_Pin;
 8000e4e:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	48bd      	ldr	r0, [pc, #756]	; (8001148 <main+0x37c>)
  GPIO_InitStruct.Pin = DINP_2_Pin|DINP_3_Pin|DINP_4_Pin;
 8000e52:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = DINP_2_Pin|DINP_3_Pin|DINP_4_Pin;
 8000e56:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f000 fd88 	bl	8001970 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = M_CH_C_Pin|RLY_3_Pin|RLY_4_Pin|RLY_5_Pin;
 8000e64:	4bb9      	ldr	r3, [pc, #740]	; (800114c <main+0x380>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	a909      	add	r1, sp, #36	; 0x24
 8000e68:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = M_CH_C_Pin|RLY_3_Pin|RLY_4_Pin|RLY_5_Pin;
 8000e6a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f000 fd7d 	bl	8001970 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = RS485_DIR_U2_Pin|D1_SCR_GATE_1_Pin;
 8000e78:	4bb5      	ldr	r3, [pc, #724]	; (8001150 <main+0x384>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	a909      	add	r1, sp, #36	; 0x24
 8000e7c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = RS485_DIR_U2_Pin|D1_SCR_GATE_1_Pin;
 8000e7e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f000 fd73 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M_CH_A_Pin|M_CH_B_Pin|M_NEG_5V_PWM_Pin;
 8000e8a:	4bb2      	ldr	r3, [pc, #712]	; (8001154 <main+0x388>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	48ad      	ldr	r0, [pc, #692]	; (8001144 <main+0x378>)
 8000e8e:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = M_CH_A_Pin|M_CH_B_Pin|M_NEG_5V_PWM_Pin;
 8000e90:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f000 fd6a 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FACTORY_RST_Pin|DINP_1_Pin;
 8000e9c:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	48a9      	ldr	r0, [pc, #676]	; (8001144 <main+0x378>)
  GPIO_InitStruct.Pin = FACTORY_RST_Pin|DINP_1_Pin;
 8000ea0:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = FACTORY_RST_Pin|DINP_1_Pin;
 8000ea4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f000 fd61 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TRIAC_1_Pin|TRIAC_2_Pin|RLY_1_Pin|RLY_2_Pin
 8000eae:	4baa      	ldr	r3, [pc, #680]	; (8001158 <main+0x38c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	48a4      	ldr	r0, [pc, #656]	; (8001144 <main+0x378>)
 8000eb2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = TRIAC_1_Pin|TRIAC_2_Pin|RLY_1_Pin|RLY_2_Pin
 8000eb4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f000 fd58 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DOUT_2_Pin|DOUT_1_Pin;
 8000ec0:	2381      	movs	r3, #129	; 0x81
 8000ec2:	01db      	lsls	r3, r3, #7
 8000ec4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ec6:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	489e      	ldr	r0, [pc, #632]	; (8001144 <main+0x378>)
 8000eca:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ecc:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ece:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f000 fd4d 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ZERO_CROSS_Pin;
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000edc:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(ZERO_CROSS_GPIO_Port, &GPIO_InitStruct);
 8000ede:	4899      	ldr	r0, [pc, #612]	; (8001144 <main+0x378>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(ZERO_CROSS_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ZERO_CROSS_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f000 fd42 	bl	8001970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DOUT_4_Pin|DOUT_3_Pin;
 8000eec:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ef0:	2311      	movs	r3, #17
  GPIO_InitStruct.Pin = DOUT_4_Pin|DOUT_3_Pin;
 8000ef2:	0192      	lsls	r2, r2, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	a909      	add	r1, sp, #36	; 0x24
 8000ef6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ef8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = DOUT_4_Pin|DOUT_3_Pin;
 8000efa:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f000 fd36 	bl	8001970 <HAL_GPIO_Init>
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	0240      	lsls	r0, r0, #9
 8000f08:	f000 fdfc 	bl	8001b04 <HAL_I2CEx_EnableFastModePlus>
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB9);
 8000f0c:	0038      	movs	r0, r7
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	270c      	movs	r7, #12
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB9);
 8000f10:	f000 fdf8 	bl	8001b04 <HAL_I2CEx_EnableFastModePlus>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000f14:	0022      	movs	r2, r4
 8000f16:	0029      	movs	r1, r5
 8000f18:	2007      	movs	r0, #7
 8000f1a:	f000 fc97 	bl	800184c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f000 fcbe 	bl	80018a0 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f24:	003a      	movs	r2, r7
 8000f26:	0021      	movs	r1, r4
 8000f28:	a809      	add	r0, sp, #36	; 0x24
 8000f2a:	f002 f8ae 	bl	800308a <memset>
  hadc.Instance = ADC1;
 8000f2e:	4e8b      	ldr	r6, [pc, #556]	; (800115c <main+0x390>)
 8000f30:	4b8b      	ldr	r3, [pc, #556]	; (8001160 <main+0x394>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f32:	0030      	movs	r0, r6
  hadc.Instance = ADC1;
 8000f34:	6033      	str	r3, [r6, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f36:	2304      	movs	r3, #4
 8000f38:	6173      	str	r3, [r6, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3a:	23c2      	movs	r3, #194	; 0xc2
 8000f3c:	33ff      	adds	r3, #255	; 0xff
 8000f3e:	61f3      	str	r3, [r6, #28]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f40:	61b4      	str	r4, [r6, #24]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f42:	1d73      	adds	r3, r6, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f44:	6074      	str	r4, [r6, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f46:	60b4      	str	r4, [r6, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	60f4      	str	r4, [r6, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f4a:	6135      	str	r5, [r6, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f4c:	6234      	str	r4, [r6, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f4e:	77dc      	strb	r4, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f50:	62b5      	str	r5, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f52:	f000 fb5b 	bl	800160c <HAL_ADC_Init>
 8000f56:	42a0      	cmp	r0, r4
 8000f58:	d001      	beq.n	8000f5e <main+0x192>
 8000f5a:	b672      	cpsid	i
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <main+0x190>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f5e:	2480      	movs	r4, #128	; 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f60:	2306      	movs	r3, #6
  sConfig.Channel = ADC_CHANNEL_0;
 8000f62:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f64:	0164      	lsls	r4, r4, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f66:	0030      	movs	r0, r6
 8000f68:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f6a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000f6c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6e:	f000 fbf5 	bl	800175c <HAL_ADC_ConfigChannel>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d001      	beq.n	8000f7a <main+0x1ae>
 8000f76:	b672      	cpsid	i
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <main+0x1ac>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f7a:	0030      	movs	r0, r6
 8000f7c:	a909      	add	r1, sp, #36	; 0x24
  sConfig.Channel = ADC_CHANNEL_1;
 8000f7e:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f80:	f000 fbec 	bl	800175c <HAL_ADC_ConfigChannel>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <main+0x1c0>
 8000f88:	b672      	cpsid	i
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <main+0x1be>
  htim6.Init.Prescaler = 32-1;
 8000f8c:	251f      	movs	r5, #31
  htim6.Instance = TIM6;
 8000f8e:	4875      	ldr	r0, [pc, #468]	; (8001164 <main+0x398>)
 8000f90:	4a75      	ldr	r2, [pc, #468]	; (8001168 <main+0x39c>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	6083      	str	r3, [r0, #8]
  htim6.Instance = TIM6;
 8000f94:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = 1563;
 8000f96:	4a75      	ldr	r2, [pc, #468]	; (800116c <main+0x3a0>)
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	6183      	str	r3, [r0, #24]
  htim6.Init.Prescaler = 32-1;
 8000f9a:	6045      	str	r5, [r0, #4]
  htim6.Init.Period = 1563;
 8000f9c:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f9e:	f001 fb1b 	bl	80025d8 <HAL_TIM_Base_Init>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <main+0x1de>
 8000fa6:	b672      	cpsid	i
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <main+0x1dc>
  htim7.Instance = TIM7;
 8000faa:	4871      	ldr	r0, [pc, #452]	; (8001170 <main+0x3a4>)
 8000fac:	4a71      	ldr	r2, [pc, #452]	; (8001174 <main+0x3a8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	6083      	str	r3, [r0, #8]
  htim7.Instance = TIM7;
 8000fb0:	6002      	str	r2, [r0, #0]
  htim7.Init.Period = 3647;
 8000fb2:	4a71      	ldr	r2, [pc, #452]	; (8001178 <main+0x3ac>)
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	6183      	str	r3, [r0, #24]
  htim7.Init.Prescaler = 32-1;
 8000fb6:	6045      	str	r5, [r0, #4]
  htim7.Init.Period = 3647;
 8000fb8:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fba:	f001 fb0d 	bl	80025d8 <HAL_TIM_Base_Init>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <main+0x1fa>
 8000fc2:	b672      	cpsid	i
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x1f8>
  huart1.Instance = USART1;
 8000fc6:	486d      	ldr	r0, [pc, #436]	; (800117c <main+0x3b0>)
 8000fc8:	4a6d      	ldr	r2, [pc, #436]	; (8001180 <main+0x3b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 8000fcc:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fce:	22e1      	movs	r2, #225	; 0xe1
 8000fd0:	0252      	lsls	r2, r2, #9
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8000fde:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe2:	f001 fff3 	bl	8002fcc <HAL_UART_Init>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <main+0x222>
 8000fea:	b672      	cpsid	i
  while (1)
 8000fec:	e7fe      	b.n	8000fec <main+0x220>
  huart2.Instance = USART2;
 8000fee:	4865      	ldr	r0, [pc, #404]	; (8001184 <main+0x3b8>)
 8000ff0:	4a65      	ldr	r2, [pc, #404]	; (8001188 <main+0x3bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000ff2:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 8000ff4:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000ff6:	2296      	movs	r2, #150	; 0x96
 8000ff8:	0192      	lsls	r2, r2, #6
 8000ffa:	6042      	str	r2, [r0, #4]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	00d2      	lsls	r2, r2, #3
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001000:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001002:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	f001 ffdd 	bl	8002fcc <HAL_UART_Init>
 8001012:	1e06      	subs	r6, r0, #0
 8001014:	d001      	beq.n	800101a <main+0x24e>
 8001016:	b672      	cpsid	i
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0x24c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	0001      	movs	r1, r0
 800101c:	2210      	movs	r2, #16
 800101e:	a805      	add	r0, sp, #20
 8001020:	f002 f833 	bl	800308a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	2208      	movs	r2, #8
 8001026:	0031      	movs	r1, r6
 8001028:	a803      	add	r0, sp, #12
 800102a:	f002 f82e 	bl	800308a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	221c      	movs	r2, #28
 8001030:	0031      	movs	r1, r6
 8001032:	a809      	add	r0, sp, #36	; 0x24
 8001034:	f002 f829 	bl	800308a <memset>
  htim3.Instance = TIM3;
 8001038:	4d54      	ldr	r5, [pc, #336]	; (800118c <main+0x3c0>)
 800103a:	4b55      	ldr	r3, [pc, #340]	; (8001190 <main+0x3c4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800103c:	0028      	movs	r0, r5
  htim3.Instance = TIM3;
 800103e:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 3-1;
 8001040:	2302      	movs	r3, #2
 8001042:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 1536-1;
 8001044:	4b53      	ldr	r3, [pc, #332]	; (8001194 <main+0x3c8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	60ae      	str	r6, [r5, #8]
  htim3.Init.Period = 1536-1;
 8001048:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	612e      	str	r6, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800104e:	f001 fac3 	bl	80025d8 <HAL_TIM_Base_Init>
 8001052:	2800      	cmp	r0, #0
 8001054:	d001      	beq.n	800105a <main+0x28e>
 8001056:	b672      	cpsid	i
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x28c>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105a:	0028      	movs	r0, r5
 800105c:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105e:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001060:	f001 fbb4 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8001064:	2800      	cmp	r0, #0
 8001066:	d001      	beq.n	800106c <main+0x2a0>
 8001068:	b672      	cpsid	i
  while (1)
 800106a:	e7fe      	b.n	800106a <main+0x29e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800106c:	0028      	movs	r0, r5
 800106e:	f001 fadb 	bl	8002628 <HAL_TIM_PWM_Init>
 8001072:	2800      	cmp	r0, #0
 8001074:	d001      	beq.n	800107a <main+0x2ae>
 8001076:	b672      	cpsid	i
  while (1)
 8001078:	e7fe      	b.n	8001078 <main+0x2ac>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800107c:	2610      	movs	r6, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107e:	0028      	movs	r0, r5
 8001080:	a903      	add	r1, sp, #12
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001082:	9603      	str	r6, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001086:	f001 fc41 	bl	800290c <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	1e02      	subs	r2, r0, #0
 800108c:	d001      	beq.n	8001092 <main+0x2c6>
 800108e:	b672      	cpsid	i
  while (1)
 8001090:	e7fe      	b.n	8001090 <main+0x2c4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001094:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001096:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001098:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109a:	a909      	add	r1, sp, #36	; 0x24
 800109c:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a0:	f001 fb2a 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d001      	beq.n	80010ac <main+0x2e0>
 80010a8:	b672      	cpsid	i
  while (1)
 80010aa:	e7fe      	b.n	80010aa <main+0x2de>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ac:	2204      	movs	r2, #4
 80010ae:	0028      	movs	r0, r5
 80010b0:	a909      	add	r1, sp, #36	; 0x24
 80010b2:	f001 fb21 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 80010b6:	1e04      	subs	r4, r0, #0
 80010b8:	d001      	beq.n	80010be <main+0x2f2>
 80010ba:	b672      	cpsid	i
  while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x2f0>
  HAL_TIM_MspPostInit(&htim3);
 80010be:	0028      	movs	r0, r5
 80010c0:	f000 f948 	bl	8001354 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 80010c4:	4834      	ldr	r0, [pc, #208]	; (8001198 <main+0x3cc>)
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <main+0x3d0>)
  htim14.Init.Prescaler = 32-1;
 80010c8:	271f      	movs	r7, #31
  htim14.Instance = TIM14;
 80010ca:	6003      	str	r3, [r0, #0]
  htim14.Init.Period = 100;
 80010cc:	2364      	movs	r3, #100	; 0x64
  htim14.Init.Prescaler = 32-1;
 80010ce:	6047      	str	r7, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	6084      	str	r4, [r0, #8]
  htim14.Init.Period = 100;
 80010d2:	60c3      	str	r3, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	6104      	str	r4, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010d8:	f001 fa7e 	bl	80025d8 <HAL_TIM_Base_Init>
 80010dc:	2800      	cmp	r0, #0
 80010de:	d001      	beq.n	80010e4 <main+0x318>
 80010e0:	b672      	cpsid	i
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0x316>
  hiwdg.Instance = IWDG;
 80010e4:	482e      	ldr	r0, [pc, #184]	; (80011a0 <main+0x3d4>)
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <main+0x3d8>)
 80010e8:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80010ea:	2304      	movs	r3, #4
 80010ec:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <main+0x3dc>)
 80010f0:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 80010f2:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80010f4:	f000 fd1a 	bl	8001b2c <HAL_IWDG_Init>
 80010f8:	1e05      	subs	r5, r0, #0
 80010fa:	d001      	beq.n	8001100 <main+0x334>
 80010fc:	b672      	cpsid	i
  while (1)
 80010fe:	e7fe      	b.n	80010fe <main+0x332>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001100:	0001      	movs	r1, r0
 8001102:	0032      	movs	r2, r6
 8001104:	a809      	add	r0, sp, #36	; 0x24
 8001106:	f001 ffc0 	bl	800308a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110a:	2208      	movs	r2, #8
 800110c:	0029      	movs	r1, r5
 800110e:	a805      	add	r0, sp, #20
 8001110:	f001 ffbb 	bl	800308a <memset>
  htim15.Instance = TIM15;
 8001114:	4c25      	ldr	r4, [pc, #148]	; (80011ac <main+0x3e0>)
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <main+0x3e4>)
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001118:	0020      	movs	r0, r4
  htim15.Instance = TIM15;
 800111a:	6023      	str	r3, [r4, #0]
  htim15.Init.Period = 30000;
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <main+0x3e8>)
  htim15.Init.Prescaler = 32-1;
 800111e:	6067      	str	r7, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 30000;
 8001122:	60e3      	str	r3, [r4, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	6125      	str	r5, [r4, #16]
  htim15.Init.RepetitionCounter = 0;
 8001126:	6165      	str	r5, [r4, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800112a:	f001 fa55 	bl	80025d8 <HAL_TIM_Base_Init>
 800112e:	2800      	cmp	r0, #0
 8001130:	d042      	beq.n	80011b8 <main+0x3ec>
 8001132:	b672      	cpsid	i
  while (1)
 8001134:	e7fe      	b.n	8001134 <main+0x368>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000
 800113c:	0000c930 	.word	0x0000c930
 8001140:	00003e79 	.word	0x00003e79
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800
 800114c:	00004910 	.word	0x00004910
 8001150:	00008020 	.word	0x00008020
 8001154:	00000241 	.word	0x00000241
 8001158:	00003c38 	.word	0x00003c38
 800115c:	200002e8 	.word	0x200002e8
 8001160:	40012400 	.word	0x40012400
 8001164:	200001d4 	.word	0x200001d4
 8001168:	40001000 	.word	0x40001000
 800116c:	0000061b 	.word	0x0000061b
 8001170:	20000328 	.word	0x20000328
 8001174:	40001400 	.word	0x40001400
 8001178:	00000e3f 	.word	0x00000e3f
 800117c:	20000150 	.word	0x20000150
 8001180:	40013800 	.word	0x40013800
 8001184:	2000021c 	.word	0x2000021c
 8001188:	40004400 	.word	0x40004400
 800118c:	20000108 	.word	0x20000108
 8001190:	40000400 	.word	0x40000400
 8001194:	000005ff 	.word	0x000005ff
 8001198:	200002a0 	.word	0x200002a0
 800119c:	40002000 	.word	0x40002000
 80011a0:	20000070 	.word	0x20000070
 80011a4:	40003000 	.word	0x40003000
 80011a8:	00000fff 	.word	0x00000fff
 80011ac:	20000028 	.word	0x20000028
 80011b0:	40014000 	.word	0x40014000
 80011b4:	00007530 	.word	0x00007530
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011ba:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011be:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011c2:	f001 fb03 	bl	80027cc <HAL_TIM_ConfigClockSource>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d001      	beq.n	80011ce <main+0x402>
 80011ca:	b672      	cpsid	i
  while (1)
 80011cc:	e7fe      	b.n	80011cc <main+0x400>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011d0:	a905      	add	r1, sp, #20
 80011d2:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80011d4:	9605      	str	r6, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011d6:	f001 fb99 	bl	800290c <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d001      	beq.n	80011e2 <main+0x416>
 80011de:	b672      	cpsid	i
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <main+0x414>
  Test_Init();
 80011e2:	f7ff fd4d 	bl	8000c80 <Test_Init>
	  Test_Handler();
 80011e6:	f7ff fd95 	bl	8000d14 <Test_Handler>
  while (1)
 80011ea:	e7fc      	b.n	80011e6 <main+0x41a>

080011ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	2001      	movs	r0, #1
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_MspInit+0x2c>)
{
 80011f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	6999      	ldr	r1, [r3, #24]
 80011f4:	4301      	orrs	r1, r0
 80011f6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4002      	ands	r2, r0
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	69da      	ldr	r2, [r3, #28]
 8001206:	430a      	orrs	r2, r1
 8001208:	61da      	str	r2, [r3, #28]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	400b      	ands	r3, r1
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	b002      	add	sp, #8
 8001214:	4770      	bx	lr
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b510      	push	{r4, lr}
 800121e:	0004      	movs	r4, r0
 8001220:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	2214      	movs	r2, #20
 8001224:	2100      	movs	r1, #0
 8001226:	a803      	add	r0, sp, #12
 8001228:	f001 ff2f 	bl	800308a <memset>
  if(hadc->Instance==ADC1)
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_ADC_MspInit+0x58>)
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d11c      	bne.n	800126e <HAL_ADC_MspInit+0x52>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001234:	2080      	movs	r0, #128	; 0x80
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_ADC_MspInit+0x5c>)
 8001238:	0080      	lsls	r0, r0, #2
 800123a:	6999      	ldr	r1, [r3, #24]
 800123c:	4301      	orrs	r1, r0
 800123e:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001242:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001246:	4002      	ands	r2, r0
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	695a      	ldr	r2, [r3, #20]
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = M_K_TEMP_ANALOG_Pin|M_ANALOG_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	430a      	orrs	r2, r1
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	400b      	ands	r3, r1
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M_K_TEMP_ANALOG_Pin|M_ANALOG_IN_Pin;
 800125e:	2303      	movs	r3, #3
 8001260:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f000 fb81 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126e:	b008      	add	sp, #32
 8001270:	bd10      	pop	{r4, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40012400 	.word	0x40012400
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800127c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if(htim_base->Instance==TIM3)
 800127e:	6803      	ldr	r3, [r0, #0]
 8001280:	4a2e      	ldr	r2, [pc, #184]	; (800133c <HAL_TIM_Base_MspInit+0xc0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10a      	bne.n	800129c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001286:	2002      	movs	r0, #2
 8001288:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <HAL_TIM_Base_MspInit+0xc4>)
 800128a:	69d1      	ldr	r1, [r2, #28]
 800128c:	4301      	orrs	r1, r0
 800128e:	61d1      	str	r1, [r2, #28]
 8001290:	69d3      	ldr	r3, [r2, #28]
 8001292:	4003      	ands	r3, r0
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001298:	b007      	add	sp, #28
 800129a:	bd00      	pop	{pc}
  else if(htim_base->Instance==TIM6)
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_TIM_Base_MspInit+0xc8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d111      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012a2:	2010      	movs	r0, #16
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_TIM_Base_MspInit+0xc4>)
 80012a6:	69d1      	ldr	r1, [r2, #28]
 80012a8:	4301      	orrs	r1, r0
 80012aa:	61d1      	str	r1, [r2, #28]
 80012ac:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012b0:	4003      	ands	r3, r0
 80012b2:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80012b4:	3001      	adds	r0, #1
 80012b6:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012b8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80012ba:	f000 fac7 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80012be:	2011      	movs	r0, #17
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80012c0:	f000 faee 	bl	80018a0 <HAL_NVIC_EnableIRQ>
}
 80012c4:	e7e8      	b.n	8001298 <HAL_TIM_Base_MspInit+0x1c>
  else if(htim_base->Instance==TIM7)
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <HAL_TIM_Base_MspInit+0xcc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d10f      	bne.n	80012ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012cc:	2020      	movs	r0, #32
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <HAL_TIM_Base_MspInit+0xc4>)
 80012d0:	69d1      	ldr	r1, [r2, #28]
 80012d2:	4301      	orrs	r1, r0
 80012d4:	61d1      	str	r1, [r2, #28]
 80012d6:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012da:	4003      	ands	r3, r0
 80012dc:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012de:	380e      	subs	r0, #14
 80012e0:	0011      	movs	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012e2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012e4:	f000 fab2 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012e8:	2012      	movs	r0, #18
 80012ea:	e7e9      	b.n	80012c0 <HAL_TIM_Base_MspInit+0x44>
  else if(htim_base->Instance==TIM14)
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_TIM_Base_MspInit+0xd0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d110      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012f2:	2080      	movs	r0, #128	; 0x80
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <HAL_TIM_Base_MspInit+0xc4>)
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	69d1      	ldr	r1, [r2, #28]
 80012fa:	4301      	orrs	r1, r0
 80012fc:	61d1      	str	r1, [r2, #28]
 80012fe:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8001300:	2102      	movs	r1, #2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001302:	4003      	ands	r3, r0
 8001304:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8001306:	38ed      	subs	r0, #237	; 0xed
 8001308:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 800130a:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 800130c:	f000 fa9e 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001310:	2013      	movs	r0, #19
 8001312:	e7d5      	b.n	80012c0 <HAL_TIM_Base_MspInit+0x44>
  else if(htim_base->Instance==TIM15)
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_TIM_Base_MspInit+0xd4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d1be      	bne.n	8001298 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800131a:	2080      	movs	r0, #128	; 0x80
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_TIM_Base_MspInit+0xc4>)
 800131e:	0240      	lsls	r0, r0, #9
 8001320:	6991      	ldr	r1, [r2, #24]
 8001322:	4301      	orrs	r1, r0
 8001324:	6191      	str	r1, [r2, #24]
 8001326:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 8001328:	2102      	movs	r1, #2
    __HAL_RCC_TIM15_CLK_ENABLE();
 800132a:	4003      	ands	r3, r0
 800132c:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 800132e:	2014      	movs	r0, #20
 8001330:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001332:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM15_IRQn, 2, 0);
 8001334:	f000 fa8a 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001338:	2014      	movs	r0, #20
 800133a:	e7c1      	b.n	80012c0 <HAL_TIM_Base_MspInit+0x44>
 800133c:	40000400 	.word	0x40000400
 8001340:	40021000 	.word	0x40021000
 8001344:	40001000 	.word	0x40001000
 8001348:	40001400 	.word	0x40001400
 800134c:	40002000 	.word	0x40002000
 8001350:	40014000 	.word	0x40014000

08001354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001354:	b510      	push	{r4, lr}
 8001356:	0004      	movs	r4, r0
 8001358:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	2214      	movs	r2, #20
 800135c:	2100      	movs	r1, #0
 800135e:	a801      	add	r0, sp, #4
 8001360:	f001 fe93 	bl	800308a <memset>
  if(htim->Instance==TIM3)
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_TIM_MspPostInit+0x4c>)
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d117      	bne.n	800139c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	2080      	movs	r0, #128	; 0x80
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_TIM_MspPostInit+0x50>)
 8001370:	0280      	lsls	r0, r0, #10
 8001372:	6951      	ldr	r1, [r2, #20]
 8001374:	4301      	orrs	r1, r0
 8001376:	6151      	str	r1, [r2, #20]
 8001378:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = M_4TO20MA_PWM_2_Pin|M_4TO20MA_PWM_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4003      	ands	r3, r0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = M_4TO20MA_PWM_2_Pin|M_4TO20MA_PWM_1_Pin;
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	3bbe      	subs	r3, #190	; 0xbe
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001394:	3301      	adds	r3, #1
 8001396:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f000 faea 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800139c:	b006      	add	sp, #24
 800139e:	bd10      	pop	{r4, pc}
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b530      	push	{r4, r5, lr}
 80013aa:	0004      	movs	r4, r0
 80013ac:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	2214      	movs	r2, #20
 80013b0:	2100      	movs	r1, #0
 80013b2:	a805      	add	r0, sp, #20
 80013b4:	f001 fe69 	bl	800308a <memset>
  if(huart->Instance==USART1)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_UART_MspInit+0xc8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d12c      	bne.n	800141a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c0:	2080      	movs	r0, #128	; 0x80
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <HAL_UART_MspInit+0xcc>)
 80013c4:	01c0      	lsls	r0, r0, #7
 80013c6:	6999      	ldr	r1, [r3, #24]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBUG_TX_U1_Pin|DBUG_RX_U1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ca:	4301      	orrs	r1, r0
 80013cc:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d0:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d4:	4002      	ands	r2, r0
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	430a      	orrs	r2, r1
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e4:	2403      	movs	r4, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	400b      	ands	r3, r1
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DBUG_TX_U1_Pin|DBUG_RX_U1_Pin;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80013fa:	3b01      	subs	r3, #1
 80013fc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001400:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f000 fab5 	bl	8001970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001406:	201b      	movs	r0, #27
 8001408:	002a      	movs	r2, r5
 800140a:	0021      	movs	r1, r4
 800140c:	f000 fa1e 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001410:	201b      	movs	r0, #27
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001412:	f000 fa45 	bl	80018a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001416:	b00b      	add	sp, #44	; 0x2c
 8001418:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_MspInit+0xd0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d1fa      	bne.n	8001416 <HAL_UART_MspInit+0x6e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_UART_MspInit+0xcc>)
 8001424:	0292      	lsls	r2, r2, #10
 8001426:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800142a:	4311      	orrs	r1, r2
 800142c:	61d9      	str	r1, [r3, #28]
 800142e:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001432:	4011      	ands	r1, r2
 8001434:	9103      	str	r1, [sp, #12]
 8001436:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4311      	orrs	r1, r2
 800143e:	6159      	str	r1, [r3, #20]
 8001440:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	401a      	ands	r2, r3
 8001446:	9204      	str	r2, [sp, #16]
 8001448:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = RS485_TX_U2_Pin|RS485_RX_U2_Pin;
 800144a:	230c      	movs	r3, #12
 800144c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	3b0a      	subs	r3, #10
 8001450:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	3301      	adds	r3, #1
 8001454:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001456:	3b02      	subs	r3, #2
 8001458:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f000 fa88 	bl	8001970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001460:	201c      	movs	r0, #28
 8001462:	0022      	movs	r2, r4
 8001464:	0021      	movs	r1, r4
 8001466:	f000 f9f1 	bl	800184c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800146a:	201c      	movs	r0, #28
 800146c:	e7d1      	b.n	8001412 <HAL_UART_MspInit+0x6a>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40013800 	.word	0x40013800
 8001474:	40021000 	.word	0x40021000
 8001478:	40004400 	.word	0x40004400

0800147c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler>

0800147e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler>

08001480 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f8af 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bd10      	pop	{r4, pc}

0800148c <EXTI4_15_IRQHandler>:
  */
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	/*------------- Calculate triac 1 & 2 PWM parameters--------------*/
	gVar.triac_1.isZeroCrossed = 1U;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <EXTI4_15_IRQHandler+0x1c>)
	gVar.triac_2.isZeroCrossed = 1U;
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DINP_4_Pin);
 800148e:	2080      	movs	r0, #128	; 0x80
	gVar.triac_1.isZeroCrossed = 1U;
 8001490:	0019      	movs	r1, r3
 8001492:	2201      	movs	r2, #1
{
 8001494:	b510      	push	{r4, lr}
	gVar.triac_1.isZeroCrossed = 1U;
 8001496:	312f      	adds	r1, #47	; 0x2f
	gVar.triac_2.isZeroCrossed = 1U;
 8001498:	3373      	adds	r3, #115	; 0x73
  HAL_GPIO_EXTI_IRQHandler(DINP_4_Pin);
 800149a:	0200      	lsls	r0, r0, #8
	gVar.triac_1.isZeroCrossed = 1U;
 800149c:	700a      	strb	r2, [r1, #0]
	gVar.triac_2.isZeroCrossed = 1U;
 800149e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(DINP_4_Pin);
 80014a0:	f000 fb24 	bl	8001aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000080 	.word	0x20000080

080014ac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80014ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM6_IRQHandler+0xc>)
 80014b0:	f000 ffa6 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	200001d4 	.word	0x200001d4

080014bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014be:	4802      	ldr	r0, [pc, #8]	; (80014c8 <TIM7_IRQHandler+0xc>)
 80014c0:	f000 ff9e 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014c4:	bd10      	pop	{r4, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	20000328 	.word	0x20000328

080014cc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80014cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */
	OD_PWM_GenTriacPWM(&htim14, &gVar.triac_1, TRIAC_1_INDEX);
 80014ce:	4c07      	ldr	r4, [pc, #28]	; (80014ec <TIM14_IRQHandler+0x20>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	0020      	movs	r0, r4
 80014d4:	4906      	ldr	r1, [pc, #24]	; (80014f0 <TIM14_IRQHandler+0x24>)
 80014d6:	f7ff fb63 	bl	8000ba0 <OD_PWM_GenTriacPWM>
	OD_PWM_GenTriacPWM(&htim14, &gVar.triac_2, TRIAC_2_INDEX);
 80014da:	2202      	movs	r2, #2
 80014dc:	0020      	movs	r0, r4
 80014de:	4905      	ldr	r1, [pc, #20]	; (80014f4 <TIM14_IRQHandler+0x28>)
 80014e0:	f7ff fb5e 	bl	8000ba0 <OD_PWM_GenTriacPWM>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014e4:	0020      	movs	r0, r4
 80014e6:	f000 ff8b 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80014ea:	bd10      	pop	{r4, pc}
 80014ec:	200002a0 	.word	0x200002a0
 80014f0:	20000080 	.word	0x20000080
 80014f4:	200000c4 	.word	0x200000c4

080014f8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80014f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80014fa:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM15_IRQHandler+0xc>)
 80014fc:	f000 ff80 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001500:	bd10      	pop	{r4, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	20000028 	.word	0x20000028

08001508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001508:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <USART1_IRQHandler+0xc>)
 800150c:	f001 fa6a 	bl	80029e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001510:	bd10      	pop	{r4, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	20000150 	.word	0x20000150

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151a:	4802      	ldr	r0, [pc, #8]	; (8001524 <USART2_IRQHandler+0xc>)
 800151c:	f001 fa62 	bl	80029e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001520:	bd10      	pop	{r4, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	2000021c 	.word	0x2000021c

08001528 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001528:	4770      	bx	lr
	...

0800152c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopForever+0xe>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001556:	f7ff ffe7 	bl	8001528 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800155a:	f001 fd69 	bl	8003030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff fc35 	bl	8000dcc <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   r0, =_estack
 8001564:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001570:	0800317c 	.word	0x0800317c
  ldr r2, =_sbss
 8001574:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001578:	20000374 	.word	0x20000374

0800157c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_IRQHandler>
	...

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	20fa      	movs	r0, #250	; 0xfa
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_InitTick+0x3c>)
 8001588:	0080      	lsls	r0, r0, #2
 800158a:	7819      	ldrb	r1, [r3, #0]
 800158c:	f7fe fdce 	bl	800012c <__udivsi3>
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_InitTick+0x40>)
 8001592:	0001      	movs	r1, r0
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f7fe fdc9 	bl	800012c <__udivsi3>
 800159a:	f000 f98d 	bl	80018b8 <HAL_SYSTICK_Config>
 800159e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d109      	bne.n	80015ba <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	2d03      	cmp	r5, #3
 80015a8:	d807      	bhi.n	80015ba <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015aa:	3802      	subs	r0, #2
 80015ac:	0022      	movs	r2, r4
 80015ae:	0029      	movs	r1, r5
 80015b0:	f000 f94c 	bl	800184c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	0020      	movs	r0, r4
 80015b6:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_InitTick+0x44>)
 80015b8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80015ba:	bd70      	pop	{r4, r5, r6, pc}
 80015bc:	20000004 	.word	0x20000004
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	2310      	movs	r3, #16
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_Init+0x1c>)
{
 80015cc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ce:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	f7ff ffd3 	bl	8001580 <HAL_InitTick>
  HAL_MspInit();
 80015da:	f7ff fe07 	bl	80011ec <HAL_MspInit>
}
 80015de:	2000      	movs	r0, #0
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_IncTick+0x10>)
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_IncTick+0x14>)
 80015ec:	6811      	ldr	r1, [r2, #0]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	185b      	adds	r3, r3, r1
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	4770      	bx	lr
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	20000370 	.word	0x20000370
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <HAL_GetTick+0x8>)
 8001602:	6818      	ldr	r0, [r3, #0]
}
 8001604:	4770      	bx	lr
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	20000370 	.word	0x20000370

0800160c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001610:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001612:	2c00      	cmp	r4, #0
 8001614:	d100      	bne.n	8001618 <HAL_ADC_Init+0xc>
 8001616:	e080      	b.n	800171a <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_ADC_Init+0x20>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161e:	0022      	movs	r2, r4
 8001620:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001622:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001624:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001626:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001628:	f7ff fdf8 	bl	800121c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800162e:	06db      	lsls	r3, r3, #27
 8001630:	d500      	bpl.n	8001634 <HAL_ADC_Init+0x28>
 8001632:	e087      	b.n	8001744 <HAL_ADC_Init+0x138>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	2204      	movs	r2, #4
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	0008      	movs	r0, r1
 800163c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800163e:	4211      	tst	r1, r2
 8001640:	d000      	beq.n	8001644 <HAL_ADC_Init+0x38>
 8001642:	e07f      	b.n	8001744 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001646:	4942      	ldr	r1, [pc, #264]	; (8001750 <HAL_ADC_Init+0x144>)
 8001648:	4011      	ands	r1, r2
 800164a:	2202      	movs	r2, #2
 800164c:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800164e:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001650:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	400a      	ands	r2, r1
 8001656:	2a01      	cmp	r2, #1
 8001658:	d105      	bne.n	8001666 <HAL_ADC_Init+0x5a>
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	4211      	tst	r1, r2
 800165e:	d10e      	bne.n	800167e <HAL_ADC_Init+0x72>
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	d40b      	bmi.n	800167e <HAL_ADC_Init+0x72>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001666:	2118      	movs	r1, #24
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	438a      	bics	r2, r1
 800166c:	68a1      	ldr	r1, [r4, #8]
 800166e:	430a      	orrs	r2, r1
 8001670:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001672:	6919      	ldr	r1, [r3, #16]
 8001674:	6862      	ldr	r2, [r4, #4]
 8001676:	0089      	lsls	r1, r1, #2
 8001678:	0889      	lsrs	r1, r1, #2
 800167a:	4311      	orrs	r1, r2
 800167c:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4934      	ldr	r1, [pc, #208]	; (8001754 <HAL_ADC_Init+0x148>)
 8001682:	400a      	ands	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001686:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001688:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800168a:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800168c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800168e:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001690:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001692:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001694:	3a01      	subs	r2, #1
 8001696:	1e56      	subs	r6, r2, #1
 8001698:	41b2      	sbcs	r2, r6
 800169a:	0316      	lsls	r6, r2, #12
 800169c:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800169e:	034f      	lsls	r7, r1, #13
 80016a0:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016a2:	6922      	ldr	r2, [r4, #16]
 80016a4:	432f      	orrs	r7, r5
 80016a6:	2a02      	cmp	r2, #2
 80016a8:	d100      	bne.n	80016ac <HAL_ADC_Init+0xa0>
 80016aa:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80016ac:	1d62      	adds	r2, r4, #5
 80016ae:	7fd2      	ldrb	r2, [r2, #31]
 80016b0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80016b2:	433a      	orrs	r2, r7
 80016b4:	4332      	orrs	r2, r6
 80016b6:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016b8:	7ee0      	ldrb	r0, [r4, #27]
 80016ba:	2801      	cmp	r0, #1
 80016bc:	d104      	bne.n	80016c8 <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016be:	2900      	cmp	r1, #0
 80016c0:	d12c      	bne.n	800171c <HAL_ADC_Init+0x110>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0249      	lsls	r1, r1, #9
 80016c6:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c8:	20c2      	movs	r0, #194	; 0xc2
 80016ca:	69e1      	ldr	r1, [r4, #28]
 80016cc:	30ff      	adds	r0, #255	; 0xff
 80016ce:	4281      	cmp	r1, r0
 80016d0:	d002      	beq.n	80016d8 <HAL_ADC_Init+0xcc>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80016d2:	6a20      	ldr	r0, [r4, #32]
 80016d4:	4301      	orrs	r1, r0
 80016d6:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016d8:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80016da:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016dc:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80016de:	4311      	orrs	r1, r2
 80016e0:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80016e4:	4281      	cmp	r1, r0
 80016e6:	d002      	beq.n	80016ee <HAL_ADC_Init+0xe2>
 80016e8:	1e48      	subs	r0, r1, #1
 80016ea:	2806      	cmp	r0, #6
 80016ec:	d807      	bhi.n	80016fe <HAL_ADC_Init+0xf2>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016ee:	2507      	movs	r5, #7
 80016f0:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016f2:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016f4:	43a8      	bics	r0, r5
 80016f6:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016f8:	6958      	ldr	r0, [r3, #20]
 80016fa:	4301      	orrs	r1, r0
 80016fc:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4915      	ldr	r1, [pc, #84]	; (8001758 <HAL_ADC_Init+0x14c>)
 8001702:	400b      	ands	r3, r1
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_ADC_Init+0x120>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001708:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800170a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800170c:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800170e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001710:	4393      	bics	r3, r2
 8001712:	001a      	movs	r2, r3
 8001714:	2301      	movs	r3, #1
 8001716:	4313      	orrs	r3, r2
 8001718:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800171c:	2120      	movs	r1, #32
 800171e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001720:	4329      	orrs	r1, r5
 8001722:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001724:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001726:	4308      	orrs	r0, r1
 8001728:	63e0      	str	r0, [r4, #60]	; 0x3c
 800172a:	e7cd      	b.n	80016c8 <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 800172c:	2212      	movs	r2, #18
 800172e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001732:	4393      	bics	r3, r2
 8001734:	001a      	movs	r2, r3
 8001736:	2310      	movs	r3, #16
 8001738:	4313      	orrs	r3, r2
 800173a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800173e:	4303      	orrs	r3, r0
 8001740:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001742:	e7ea      	b.n	800171a <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001744:	2310      	movs	r3, #16
 8001746:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001748:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174a:	4313      	orrs	r3, r2
 800174c:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800174e:	e7e4      	b.n	800171a <HAL_ADC_Init+0x10e>
 8001750:	fffffefd 	.word	0xfffffefd
 8001754:	fffe0219 	.word	0xfffe0219
 8001758:	833fffe7 	.word	0x833fffe7

0800175c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800175e:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001760:	0004      	movs	r4, r0
{
 8001762:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8001764:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8001766:	3434      	adds	r4, #52	; 0x34
 8001768:	7823      	ldrb	r3, [r4, #0]
{
 800176a:	0002      	movs	r2, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800176c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 800176e:	2002      	movs	r0, #2
 8001770:	2b01      	cmp	r3, #1
 8001772:	d02f      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x78>
 8001774:	3801      	subs	r0, #1
 8001776:	7020      	strb	r0, [r4, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	2704      	movs	r7, #4
 800177c:	689d      	ldr	r5, [r3, #8]
 800177e:	46ac      	mov	ip, r5
 8001780:	403d      	ands	r5, r7
 8001782:	9501      	str	r5, [sp, #4]
 8001784:	4665      	mov	r5, ip
 8001786:	423d      	tst	r5, r7
 8001788:	d150      	bne.n	800182c <HAL_ADC_ConfigChannel+0xd0>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800178a:	680f      	ldr	r7, [r1, #0]
 800178c:	4d2a      	ldr	r5, [pc, #168]	; (8001838 <HAL_ADC_ConfigChannel+0xdc>)
 800178e:	003a      	movs	r2, r7
 8001790:	46ac      	mov	ip, r5
 8001792:	684d      	ldr	r5, [r1, #4]
 8001794:	40b8      	lsls	r0, r7
 8001796:	3a10      	subs	r2, #16
 8001798:	4565      	cmp	r5, ip
 800179a:	d037      	beq.n	800180c <HAL_ADC_ConfigChannel+0xb0>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800179c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800179e:	4328      	orrs	r0, r5
 80017a0:	6298      	str	r0, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80017a2:	2080      	movs	r0, #128	; 0x80
 80017a4:	0540      	lsls	r0, r0, #21
 80017a6:	4286      	cmp	r6, r0
 80017a8:	d00f      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x6e>
 80017aa:	3e01      	subs	r6, #1
 80017ac:	2e06      	cmp	r6, #6
 80017ae:	d90c      	bls.n	80017ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80017b0:	2007      	movs	r0, #7
 80017b2:	695d      	ldr	r5, [r3, #20]
 80017b4:	6889      	ldr	r1, [r1, #8]
 80017b6:	4005      	ands	r5, r0
 80017b8:	42a9      	cmp	r1, r5
 80017ba:	d006      	beq.n	80017ca <HAL_ADC_ConfigChannel+0x6e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017bc:	695d      	ldr	r5, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80017be:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017c0:	4385      	bics	r5, r0
 80017c2:	615d      	str	r5, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80017c4:	695d      	ldr	r5, [r3, #20]
 80017c6:	4329      	orrs	r1, r5
 80017c8:	6159      	str	r1, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017ca:	2a01      	cmp	r2, #1
 80017cc:	d904      	bls.n	80017d8 <HAL_ADC_ConfigChannel+0x7c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ce:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d0:	2300      	movs	r3, #0
 80017d2:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 80017d4:	b005      	add	sp, #20
 80017d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_ADC_ConfigChannel+0xe0>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2f10      	cmp	r7, #16
 80017e0:	d012      	beq.n	8001808 <HAL_ADC_ConfigChannel+0xac>
 80017e2:	03c9      	lsls	r1, r1, #15
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e8:	2f10      	cmp	r7, #16
 80017ea:	d1f0      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x72>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_ADC_ConfigChannel+0xe4>)
 80017ee:	4915      	ldr	r1, [pc, #84]	; (8001844 <HAL_ADC_ConfigChannel+0xe8>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f7fe fc9b 	bl	800012c <__udivsi3>
 80017f6:	230a      	movs	r3, #10
 80017f8:	4343      	muls	r3, r0
            wait_loop_index--;
 80017fa:	9303      	str	r3, [sp, #12]
          while(wait_loop_index != 0U)
 80017fc:	9b03      	ldr	r3, [sp, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0e5      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x72>
            wait_loop_index--;
 8001802:	9b03      	ldr	r3, [sp, #12]
 8001804:	3b01      	subs	r3, #1
 8001806:	e7f8      	b.n	80017fa <HAL_ADC_ConfigChannel+0x9e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	e7eb      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x88>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800180c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800180e:	4381      	bics	r1, r0
 8001810:	6299      	str	r1, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001812:	2a01      	cmp	r2, #1
 8001814:	d8db      	bhi.n	80017ce <HAL_ADC_ConfigChannel+0x72>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001816:	4253      	negs	r3, r2
 8001818:	415a      	adcs	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <HAL_ADC_ConfigChannel+0xe0>)
 800181c:	4253      	negs	r3, r2
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_ADC_ConfigChannel+0xec>)
 8001820:	6808      	ldr	r0, [r1, #0]
 8001822:	059b      	lsls	r3, r3, #22
 8001824:	189b      	adds	r3, r3, r2
 8001826:	4003      	ands	r3, r0
 8001828:	600b      	str	r3, [r1, #0]
 800182a:	e7d0      	b.n	80017ce <HAL_ADC_ConfigChannel+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182c:	2320      	movs	r3, #32
 800182e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001830:	430b      	orrs	r3, r1
 8001832:	6393      	str	r3, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001834:	e7cc      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x74>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	00001001 	.word	0x00001001
 800183c:	40012708 	.word	0x40012708
 8001840:	20000000 	.word	0x20000000
 8001844:	000f4240 	.word	0x000f4240
 8001848:	ffbfffff 	.word	0xffbfffff

0800184c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184c:	b530      	push	{r4, r5, lr}
 800184e:	25ff      	movs	r5, #255	; 0xff
 8001850:	2403      	movs	r4, #3
 8001852:	002a      	movs	r2, r5
 8001854:	4004      	ands	r4, r0
 8001856:	00e4      	lsls	r4, r4, #3
 8001858:	40a2      	lsls	r2, r4
 800185a:	0189      	lsls	r1, r1, #6
 800185c:	4029      	ands	r1, r5
 800185e:	43d2      	mvns	r2, r2
 8001860:	40a1      	lsls	r1, r4
 8001862:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001864:	2800      	cmp	r0, #0
 8001866:	db0a      	blt.n	800187e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	24c0      	movs	r4, #192	; 0xc0
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_NVIC_SetPriority+0x4c>)
 800186c:	0880      	lsrs	r0, r0, #2
 800186e:	0080      	lsls	r0, r0, #2
 8001870:	18c0      	adds	r0, r0, r3
 8001872:	00a4      	lsls	r4, r4, #2
 8001874:	5903      	ldr	r3, [r0, r4]
 8001876:	401a      	ands	r2, r3
 8001878:	4311      	orrs	r1, r2
 800187a:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800187c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187e:	200f      	movs	r0, #15
 8001880:	4003      	ands	r3, r0
 8001882:	3b08      	subs	r3, #8
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_NVIC_SetPriority+0x50>)
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	181b      	adds	r3, r3, r0
 800188c:	69d8      	ldr	r0, [r3, #28]
 800188e:	4002      	ands	r2, r0
 8001890:	4311      	orrs	r1, r2
 8001892:	61d9      	str	r1, [r3, #28]
 8001894:	e7f2      	b.n	800187c <HAL_NVIC_SetPriority+0x30>
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018a0:	2800      	cmp	r0, #0
 80018a2:	db05      	blt.n	80018b0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a4:	231f      	movs	r3, #31
 80018a6:	4018      	ands	r0, r3
 80018a8:	3b1e      	subs	r3, #30
 80018aa:	4083      	lsls	r3, r0
 80018ac:	4a01      	ldr	r2, [pc, #4]	; (80018b4 <HAL_NVIC_EnableIRQ+0x14>)
 80018ae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018b0:	4770      	bx	lr
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	1e43      	subs	r3, r0, #1
 80018bc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d20d      	bcs.n	80018e0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018cc:	6a03      	ldr	r3, [r0, #32]
 80018ce:	0609      	lsls	r1, r1, #24
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018e0:	4770      	bx	lr
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	e000e010 	.word	0xe000e010
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ec:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ee:	1c85      	adds	r5, r0, #2
 80018f0:	7feb      	ldrb	r3, [r5, #31]
 80018f2:	1c44      	adds	r4, r0, #1
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d005      	beq.n	8001904 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f8:	2304      	movs	r3, #4
 80018fa:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	2300      	movs	r3, #0
    
    return HAL_ERROR;
 80018fe:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001900:	77e3      	strb	r3, [r4, #31]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8001902:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001904:	210e      	movs	r1, #14
 8001906:	6803      	ldr	r3, [r0, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	438a      	bics	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190e:	2201      	movs	r2, #1
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	4391      	bics	r1, r2
 8001914:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001916:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001918:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800191a:	0010      	movs	r0, r2
 800191c:	4088      	lsls	r0, r1
 800191e:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8001920:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8001922:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8001924:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8001926:	e7ec      	b.n	8001902 <HAL_DMA_Abort+0x16>

08001928 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001928:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800192a:	1c84      	adds	r4, r0, #2
 800192c:	7fe3      	ldrb	r3, [r4, #31]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d004      	beq.n	800193c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	2304      	movs	r3, #4
 8001934:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001936:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001938:	0018      	movs	r0, r3
 800193a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800193c:	210e      	movs	r1, #14
 800193e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001940:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	438a      	bics	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001948:	2201      	movs	r2, #1
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	4391      	bics	r1, r2
 800194e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001950:	0011      	movs	r1, r2
 8001952:	40a9      	lsls	r1, r5
 8001954:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001956:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001958:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800195a:	2400      	movs	r4, #0
 800195c:	1883      	adds	r3, r0, r2
 800195e:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001960:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8001962:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001964:	42a2      	cmp	r2, r4
 8001966:	d0e7      	beq.n	8001938 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001968:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800196a:	0023      	movs	r3, r4
 800196c:	e7e4      	b.n	8001938 <HAL_DMA_Abort_IT+0x10>
	...

08001970 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001970:	2300      	movs	r3, #0
{
 8001972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001974:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	680a      	ldr	r2, [r1, #0]
 8001978:	0014      	movs	r4, r2
 800197a:	40dc      	lsrs	r4, r3
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800197e:	b007      	add	sp, #28
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001982:	2501      	movs	r5, #1
 8001984:	0014      	movs	r4, r2
 8001986:	409d      	lsls	r5, r3
 8001988:	402c      	ands	r4, r5
 800198a:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800198c:	422a      	tst	r2, r5
 800198e:	d100      	bne.n	8001992 <HAL_GPIO_Init+0x22>
 8001990:	e095      	b.n	8001abe <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001992:	684a      	ldr	r2, [r1, #4]
 8001994:	005e      	lsls	r6, r3, #1
 8001996:	4694      	mov	ip, r2
 8001998:	2203      	movs	r2, #3
 800199a:	4664      	mov	r4, ip
 800199c:	4022      	ands	r2, r4
 800199e:	2403      	movs	r4, #3
 80019a0:	40b4      	lsls	r4, r6
 80019a2:	43e4      	mvns	r4, r4
 80019a4:	9402      	str	r4, [sp, #8]
 80019a6:	1e54      	subs	r4, r2, #1
 80019a8:	2c01      	cmp	r4, #1
 80019aa:	d82a      	bhi.n	8001a02 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 80019ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ae:	9c02      	ldr	r4, [sp, #8]
 80019b0:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b2:	68cc      	ldr	r4, [r1, #12]
 80019b4:	40b4      	lsls	r4, r6
 80019b6:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80019b8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80019ba:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019bc:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019be:	43ac      	bics	r4, r5
 80019c0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c2:	4664      	mov	r4, ip
 80019c4:	0924      	lsrs	r4, r4, #4
 80019c6:	403c      	ands	r4, r7
 80019c8:	409c      	lsls	r4, r3
 80019ca:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80019cc:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80019ce:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d0:	9c02      	ldr	r4, [sp, #8]
 80019d2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d4:	688c      	ldr	r4, [r1, #8]
 80019d6:	40b4      	lsls	r4, r6
 80019d8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80019da:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	2a02      	cmp	r2, #2
 80019de:	d112      	bne.n	8001a06 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 80019e0:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e2:	2507      	movs	r5, #7
 80019e4:	00a4      	lsls	r4, r4, #2
 80019e6:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 80019e8:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ea:	9403      	str	r4, [sp, #12]
 80019ec:	240f      	movs	r4, #15
 80019ee:	401d      	ands	r5, r3
 80019f0:	00ad      	lsls	r5, r5, #2
 80019f2:	40ac      	lsls	r4, r5
 80019f4:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f6:	690c      	ldr	r4, [r1, #16]
 80019f8:	40ac      	lsls	r4, r5
 80019fa:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 80019fc:	9c03      	ldr	r4, [sp, #12]
 80019fe:	6227      	str	r7, [r4, #32]
 8001a00:	e001      	b.n	8001a06 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a02:	2a03      	cmp	r2, #3
 8001a04:	d1e3      	bne.n	80019ce <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001a06:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a08:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a0a:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a0c:	4025      	ands	r5, r4
 8001a0e:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a10:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001a12:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a14:	24c0      	movs	r4, #192	; 0xc0
 8001a16:	4662      	mov	r2, ip
 8001a18:	02a4      	lsls	r4, r4, #10
 8001a1a:	4222      	tst	r2, r4
 8001a1c:	d04f      	beq.n	8001abe <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2501      	movs	r5, #1
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a22:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a26:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	432c      	orrs	r4, r5
 8001a2a:	6194      	str	r4, [r2, #24]
 8001a2c:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2e:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	402a      	ands	r2, r5
 8001a32:	9205      	str	r2, [sp, #20]
 8001a34:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a36:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_GPIO_Init+0x158>)
 8001a38:	00a4      	lsls	r4, r4, #2
 8001a3a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	3502      	adds	r5, #2
 8001a40:	401d      	ands	r5, r3
 8001a42:	00ad      	lsls	r5, r5, #2
 8001a44:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a46:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a48:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	42b8      	cmp	r0, r7
 8001a4e:	d00c      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 8001a50:	4f1e      	ldr	r7, [pc, #120]	; (8001acc <HAL_GPIO_Init+0x15c>)
 8001a52:	3201      	adds	r2, #1
 8001a54:	42b8      	cmp	r0, r7
 8001a56:	d008      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 8001a58:	4f1d      	ldr	r7, [pc, #116]	; (8001ad0 <HAL_GPIO_Init+0x160>)
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	42b8      	cmp	r0, r7
 8001a5e:	d004      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 8001a60:	4f1c      	ldr	r7, [pc, #112]	; (8001ad4 <HAL_GPIO_Init+0x164>)
 8001a62:	3201      	adds	r2, #1
 8001a64:	42b8      	cmp	r0, r7
 8001a66:	d000      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 8001a68:	3202      	adds	r2, #2
 8001a6a:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a6c:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a6e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a70:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 8001a74:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001a76:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001a78:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001a7a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001a7c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a7e:	03ff      	lsls	r7, r7, #15
 8001a80:	d401      	bmi.n	8001a86 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8001a82:	0035      	movs	r5, r6
 8001a84:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a86:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8001a88:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001a8a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001a8c:	9d01      	ldr	r5, [sp, #4]
 8001a8e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a90:	03bf      	lsls	r7, r7, #14
 8001a92:	d401      	bmi.n	8001a98 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8001a94:	0035      	movs	r5, r6
 8001a96:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a98:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001a9a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001a9c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001a9e:	9d01      	ldr	r5, [sp, #4]
 8001aa0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa2:	02ff      	lsls	r7, r7, #11
 8001aa4:	d401      	bmi.n	8001aaa <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 8001aa6:	0035      	movs	r5, r6
 8001aa8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aaa:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001aac:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001aae:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001ab0:	9e01      	ldr	r6, [sp, #4]
 8001ab2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ab4:	02bf      	lsls	r7, r7, #10
 8001ab6:	d401      	bmi.n	8001abc <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8001ab8:	4025      	ands	r5, r4
 8001aba:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001abc:	60d6      	str	r6, [r2, #12]
    position++;
 8001abe:	3301      	adds	r3, #1
 8001ac0:	e759      	b.n	8001976 <HAL_GPIO_Init+0x6>
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	48000c00 	.word	0x48000c00
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ae4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ae6:	e7fc      	b.n	8001ae2 <HAL_GPIO_WritePin+0x6>

08001ae8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001aee:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	4210      	tst	r0, r2
 8001af4:	d002      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001af6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af8:	f7ff fff6 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
}
 8001afc:	bd10      	pop	{r4, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2501      	movs	r5, #1
 8001b08:	4906      	ldr	r1, [pc, #24]	; (8001b24 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8001b0a:	698c      	ldr	r4, [r1, #24]
 8001b0c:	432c      	orrs	r4, r5
 8001b0e:	618c      	str	r4, [r1, #24]
 8001b10:	698a      	ldr	r2, [r1, #24]
 8001b12:	402a      	ands	r2, r5
 8001b14:	9201      	str	r2, [sp, #4]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_I2CEx_EnableFastModePlus+0x24>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b18:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	4303      	orrs	r3, r0
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000

08001b2c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
  {
    return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
  if (hiwdg == NULL)
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	d017      	beq.n	8001b66 <HAL_IWDG_Init+0x3a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_IWDG_Init+0x58>)

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001b3a:	2507      	movs	r5, #7
  __HAL_IWDG_START(hiwdg);
 8001b3c:	601a      	str	r2, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_IWDG_Init+0x5c>)
 8001b40:	601a      	str	r2, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001b42:	6862      	ldr	r2, [r4, #4]
 8001b44:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001b46:	68a2      	ldr	r2, [r4, #8]
 8001b48:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8001b4a:	f7ff fd59 	bl	8001600 <HAL_GetTick>
 8001b4e:	0006      	movs	r6, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	0010      	movs	r0, r2
 8001b56:	4028      	ands	r0, r5
 8001b58:	422a      	tst	r2, r5
 8001b5a:	d105      	bne.n	8001b68 <HAL_IWDG_Init+0x3c>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001b5c:	6919      	ldr	r1, [r3, #16]
 8001b5e:	68e2      	ldr	r2, [r4, #12]
 8001b60:	4291      	cmp	r1, r2
 8001b62:	d00c      	beq.n	8001b7e <HAL_IWDG_Init+0x52>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001b64:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001b68:	f7ff fd4a 	bl	8001600 <HAL_GetTick>
 8001b6c:	1b80      	subs	r0, r0, r6
 8001b6e:	2827      	cmp	r0, #39	; 0x27
 8001b70:	d9ee      	bls.n	8001b50 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	422b      	tst	r3, r5
 8001b78:	d0ea      	beq.n	8001b50 <HAL_IWDG_Init+0x24>
        return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e7f3      	b.n	8001b66 <HAL_IWDG_Init+0x3a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_IWDG_Init+0x60>)
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e7f0      	b.n	8001b66 <HAL_IWDG_Init+0x3a>
 8001b84:	0000cccc 	.word	0x0000cccc
 8001b88:	00005555 	.word	0x00005555
 8001b8c:	0000aaaa 	.word	0x0000aaaa

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	0004      	movs	r4, r0
 8001b94:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d046      	beq.n	8001c28 <HAL_RCC_OscConfig+0x98>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	6803      	ldr	r3, [r0, #0]
 8001b9c:	07db      	lsls	r3, r3, #31
 8001b9e:	d430      	bmi.n	8001c02 <HAL_RCC_OscConfig+0x72>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	4213      	tst	r3, r2
 8001ba6:	d000      	beq.n	8001baa <HAL_RCC_OscConfig+0x1a>
 8001ba8:	e081      	b.n	8001cae <HAL_RCC_OscConfig+0x11e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	071b      	lsls	r3, r3, #28
 8001bae:	d500      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x22>
 8001bb0:	e0ba      	b.n	8001d28 <HAL_RCC_OscConfig+0x198>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	075b      	lsls	r3, r3, #29
 8001bb6:	d500      	bpl.n	8001bba <HAL_RCC_OscConfig+0x2a>
 8001bb8:	e0dd      	b.n	8001d76 <HAL_RCC_OscConfig+0x1e6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	06db      	lsls	r3, r3, #27
 8001bbe:	d51a      	bpl.n	8001bf6 <HAL_RCC_OscConfig+0x66>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bc0:	6962      	ldr	r2, [r4, #20]
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	4db3      	ldr	r5, [pc, #716]	; (8001e94 <HAL_RCC_OscConfig+0x304>)
 8001bc6:	2a01      	cmp	r2, #1
 8001bc8:	d000      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3c>
 8001bca:	e148      	b.n	8001e5e <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bcc:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bce:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001bd4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001bda:	f7ff fd11 	bl	8001600 <HAL_GetTick>
 8001bde:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001be0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001be2:	423b      	tst	r3, r7
 8001be4:	d100      	bne.n	8001be8 <HAL_RCC_OscConfig+0x58>
 8001be6:	e133      	b.n	8001e50 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001be8:	21f8      	movs	r1, #248	; 0xf8
 8001bea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001bec:	69a3      	ldr	r3, [r4, #24]
 8001bee:	438a      	bics	r2, r1
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf6:	6a23      	ldr	r3, [r4, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d000      	beq.n	8001bfe <HAL_RCC_OscConfig+0x6e>
 8001bfc:	e156      	b.n	8001eac <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2000      	movs	r0, #0
 8001c00:	e02a      	b.n	8001c58 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c02:	210c      	movs	r1, #12
 8001c04:	4da3      	ldr	r5, [pc, #652]	; (8001e94 <HAL_RCC_OscConfig+0x304>)
 8001c06:	686a      	ldr	r2, [r5, #4]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	2a04      	cmp	r2, #4
 8001c0c:	d006      	beq.n	8001c1c <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c0e:	686b      	ldr	r3, [r5, #4]
 8001c10:	400b      	ands	r3, r1
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d10a      	bne.n	8001c2c <HAL_RCC_OscConfig+0x9c>
 8001c16:	686b      	ldr	r3, [r5, #4]
 8001c18:	03db      	lsls	r3, r3, #15
 8001c1a:	d507      	bpl.n	8001c2c <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	039b      	lsls	r3, r3, #14
 8001c20:	d5be      	bpl.n	8001ba0 <HAL_RCC_OscConfig+0x10>
 8001c22:	6863      	ldr	r3, [r4, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1bb      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
 8001c2a:	e015      	b.n	8001c58 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d114      	bne.n	8001c5c <HAL_RCC_OscConfig+0xcc>
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	682a      	ldr	r2, [r5, #0]
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fce0 	bl	8001600 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001c42:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c44:	02bf      	lsls	r7, r7, #10
 8001c46:	682b      	ldr	r3, [r5, #0]
 8001c48:	423b      	tst	r3, r7
 8001c4a:	d1a9      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fcd8 	bl	8001600 <HAL_GetTick>
 8001c50:	1b80      	subs	r0, r0, r6
 8001c52:	2864      	cmp	r0, #100	; 0x64
 8001c54:	d9f7      	bls.n	8001c46 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8001c56:	2003      	movs	r0, #3
}
 8001c58:	b005      	add	sp, #20
 8001c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d116      	bne.n	8001c8e <HAL_RCC_OscConfig+0xfe>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	4a8d      	ldr	r2, [pc, #564]	; (8001e98 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c64:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	4013      	ands	r3, r2
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	4a8b      	ldr	r2, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c70:	4013      	ands	r3, r2
 8001c72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c74:	f7ff fcc4 	bl	8001600 <HAL_GetTick>
 8001c78:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	682b      	ldr	r3, [r5, #0]
 8001c7c:	423b      	tst	r3, r7
 8001c7e:	d100      	bne.n	8001c82 <HAL_RCC_OscConfig+0xf2>
 8001c80:	e78e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c82:	f7ff fcbd 	bl	8001600 <HAL_GetTick>
 8001c86:	1b80      	subs	r0, r0, r6
 8001c88:	2864      	cmp	r0, #100	; 0x64
 8001c8a:	d9f6      	bls.n	8001c7a <HAL_RCC_OscConfig+0xea>
 8001c8c:	e7e3      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d105      	bne.n	8001c9e <HAL_RCC_OscConfig+0x10e>
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	682a      	ldr	r2, [r5, #0]
 8001c96:	02db      	lsls	r3, r3, #11
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	e7c9      	b.n	8001c32 <HAL_RCC_OscConfig+0xa2>
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	4a7d      	ldr	r2, [pc, #500]	; (8001e98 <HAL_RCC_OscConfig+0x308>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	682b      	ldr	r3, [r5, #0]
 8001ca8:	4a7c      	ldr	r2, [pc, #496]	; (8001e9c <HAL_RCC_OscConfig+0x30c>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	e7c5      	b.n	8001c3a <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cae:	210c      	movs	r1, #12
 8001cb0:	4d78      	ldr	r5, [pc, #480]	; (8001e94 <HAL_RCC_OscConfig+0x304>)
 8001cb2:	686b      	ldr	r3, [r5, #4]
 8001cb4:	420b      	tst	r3, r1
 8001cb6:	d018      	beq.n	8001cea <HAL_RCC_OscConfig+0x15a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cb8:	686b      	ldr	r3, [r5, #4]
 8001cba:	400b      	ands	r3, r1
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x132>
 8001cc0:	686b      	ldr	r3, [r5, #4]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	68e2      	ldr	r2, [r4, #12]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d01d      	beq.n	8001d06 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_ENABLE();
 8001cca:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fc95 	bl	8001600 <HAL_GetTick>
 8001cd6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	423b      	tst	r3, r7
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fc8f 	bl	8001600 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f7      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x148>
 8001ce8:	e7b5      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	4213      	tst	r3, r2
 8001cee:	d002      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x166>
 8001cf0:	68e3      	ldr	r3, [r4, #12]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d198      	bne.n	8001c28 <HAL_RCC_OscConfig+0x98>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	21f8      	movs	r1, #248	; 0xf8
 8001cf8:	682a      	ldr	r2, [r5, #0]
 8001cfa:	6923      	ldr	r3, [r4, #16]
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4313      	orrs	r3, r2
 8001d02:	602b      	str	r3, [r5, #0]
 8001d04:	e751      	b.n	8001baa <HAL_RCC_OscConfig+0x1a>
        __HAL_RCC_HSI_DISABLE();
 8001d06:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d08:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	439a      	bics	r2, r3
 8001d0c:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fc77 	bl	8001600 <HAL_GetTick>
 8001d12:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	423b      	tst	r3, r7
 8001d18:	d100      	bne.n	8001d1c <HAL_RCC_OscConfig+0x18c>
 8001d1a:	e746      	b.n	8001baa <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc70 	bl	8001600 <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	2802      	cmp	r0, #2
 8001d24:	d9f6      	bls.n	8001d14 <HAL_RCC_OscConfig+0x184>
 8001d26:	e796      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d28:	69e2      	ldr	r2, [r4, #28]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	4d59      	ldr	r5, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x304>)
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	d010      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_LSI_ENABLE();
 8001d32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d34:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4313      	orrs	r3, r2
 8001d38:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fc61 	bl	8001600 <HAL_GetTick>
 8001d3e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d42:	423b      	tst	r3, r7
 8001d44:	d000      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1b8>
 8001d46:	e734      	b.n	8001bb2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fc5a 	bl	8001600 <HAL_GetTick>
 8001d4c:	1b80      	subs	r0, r0, r6
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d9f6      	bls.n	8001d40 <HAL_RCC_OscConfig+0x1b0>
 8001d52:	e780      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8001d54:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001d58:	439a      	bics	r2, r3
 8001d5a:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fc50 	bl	8001600 <HAL_GetTick>
 8001d60:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001d64:	423b      	tst	r3, r7
 8001d66:	d100      	bne.n	8001d6a <HAL_RCC_OscConfig+0x1da>
 8001d68:	e723      	b.n	8001bb2 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fc49 	bl	8001600 <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	2802      	cmp	r0, #2
 8001d72:	d9f6      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1d2>
 8001d74:	e76f      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d78:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4d46      	ldr	r5, [pc, #280]	; (8001e94 <HAL_RCC_OscConfig+0x304>)
 8001d7c:	0552      	lsls	r2, r2, #21
 8001d7e:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d80:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4213      	tst	r3, r2
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	69eb      	ldr	r3, [r5, #28]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61eb      	str	r3, [r5, #28]
 8001d8c:	69eb      	ldr	r3, [r5, #28]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001d94:	2301      	movs	r3, #1
 8001d96:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	2780      	movs	r7, #128	; 0x80
 8001d9a:	4e41      	ldr	r6, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x310>)
 8001d9c:	007f      	lsls	r7, r7, #1
 8001d9e:	6833      	ldr	r3, [r6, #0]
 8001da0:	423b      	tst	r3, r7
 8001da2:	d006      	beq.n	8001db2 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da4:	68a3      	ldr	r3, [r4, #8]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d113      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x242>
 8001daa:	6a2a      	ldr	r2, [r5, #32]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	622b      	str	r3, [r5, #32]
 8001db0:	e030      	b.n	8001e14 <HAL_RCC_OscConfig+0x284>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	6833      	ldr	r3, [r6, #0]
 8001db4:	433b      	orrs	r3, r7
 8001db6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001db8:	f7ff fc22 	bl	8001600 <HAL_GetTick>
 8001dbc:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	6833      	ldr	r3, [r6, #0]
 8001dc0:	423b      	tst	r3, r7
 8001dc2:	d1ef      	bne.n	8001da4 <HAL_RCC_OscConfig+0x214>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc4:	f7ff fc1c 	bl	8001600 <HAL_GetTick>
 8001dc8:	9b01      	ldr	r3, [sp, #4]
 8001dca:	1ac0      	subs	r0, r0, r3
 8001dcc:	2864      	cmp	r0, #100	; 0x64
 8001dce:	d9f6      	bls.n	8001dbe <HAL_RCC_OscConfig+0x22e>
 8001dd0:	e741      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d114      	bne.n	8001e02 <HAL_RCC_OscConfig+0x272>
 8001dd8:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dda:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	4393      	bics	r3, r2
 8001dde:	622b      	str	r3, [r5, #32]
 8001de0:	6a2b      	ldr	r3, [r5, #32]
 8001de2:	3203      	adds	r2, #3
 8001de4:	4393      	bics	r3, r2
 8001de6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001de8:	f7ff fc0a 	bl	8001600 <HAL_GetTick>
 8001dec:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	6a2b      	ldr	r3, [r5, #32]
 8001df0:	423b      	tst	r3, r7
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_OscConfig+0x292>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff fc04 	bl	8001600 <HAL_GetTick>
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_RCC_OscConfig+0x314>)
 8001dfa:	1b80      	subs	r0, r0, r6
 8001dfc:	4298      	cmp	r0, r3
 8001dfe:	d9f6      	bls.n	8001dee <HAL_RCC_OscConfig+0x25e>
 8001e00:	e729      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2a4>
 8001e06:	6a29      	ldr	r1, [r5, #32]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	622b      	str	r3, [r5, #32]
 8001e0e:	6a2b      	ldr	r3, [r5, #32]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001e14:	f7ff fbf4 	bl	8001600 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001e1a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	6a2b      	ldr	r3, [r5, #32]
 8001e1e:	423b      	tst	r3, r7
 8001e20:	d00f      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2b2>
    if(pwrclkchanged == SET)
 8001e22:	9b00      	ldr	r3, [sp, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d000      	beq.n	8001e2a <HAL_RCC_OscConfig+0x29a>
 8001e28:	e6c7      	b.n	8001bba <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	69eb      	ldr	r3, [r5, #28]
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_RCC_OscConfig+0x318>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61eb      	str	r3, [r5, #28]
 8001e32:	e6c2      	b.n	8001bba <HAL_RCC_OscConfig+0x2a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	6a2b      	ldr	r3, [r5, #32]
 8001e36:	4393      	bics	r3, r2
 8001e38:	2204      	movs	r2, #4
 8001e3a:	622b      	str	r3, [r5, #32]
 8001e3c:	6a2b      	ldr	r3, [r5, #32]
 8001e3e:	4393      	bics	r3, r2
 8001e40:	e7b5      	b.n	8001dae <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fbdd 	bl	8001600 <HAL_GetTick>
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCC_OscConfig+0x314>)
 8001e48:	1b80      	subs	r0, r0, r6
 8001e4a:	4298      	cmp	r0, r3
 8001e4c:	d9e6      	bls.n	8001e1c <HAL_RCC_OscConfig+0x28c>
 8001e4e:	e702      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e50:	f7ff fbd6 	bl	8001600 <HAL_GetTick>
 8001e54:	1b80      	subs	r0, r0, r6
 8001e56:	2802      	cmp	r0, #2
 8001e58:	d800      	bhi.n	8001e5c <HAL_RCC_OscConfig+0x2cc>
 8001e5a:	e6c1      	b.n	8001be0 <HAL_RCC_OscConfig+0x50>
 8001e5c:	e6fb      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e5e:	3205      	adds	r2, #5
 8001e60:	d103      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e62:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e64:	439a      	bics	r2, r3
 8001e66:	636a      	str	r2, [r5, #52]	; 0x34
 8001e68:	e6be      	b.n	8001be8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e6a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e6c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e6e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001e70:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e72:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001e74:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e76:	4393      	bics	r3, r2
 8001e78:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fbc1 	bl	8001600 <HAL_GetTick>
 8001e7e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e80:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e82:	423b      	tst	r3, r7
 8001e84:	d100      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2f8>
 8001e86:	e6b6      	b.n	8001bf6 <HAL_RCC_OscConfig+0x66>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e88:	f7ff fbba 	bl	8001600 <HAL_GetTick>
 8001e8c:	1b80      	subs	r0, r0, r6
 8001e8e:	2802      	cmp	r0, #2
 8001e90:	d9f6      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2f0>
 8001e92:	e6e0      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	fffeffff 	.word	0xfffeffff
 8001e9c:	fffbffff 	.word	0xfffbffff
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	00001388 	.word	0x00001388
 8001ea8:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eac:	200c      	movs	r0, #12
 8001eae:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x3f0>)
 8001eb0:	6851      	ldr	r1, [r2, #4]
 8001eb2:	0015      	movs	r5, r2
 8001eb4:	4001      	ands	r1, r0
 8001eb6:	2908      	cmp	r1, #8
 8001eb8:	d047      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3ba>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eba:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <HAL_RCC_OscConfig+0x3f4>)
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d132      	bne.n	8001f26 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fb9a 	bl	8001600 <HAL_GetTick>
 8001ecc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ece:	04bf      	lsls	r7, r7, #18
 8001ed0:	682b      	ldr	r3, [r5, #0]
 8001ed2:	423b      	tst	r3, r7
 8001ed4:	d121      	bne.n	8001f1a <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eda:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4393      	bics	r3, r2
 8001ede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001ee6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eea:	686a      	ldr	r2, [r5, #4]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	4926      	ldr	r1, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x3f8>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	682a      	ldr	r2, [r5, #0]
 8001efa:	045b      	lsls	r3, r3, #17
 8001efc:	4313      	orrs	r3, r2
 8001efe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb7e 	bl	8001600 <HAL_GetTick>
 8001f04:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f06:	682b      	ldr	r3, [r5, #0]
 8001f08:	4233      	tst	r3, r6
 8001f0a:	d000      	beq.n	8001f0e <HAL_RCC_OscConfig+0x37e>
 8001f0c:	e677      	b.n	8001bfe <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb77 	bl	8001600 <HAL_GetTick>
 8001f12:	1b00      	subs	r0, r0, r4
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d9f6      	bls.n	8001f06 <HAL_RCC_OscConfig+0x376>
 8001f18:	e69d      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fb71 	bl	8001600 <HAL_GetTick>
 8001f1e:	1b80      	subs	r0, r0, r6
 8001f20:	2802      	cmp	r0, #2
 8001f22:	d9d5      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x340>
 8001f24:	e697      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8001f26:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb67 	bl	8001600 <HAL_GetTick>
 8001f32:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	04b6      	lsls	r6, r6, #18
 8001f36:	682b      	ldr	r3, [r5, #0]
 8001f38:	4233      	tst	r3, r6
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3ae>
 8001f3c:	e65f      	b.n	8001bfe <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fb5f 	bl	8001600 <HAL_GetTick>
 8001f42:	1b00      	subs	r0, r0, r4
 8001f44:	2802      	cmp	r0, #2
 8001f46:	d9f6      	bls.n	8001f36 <HAL_RCC_OscConfig+0x3a6>
 8001f48:	e685      	b.n	8001c56 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8001f4a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3c2>
 8001f50:	e682      	b.n	8001c58 <HAL_RCC_OscConfig+0xc8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001f54:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f58:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001f5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	4281      	cmp	r1, r0
 8001f60:	d000      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3d4>
 8001f62:	e661      	b.n	8001c28 <HAL_RCC_OscConfig+0x98>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f64:	210f      	movs	r1, #15
 8001f66:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f6a:	428a      	cmp	r2, r1
 8001f6c:	d000      	beq.n	8001f70 <HAL_RCC_OscConfig+0x3e0>
 8001f6e:	e65b      	b.n	8001c28 <HAL_RCC_OscConfig+0x98>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f70:	22f0      	movs	r2, #240	; 0xf0
 8001f72:	0392      	lsls	r2, r2, #14
 8001f74:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3ee>
 8001f7c:	e63f      	b.n	8001bfe <HAL_RCC_OscConfig+0x6e>
 8001f7e:	e653      	b.n	8001c28 <HAL_RCC_OscConfig+0x98>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	feffffff 	.word	0xfeffffff
 8001f88:	ffc2ffff 	.word	0xffc2ffff

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b530      	push	{r4, r5, lr}
 8001f8e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f90:	2210      	movs	r2, #16
 8001f92:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x48>)
 8001f94:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f96:	ac04      	add	r4, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f98:	f001 f86e 	bl	8003078 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001fa0:	0020      	movs	r0, r4
 8001fa2:	f001 f869 	bl	8003078 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x50>)
 8001faa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	401a      	ands	r2, r3
 8001fae:	2a08      	cmp	r2, #8
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x42>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fb2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	4668      	mov	r0, sp
 8001fb8:	0c9b      	lsrs	r3, r3, #18
 8001fba:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fbc:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fbe:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001fc0:	5ca1      	ldrb	r1, [r4, r2]
 8001fc2:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001fc4:	f7fe f8b2 	bl	800012c <__udivsi3>
 8001fc8:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001fca:	b009      	add	sp, #36	; 0x24
 8001fcc:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001fce:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8001fd0:	e7fb      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x3e>
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	0800314c 	.word	0x0800314c
 8001fd8:	0800315d 	.word	0x0800315d
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <HAL_RCC_ClockConfig>:
{
 8001fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
}
 8001ff0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4c37      	ldr	r4, [pc, #220]	; (80020d4 <HAL_RCC_ClockConfig+0xf0>)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	428b      	cmp	r3, r1
 8001ffc:	d31c      	bcc.n	8002038 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffe:	6829      	ldr	r1, [r5, #0]
 8002000:	078b      	lsls	r3, r1, #30
 8002002:	d422      	bmi.n	800204a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002004:	07cb      	lsls	r3, r1, #31
 8002006:	d42f      	bmi.n	8002068 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	2301      	movs	r3, #1
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	401a      	ands	r2, r3
 800200e:	42b2      	cmp	r2, r6
 8002010:	d851      	bhi.n	80020b6 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	4c30      	ldr	r4, [pc, #192]	; (80020d8 <HAL_RCC_ClockConfig+0xf4>)
 8002016:	075b      	lsls	r3, r3, #29
 8002018:	d454      	bmi.n	80020c4 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201a:	f7ff ffb7 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 800201e:	6863      	ldr	r3, [r4, #4]
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_RCC_ClockConfig+0xf8>)
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	0f1b      	lsrs	r3, r3, #28
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	40d8      	lsrs	r0, r3
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_ClockConfig+0xfc>)
 800202c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800202e:	2003      	movs	r0, #3
 8002030:	f7ff faa6 	bl	8001580 <HAL_InitTick>
  return HAL_OK;
 8002034:	2000      	movs	r0, #0
 8002036:	e7db      	b.n	8001ff0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	4393      	bics	r3, r2
 800203c:	430b      	orrs	r3, r1
 800203e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	4013      	ands	r3, r2
 8002044:	428b      	cmp	r3, r1
 8002046:	d1d2      	bne.n	8001fee <HAL_RCC_ClockConfig+0xa>
 8002048:	e7d9      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_RCC_ClockConfig+0xf4>)
 800204c:	074b      	lsls	r3, r1, #29
 800204e:	d504      	bpl.n	800205a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002050:	23e0      	movs	r3, #224	; 0xe0
 8002052:	6850      	ldr	r0, [r2, #4]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4303      	orrs	r3, r0
 8002058:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205a:	20f0      	movs	r0, #240	; 0xf0
 800205c:	6853      	ldr	r3, [r2, #4]
 800205e:	4383      	bics	r3, r0
 8002060:	68a8      	ldr	r0, [r5, #8]
 8002062:	4303      	orrs	r3, r0
 8002064:	6053      	str	r3, [r2, #4]
 8002066:	e7cd      	b.n	8002004 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002068:	4f1b      	ldr	r7, [pc, #108]	; (80020d8 <HAL_RCC_ClockConfig+0xf4>)
 800206a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	2a01      	cmp	r2, #1
 8002070:	d119      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	039b      	lsls	r3, r3, #14
 8002074:	d5bb      	bpl.n	8001fee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	2103      	movs	r1, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	438b      	bics	r3, r1
 800207c:	4313      	orrs	r3, r2
 800207e:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002080:	f7ff fabe 	bl	8001600 <HAL_GetTick>
 8002084:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	230c      	movs	r3, #12
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	401a      	ands	r2, r3
 800208c:	686b      	ldr	r3, [r5, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d0b9      	beq.n	8002008 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff fab4 	bl	8001600 <HAL_GetTick>
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	1ac0      	subs	r0, r0, r3
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_RCC_ClockConfig+0x100>)
 800209e:	4298      	cmp	r0, r3
 80020a0:	d9f1      	bls.n	8002086 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80020a2:	2003      	movs	r0, #3
 80020a4:	e7a4      	b.n	8001ff0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a6:	2a02      	cmp	r2, #2
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	019b      	lsls	r3, r3, #6
 80020ac:	d4e3      	bmi.n	8002076 <HAL_RCC_ClockConfig+0x92>
 80020ae:	e79e      	b.n	8001fee <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b0:	079b      	lsls	r3, r3, #30
 80020b2:	d4e0      	bmi.n	8002076 <HAL_RCC_ClockConfig+0x92>
 80020b4:	e79b      	b.n	8001fee <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	439a      	bics	r2, r3
 80020ba:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	421a      	tst	r2, r3
 80020c0:	d0a7      	beq.n	8002012 <HAL_RCC_ClockConfig+0x2e>
 80020c2:	e794      	b.n	8001fee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	6863      	ldr	r3, [r4, #4]
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_RCC_ClockConfig+0x104>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	68ea      	ldr	r2, [r5, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	6063      	str	r3, [r4, #4]
 80020d0:	e7a3      	b.n	800201a <HAL_RCC_ClockConfig+0x36>
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08003134 	.word	0x08003134
 80020e0:	20000000 	.word	0x20000000
 80020e4:	00001388 	.word	0x00001388
 80020e8:	fffff8ff 	.word	0xfffff8ff

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	055b      	lsls	r3, r3, #21
 80020f4:	0f5b      	lsrs	r3, r3, #29
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020fa:	6810      	ldr	r0, [r2, #0]
 80020fc:	40d8      	lsrs	r0, r3
}    
 80020fe:	4770      	bx	lr
 8002100:	40021000 	.word	0x40021000
 8002104:	08003144 	.word	0x08003144
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800210c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800210e:	6803      	ldr	r3, [r0, #0]
{
 8002110:	0005      	movs	r5, r0
 8002112:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002114:	03db      	lsls	r3, r3, #15
 8002116:	d52a      	bpl.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002118:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211c:	4c38      	ldr	r4, [pc, #224]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800211e:	0552      	lsls	r2, r2, #21
 8002120:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002122:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002124:	4213      	tst	r3, r2
 8002126:	d108      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	69e3      	ldr	r3, [r4, #28]
 800212a:	4313      	orrs	r3, r2
 800212c:	61e3      	str	r3, [r4, #28]
 800212e:	69e3      	ldr	r3, [r4, #28]
 8002130:	4013      	ands	r3, r2
 8002132:	9303      	str	r3, [sp, #12]
 8002134:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	2780      	movs	r7, #128	; 0x80
 800213c:	4e31      	ldr	r6, [pc, #196]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800213e:	007f      	lsls	r7, r7, #1
 8002140:	6833      	ldr	r3, [r6, #0]
 8002142:	423b      	tst	r3, r7
 8002144:	d028      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002146:	6a22      	ldr	r2, [r4, #32]
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	0011      	movs	r1, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4e2e      	ldr	r6, [pc, #184]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002150:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002152:	421a      	tst	r2, r3
 8002154:	d132      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002156:	6a23      	ldr	r3, [r4, #32]
 8002158:	401e      	ands	r6, r3
 800215a:	686b      	ldr	r3, [r5, #4]
 800215c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002160:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002162:	2b01      	cmp	r3, #1
 8002164:	d103      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002166:	69e3      	ldr	r3, [r4, #28]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800216a:	4013      	ands	r3, r2
 800216c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216e:	682a      	ldr	r2, [r5, #0]
 8002170:	07d3      	lsls	r3, r2, #31
 8002172:	d506      	bpl.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002174:	2003      	movs	r0, #3
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002178:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800217a:	4383      	bics	r3, r0
 800217c:	68a8      	ldr	r0, [r5, #8]
 800217e:	4303      	orrs	r3, r0
 8002180:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002182:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002184:	0693      	lsls	r3, r2, #26
 8002186:	d517      	bpl.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002188:	2110      	movs	r1, #16
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800218c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800218e:	438b      	bics	r3, r1
 8002190:	68e9      	ldr	r1, [r5, #12]
 8002192:	430b      	orrs	r3, r1
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	e00f      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002198:	6833      	ldr	r3, [r6, #0]
 800219a:	433b      	orrs	r3, r7
 800219c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800219e:	f7ff fa2f 	bl	8001600 <HAL_GetTick>
 80021a2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	6833      	ldr	r3, [r6, #0]
 80021a6:	423b      	tst	r3, r7
 80021a8:	d1cd      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7ff fa29 	bl	8001600 <HAL_GetTick>
 80021ae:	9b01      	ldr	r3, [sp, #4]
 80021b0:	1ac0      	subs	r0, r0, r3
 80021b2:	2864      	cmp	r0, #100	; 0x64
 80021b4:	d9f6      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
}
 80021b8:	b005      	add	sp, #20
 80021ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021bc:	686a      	ldr	r2, [r5, #4]
 80021be:	4013      	ands	r3, r2
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d0c8      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c4:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c6:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c8:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ca:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	4303      	orrs	r3, r0
 80021d0:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d2:	6a23      	ldr	r3, [r4, #32]
 80021d4:	480e      	ldr	r0, [pc, #56]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d6:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d8:	4003      	ands	r3, r0
 80021da:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80021dc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021de:	07d3      	lsls	r3, r2, #31
 80021e0:	d5b9      	bpl.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80021e2:	f7ff fa0d 	bl	8001600 <HAL_GetTick>
 80021e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	2202      	movs	r2, #2
 80021ea:	6a23      	ldr	r3, [r4, #32]
 80021ec:	4213      	tst	r3, r2
 80021ee:	d1b2      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7ff fa06 	bl	8001600 <HAL_GetTick>
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80021f6:	1bc0      	subs	r0, r0, r7
 80021f8:	4298      	cmp	r0, r3
 80021fa:	d9f5      	bls.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80021fc:	e7db      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40021000 	.word	0x40021000
 8002204:	40007000 	.word	0x40007000
 8002208:	fffffcff 	.word	0xfffffcff
 800220c:	efffffff 	.word	0xefffffff
 8002210:	fffeffff 	.word	0xfffeffff
 8002214:	00001388 	.word	0x00001388

08002218 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002218:	2201      	movs	r2, #1
 800221a:	6a03      	ldr	r3, [r0, #32]
{
 800221c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800221e:	4393      	bics	r3, r2
 8002220:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002222:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002224:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002226:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002228:	3272      	adds	r2, #114	; 0x72
 800222a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800222c:	680a      	ldr	r2, [r1, #0]
 800222e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002230:	2202      	movs	r2, #2
 8002232:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002234:	688a      	ldr	r2, [r1, #8]
 8002236:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <TIM_OC1_SetConfig+0x74>)
 800223a:	4290      	cmp	r0, r2
 800223c:	d008      	beq.n	8002250 <TIM_OC1_SetConfig+0x38>
 800223e:	4e14      	ldr	r6, [pc, #80]	; (8002290 <TIM_OC1_SetConfig+0x78>)
 8002240:	42b0      	cmp	r0, r6
 8002242:	d005      	beq.n	8002250 <TIM_OC1_SetConfig+0x38>
 8002244:	4e13      	ldr	r6, [pc, #76]	; (8002294 <TIM_OC1_SetConfig+0x7c>)
 8002246:	42b0      	cmp	r0, r6
 8002248:	d002      	beq.n	8002250 <TIM_OC1_SetConfig+0x38>
 800224a:	4e13      	ldr	r6, [pc, #76]	; (8002298 <TIM_OC1_SetConfig+0x80>)
 800224c:	42b0      	cmp	r0, r6
 800224e:	d116      	bne.n	800227e <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002250:	2608      	movs	r6, #8
 8002252:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002254:	68ce      	ldr	r6, [r1, #12]
 8002256:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002258:	2604      	movs	r6, #4
 800225a:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225c:	4290      	cmp	r0, r2
 800225e:	d008      	beq.n	8002272 <TIM_OC1_SetConfig+0x5a>
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <TIM_OC1_SetConfig+0x78>)
 8002262:	4290      	cmp	r0, r2
 8002264:	d005      	beq.n	8002272 <TIM_OC1_SetConfig+0x5a>
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <TIM_OC1_SetConfig+0x7c>)
 8002268:	4290      	cmp	r0, r2
 800226a:	d002      	beq.n	8002272 <TIM_OC1_SetConfig+0x5a>
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <TIM_OC1_SetConfig+0x80>)
 800226e:	4290      	cmp	r0, r2
 8002270:	d105      	bne.n	800227e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002274:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002276:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002278:	694c      	ldr	r4, [r1, #20]
 800227a:	4334      	orrs	r4, r6
 800227c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800227e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002280:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002282:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002284:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002286:	6203      	str	r3, [r0, #32]
}
 8002288:	bd70      	pop	{r4, r5, r6, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40014000 	.word	0x40014000
 8002294:	40014400 	.word	0x40014400
 8002298:	40014800 	.word	0x40014800
 800229c:	fffffcff 	.word	0xfffffcff

080022a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022a2:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022a4:	6a03      	ldr	r3, [r0, #32]
 80022a6:	4a17      	ldr	r2, [pc, #92]	; (8002304 <TIM_OC3_SetConfig+0x64>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80022ac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80022ae:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80022b0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022b2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022b4:	680d      	ldr	r5, [r1, #0]
 80022b6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022b8:	4d13      	ldr	r5, [pc, #76]	; (8002308 <TIM_OC3_SetConfig+0x68>)
 80022ba:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022bc:	688d      	ldr	r5, [r1, #8]
 80022be:	022d      	lsls	r5, r5, #8
 80022c0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022c2:	4d12      	ldr	r5, [pc, #72]	; (800230c <TIM_OC3_SetConfig+0x6c>)
 80022c4:	42a8      	cmp	r0, r5
 80022c6:	d10e      	bne.n	80022e6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022c8:	4d11      	ldr	r5, [pc, #68]	; (8002310 <TIM_OC3_SetConfig+0x70>)
 80022ca:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022cc:	68cb      	ldr	r3, [r1, #12]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022d2:	4d10      	ldr	r5, [pc, #64]	; (8002314 <TIM_OC3_SetConfig+0x74>)
 80022d4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022d6:	4d10      	ldr	r5, [pc, #64]	; (8002318 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022d8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022da:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022dc:	698a      	ldr	r2, [r1, #24]
 80022de:	4332      	orrs	r2, r6
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	432a      	orrs	r2, r5
 80022e4:	e008      	b.n	80022f8 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e6:	4d0d      	ldr	r5, [pc, #52]	; (800231c <TIM_OC3_SetConfig+0x7c>)
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	d0f4      	beq.n	80022d6 <TIM_OC3_SetConfig+0x36>
 80022ec:	4d0c      	ldr	r5, [pc, #48]	; (8002320 <TIM_OC3_SetConfig+0x80>)
 80022ee:	42a8      	cmp	r0, r5
 80022f0:	d0f1      	beq.n	80022d6 <TIM_OC3_SetConfig+0x36>
 80022f2:	4d0c      	ldr	r5, [pc, #48]	; (8002324 <TIM_OC3_SetConfig+0x84>)
 80022f4:	42a8      	cmp	r0, r5
 80022f6:	d0ee      	beq.n	80022d6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022fa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022fc:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80022fe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002300:	6203      	str	r3, [r0, #32]
}
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	fffffeff 	.word	0xfffffeff
 8002308:	fffffdff 	.word	0xfffffdff
 800230c:	40012c00 	.word	0x40012c00
 8002310:	fffff7ff 	.word	0xfffff7ff
 8002314:	fffffbff 	.word	0xfffffbff
 8002318:	ffffcfff 	.word	0xffffcfff
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800

08002328 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002328:	6a03      	ldr	r3, [r0, #32]
 800232a:	4a14      	ldr	r2, [pc, #80]	; (800237c <TIM_OC4_SetConfig+0x54>)
{
 800232c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800232e:	4013      	ands	r3, r2
 8002330:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002334:	4c12      	ldr	r4, [pc, #72]	; (8002380 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8002336:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002338:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800233a:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800233c:	680c      	ldr	r4, [r1, #0]
 800233e:	0224      	lsls	r4, r4, #8
 8002340:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002342:	4c10      	ldr	r4, [pc, #64]	; (8002384 <TIM_OC4_SetConfig+0x5c>)
 8002344:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002346:	688c      	ldr	r4, [r1, #8]
 8002348:	0324      	lsls	r4, r4, #12
 800234a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234c:	4c0e      	ldr	r4, [pc, #56]	; (8002388 <TIM_OC4_SetConfig+0x60>)
 800234e:	42a0      	cmp	r0, r4
 8002350:	d008      	beq.n	8002364 <TIM_OC4_SetConfig+0x3c>
 8002352:	4c0e      	ldr	r4, [pc, #56]	; (800238c <TIM_OC4_SetConfig+0x64>)
 8002354:	42a0      	cmp	r0, r4
 8002356:	d005      	beq.n	8002364 <TIM_OC4_SetConfig+0x3c>
 8002358:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <TIM_OC4_SetConfig+0x68>)
 800235a:	42a0      	cmp	r0, r4
 800235c:	d002      	beq.n	8002364 <TIM_OC4_SetConfig+0x3c>
 800235e:	4c0d      	ldr	r4, [pc, #52]	; (8002394 <TIM_OC4_SetConfig+0x6c>)
 8002360:	42a0      	cmp	r0, r4
 8002362:	d104      	bne.n	800236e <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002364:	4c0c      	ldr	r4, [pc, #48]	; (8002398 <TIM_OC4_SetConfig+0x70>)
 8002366:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002368:	694c      	ldr	r4, [r1, #20]
 800236a:	01a4      	lsls	r4, r4, #6
 800236c:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002370:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002372:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002374:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002376:	6202      	str	r2, [r0, #32]
}
 8002378:	bd30      	pop	{r4, r5, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	ffffefff 	.word	0xffffefff
 8002380:	ffff8cff 	.word	0xffff8cff
 8002384:	ffffdfff 	.word	0xffffdfff
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40014000 	.word	0x40014000
 8002390:	40014400 	.word	0x40014400
 8002394:	40014800 	.word	0x40014800
 8002398:	ffffbfff 	.word	0xffffbfff

0800239c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800239c:	0002      	movs	r2, r0
{
 800239e:	0003      	movs	r3, r0
    return HAL_ERROR;
 80023a0:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80023a2:	323d      	adds	r2, #61	; 0x3d
 80023a4:	7811      	ldrb	r1, [r2, #0]
 80023a6:	4281      	cmp	r1, r0
 80023a8:	d118      	bne.n	80023dc <HAL_TIM_Base_Start_IT+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80023aa:	2102      	movs	r1, #2
 80023ac:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4302      	orrs	r2, r0
 80023b4:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_TIM_Base_Start_IT+0x4c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d005      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x2c>
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <HAL_TIM_Base_Start_IT+0x50>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d002      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x2c>
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <HAL_TIM_Base_Start_IT+0x54>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d10a      	bne.n	80023de <HAL_TIM_Base_Start_IT+0x42>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023c8:	2107      	movs	r1, #7
 80023ca:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ce:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	2a06      	cmp	r2, #6
 80023d2:	d003      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0x40>
      __HAL_TIM_ENABLE(htim);
 80023d4:	2201      	movs	r2, #1
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4310      	orrs	r0, r2
 80023e2:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80023e4:	2000      	movs	r0, #0
 80023e6:	e7f9      	b.n	80023dc <HAL_TIM_Base_Start_IT+0x40>
 80023e8:	40012c00 	.word	0x40012c00
 80023ec:	40000400 	.word	0x40000400
 80023f0:	40014000 	.word	0x40014000

080023f4 <HAL_TIM_PWM_MspInit>:
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_PeriodElapsedCallback>:
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_OC_DelayElapsedCallback>:
 80023f8:	4770      	bx	lr

080023fa <HAL_TIM_IC_CaptureCallback>:
 80023fa:	4770      	bx	lr

080023fc <HAL_TIM_PWM_PulseFinishedCallback>:
 80023fc:	4770      	bx	lr

080023fe <HAL_TIM_TriggerCallback>:
 80023fe:	4770      	bx	lr

08002400 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002400:	2202      	movs	r2, #2
 8002402:	6803      	ldr	r3, [r0, #0]
{
 8002404:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002406:	6919      	ldr	r1, [r3, #16]
{
 8002408:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800240a:	4211      	tst	r1, r2
 800240c:	d00e      	beq.n	800242c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240e:	68d9      	ldr	r1, [r3, #12]
 8002410:	4211      	tst	r1, r2
 8002412:	d00b      	beq.n	800242c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002414:	3a05      	subs	r2, #5
 8002416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002418:	3204      	adds	r2, #4
 800241a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	079b      	lsls	r3, r3, #30
 8002420:	d100      	bne.n	8002424 <HAL_TIM_IRQHandler+0x24>
 8002422:	e079      	b.n	8002518 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8002424:	f7ff ffe9 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002428:	2300      	movs	r3, #0
 800242a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800242c:	2204      	movs	r2, #4
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	4211      	tst	r1, r2
 8002434:	d010      	beq.n	8002458 <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002436:	68d9      	ldr	r1, [r3, #12]
 8002438:	4211      	tst	r1, r2
 800243a:	d00d      	beq.n	8002458 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800243c:	3a09      	subs	r2, #9
 800243e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002440:	3207      	adds	r2, #7
 8002442:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	23c0      	movs	r3, #192	; 0xc0
 8002448:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	421a      	tst	r2, r3
 800244e:	d069      	beq.n	8002524 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8002450:	f7ff ffd3 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002454:	2300      	movs	r3, #0
 8002456:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002458:	2208      	movs	r2, #8
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	4211      	tst	r1, r2
 8002460:	d00e      	beq.n	8002480 <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002462:	68d9      	ldr	r1, [r3, #12]
 8002464:	4211      	tst	r1, r2
 8002466:	d00b      	beq.n	8002480 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002468:	3a11      	subs	r2, #17
 800246a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800246c:	320d      	adds	r2, #13
 800246e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002470:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002474:	079b      	lsls	r3, r3, #30
 8002476:	d05b      	beq.n	8002530 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002478:	f7ff ffbf 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247c:	2300      	movs	r3, #0
 800247e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002480:	2210      	movs	r2, #16
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	4211      	tst	r1, r2
 8002488:	d010      	beq.n	80024ac <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800248a:	68d9      	ldr	r1, [r3, #12]
 800248c:	4211      	tst	r1, r2
 800248e:	d00d      	beq.n	80024ac <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002490:	3a21      	subs	r2, #33	; 0x21
 8002492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002494:	3219      	adds	r2, #25
 8002496:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	23c0      	movs	r3, #192	; 0xc0
 800249c:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a0:	421a      	tst	r2, r3
 80024a2:	d04b      	beq.n	800253c <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80024a4:	f7ff ffa9 	bl	80023fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a8:	2300      	movs	r3, #0
 80024aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024ac:	2201      	movs	r2, #1
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	4211      	tst	r1, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	4211      	tst	r1, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024bc:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 80024be:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c2:	f7ff ff98 	bl	80023f6 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	6919      	ldr	r1, [r3, #16]
 80024cc:	4211      	tst	r1, r2
 80024ce:	d008      	beq.n	80024e2 <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d0:	68d9      	ldr	r1, [r3, #12]
 80024d2:	4211      	tst	r1, r2
 80024d4:	d005      	beq.n	80024e2 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d6:	3a02      	subs	r2, #2
 80024d8:	3aff      	subs	r2, #255	; 0xff
      HAL_TIMEx_BreakCallback(htim);
 80024da:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024de:	f000 fa44 	bl	800296a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	6919      	ldr	r1, [r3, #16]
 80024e8:	4211      	tst	r1, r2
 80024ea:	d007      	beq.n	80024fc <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ec:	68d9      	ldr	r1, [r3, #12]
 80024ee:	4211      	tst	r1, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f2:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 80024f4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024f8:	f7ff ff81 	bl	80023fe <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024fc:	2220      	movs	r2, #32
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	6919      	ldr	r1, [r3, #16]
 8002502:	4211      	tst	r1, r2
 8002504:	d007      	beq.n	8002516 <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	4211      	tst	r1, r2
 800250a:	d004      	beq.n	8002516 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800250c:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 800250e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002510:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002512:	f000 fa29 	bl	8002968 <HAL_TIMEx_CommutCallback>
}
 8002516:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002518:	f7ff ff6e 	bl	80023f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	0020      	movs	r0, r4
 800251e:	f7ff ff6d 	bl	80023fc <HAL_TIM_PWM_PulseFinishedCallback>
 8002522:	e781      	b.n	8002428 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002524:	f7ff ff68 	bl	80023f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	0020      	movs	r0, r4
 800252a:	f7ff ff67 	bl	80023fc <HAL_TIM_PWM_PulseFinishedCallback>
 800252e:	e791      	b.n	8002454 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002530:	f7ff ff62 	bl	80023f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	0020      	movs	r0, r4
 8002536:	f7ff ff61 	bl	80023fc <HAL_TIM_PWM_PulseFinishedCallback>
 800253a:	e79f      	b.n	800247c <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253c:	f7ff ff5c 	bl	80023f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	0020      	movs	r0, r4
 8002542:	f7ff ff5b 	bl	80023fc <HAL_TIM_PWM_PulseFinishedCallback>
 8002546:	e7af      	b.n	80024a8 <HAL_TIM_IRQHandler+0xa8>

08002548 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <TIM_Base_SetConfig+0x74>)
{
 800254a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800254c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254e:	4290      	cmp	r0, r2
 8002550:	d002      	beq.n	8002558 <TIM_Base_SetConfig+0x10>
 8002552:	4c1b      	ldr	r4, [pc, #108]	; (80025c0 <TIM_Base_SetConfig+0x78>)
 8002554:	42a0      	cmp	r0, r4
 8002556:	d108      	bne.n	800256a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002558:	2470      	movs	r4, #112	; 0x70
 800255a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800255c:	684c      	ldr	r4, [r1, #4]
 800255e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002560:	4290      	cmp	r0, r2
 8002562:	d00e      	beq.n	8002582 <TIM_Base_SetConfig+0x3a>
 8002564:	4c16      	ldr	r4, [pc, #88]	; (80025c0 <TIM_Base_SetConfig+0x78>)
 8002566:	42a0      	cmp	r0, r4
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0x3a>
 800256a:	4c16      	ldr	r4, [pc, #88]	; (80025c4 <TIM_Base_SetConfig+0x7c>)
 800256c:	42a0      	cmp	r0, r4
 800256e:	d008      	beq.n	8002582 <TIM_Base_SetConfig+0x3a>
 8002570:	4c15      	ldr	r4, [pc, #84]	; (80025c8 <TIM_Base_SetConfig+0x80>)
 8002572:	42a0      	cmp	r0, r4
 8002574:	d005      	beq.n	8002582 <TIM_Base_SetConfig+0x3a>
 8002576:	4c15      	ldr	r4, [pc, #84]	; (80025cc <TIM_Base_SetConfig+0x84>)
 8002578:	42a0      	cmp	r0, r4
 800257a:	d002      	beq.n	8002582 <TIM_Base_SetConfig+0x3a>
 800257c:	4c14      	ldr	r4, [pc, #80]	; (80025d0 <TIM_Base_SetConfig+0x88>)
 800257e:	42a0      	cmp	r0, r4
 8002580:	d103      	bne.n	800258a <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002582:	4c14      	ldr	r4, [pc, #80]	; (80025d4 <TIM_Base_SetConfig+0x8c>)
 8002584:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002586:	68cc      	ldr	r4, [r1, #12]
 8002588:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800258a:	2480      	movs	r4, #128	; 0x80
 800258c:	43a3      	bics	r3, r4
 800258e:	694c      	ldr	r4, [r1, #20]
 8002590:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002592:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002594:	688b      	ldr	r3, [r1, #8]
 8002596:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002598:	680b      	ldr	r3, [r1, #0]
 800259a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800259c:	4290      	cmp	r0, r2
 800259e:	d008      	beq.n	80025b2 <TIM_Base_SetConfig+0x6a>
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <TIM_Base_SetConfig+0x80>)
 80025a2:	4298      	cmp	r0, r3
 80025a4:	d005      	beq.n	80025b2 <TIM_Base_SetConfig+0x6a>
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <TIM_Base_SetConfig+0x84>)
 80025a8:	4298      	cmp	r0, r3
 80025aa:	d002      	beq.n	80025b2 <TIM_Base_SetConfig+0x6a>
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <TIM_Base_SetConfig+0x88>)
 80025ae:	4298      	cmp	r0, r3
 80025b0:	d101      	bne.n	80025b6 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80025b2:	690b      	ldr	r3, [r1, #16]
 80025b4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80025b6:	2301      	movs	r3, #1
 80025b8:	6143      	str	r3, [r0, #20]
}
 80025ba:	bd10      	pop	{r4, pc}
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40002000 	.word	0x40002000
 80025c8:	40014000 	.word	0x40014000
 80025cc:	40014400 	.word	0x40014400
 80025d0:	40014800 	.word	0x40014800
 80025d4:	fffffcff 	.word	0xfffffcff

080025d8 <HAL_TIM_Base_Init>:
{
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
  if (htim == NULL)
 80025de:	2c00      	cmp	r4, #0
 80025e0:	d021      	beq.n	8002626 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	0025      	movs	r5, r4
 80025e4:	353d      	adds	r5, #61	; 0x3d
 80025e6:	782b      	ldrb	r3, [r5, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d105      	bne.n	80025fa <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80025ee:	0023      	movs	r3, r4
 80025f0:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80025f2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80025f4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80025f6:	f7fe fe41 	bl	800127c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	1d21      	adds	r1, r4, #4
 8002602:	f7ff ffa1 	bl	8002548 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002606:	0022      	movs	r2, r4
 8002608:	2301      	movs	r3, #1
  return HAL_OK;
 800260a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	3246      	adds	r2, #70	; 0x46
 800260e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002612:	3a08      	subs	r2, #8
 8002614:	7013      	strb	r3, [r2, #0]
 8002616:	7053      	strb	r3, [r2, #1]
 8002618:	7093      	strb	r3, [r2, #2]
 800261a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	7113      	strb	r3, [r2, #4]
 800261e:	7153      	strb	r3, [r2, #5]
 8002620:	7193      	strb	r3, [r2, #6]
 8002622:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002624:	702b      	strb	r3, [r5, #0]
}
 8002626:	bd70      	pop	{r4, r5, r6, pc}

08002628 <HAL_TIM_PWM_Init>:
{
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
  if (htim == NULL)
 800262e:	2c00      	cmp	r4, #0
 8002630:	d021      	beq.n	8002676 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002632:	0025      	movs	r5, r4
 8002634:	353d      	adds	r5, #61	; 0x3d
 8002636:	782b      	ldrb	r3, [r5, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800263e:	0023      	movs	r3, r4
 8002640:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002642:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002644:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002646:	f7ff fed5 	bl	80023f4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264e:	6820      	ldr	r0, [r4, #0]
 8002650:	1d21      	adds	r1, r4, #4
 8002652:	f7ff ff79 	bl	8002548 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002656:	0022      	movs	r2, r4
 8002658:	2301      	movs	r3, #1
  return HAL_OK;
 800265a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265c:	3246      	adds	r2, #70	; 0x46
 800265e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002662:	3a08      	subs	r2, #8
 8002664:	7013      	strb	r3, [r2, #0]
 8002666:	7053      	strb	r3, [r2, #1]
 8002668:	7093      	strb	r3, [r2, #2]
 800266a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800266c:	7113      	strb	r3, [r2, #4]
 800266e:	7153      	strb	r3, [r2, #5]
 8002670:	7193      	strb	r3, [r2, #6]
 8002672:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002674:	702b      	strb	r3, [r5, #0]
}
 8002676:	bd70      	pop	{r4, r5, r6, pc}

08002678 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002678:	2210      	movs	r2, #16
 800267a:	6a03      	ldr	r3, [r0, #32]
{
 800267c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267e:	4393      	bics	r3, r2
 8002680:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002682:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002684:	4d16      	ldr	r5, [pc, #88]	; (80026e0 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8002686:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002688:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800268a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800268c:	680d      	ldr	r5, [r1, #0]
 800268e:	022d      	lsls	r5, r5, #8
 8002690:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8002692:	2520      	movs	r5, #32
 8002694:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002696:	688d      	ldr	r5, [r1, #8]
 8002698:	012d      	lsls	r5, r5, #4
 800269a:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800269c:	4d11      	ldr	r5, [pc, #68]	; (80026e4 <TIM_OC2_SetConfig+0x6c>)
 800269e:	42a8      	cmp	r0, r5
 80026a0:	d10f      	bne.n	80026c2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a2:	2580      	movs	r5, #128	; 0x80
 80026a4:	43aa      	bics	r2, r5
 80026a6:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026a8:	68ca      	ldr	r2, [r1, #12]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ae:	2540      	movs	r5, #64	; 0x40
 80026b0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b2:	4d0d      	ldr	r5, [pc, #52]	; (80026e8 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026b4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026b8:	698b      	ldr	r3, [r1, #24]
 80026ba:	4333      	orrs	r3, r6
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	432b      	orrs	r3, r5
 80026c0:	e008      	b.n	80026d4 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c2:	4d0a      	ldr	r5, [pc, #40]	; (80026ec <TIM_OC2_SetConfig+0x74>)
 80026c4:	42a8      	cmp	r0, r5
 80026c6:	d0f4      	beq.n	80026b2 <TIM_OC2_SetConfig+0x3a>
 80026c8:	4d09      	ldr	r5, [pc, #36]	; (80026f0 <TIM_OC2_SetConfig+0x78>)
 80026ca:	42a8      	cmp	r0, r5
 80026cc:	d0f1      	beq.n	80026b2 <TIM_OC2_SetConfig+0x3a>
 80026ce:	4d09      	ldr	r5, [pc, #36]	; (80026f4 <TIM_OC2_SetConfig+0x7c>)
 80026d0:	42a8      	cmp	r0, r5
 80026d2:	d0ee      	beq.n	80026b2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80026d4:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80026d6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80026d8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80026da:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80026dc:	6202      	str	r2, [r0, #32]
}
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	ffff8cff 	.word	0xffff8cff
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	fffff3ff 	.word	0xfffff3ff
 80026ec:	40014000 	.word	0x40014000
 80026f0:	40014400 	.word	0x40014400
 80026f4:	40014800 	.word	0x40014800

080026f8 <HAL_TIM_PWM_ConfigChannel>:
{
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80026fa:	0007      	movs	r7, r0
 80026fc:	373c      	adds	r7, #60	; 0x3c
 80026fe:	783b      	ldrb	r3, [r7, #0]
{
 8002700:	0004      	movs	r4, r0
 8002702:	000e      	movs	r6, r1
 8002704:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8002706:	2002      	movs	r0, #2
 8002708:	2b01      	cmp	r3, #1
 800270a:	d00a      	beq.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800270c:	3801      	subs	r0, #1
 800270e:	7038      	strb	r0, [r7, #0]
  switch (Channel)
 8002710:	2a08      	cmp	r2, #8
 8002712:	d03d      	beq.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002714:	d806      	bhi.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8002716:	2a00      	cmp	r2, #0
 8002718:	d017      	beq.n	800274a <HAL_TIM_PWM_ConfigChannel+0x52>
 800271a:	2a04      	cmp	r2, #4
 800271c:	d027      	beq.n	800276e <HAL_TIM_PWM_ConfigChannel+0x76>
  __HAL_UNLOCK(htim);
 800271e:	2300      	movs	r3, #0
 8002720:	703b      	strb	r3, [r7, #0]
}
 8002722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002724:	2a0c      	cmp	r2, #12
 8002726:	d1fa      	bne.n	800271e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	f7ff fdfd 	bl	8002328 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	69d9      	ldr	r1, [r3, #28]
 8002736:	430a      	orrs	r2, r1
 8002738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	491c      	ldr	r1, [pc, #112]	; (80027b0 <HAL_TIM_PWM_ConfigChannel+0xb8>)
 800273e:	400a      	ands	r2, r1
 8002740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002742:	6932      	ldr	r2, [r6, #16]
 8002744:	69d9      	ldr	r1, [r3, #28]
 8002746:	0212      	lsls	r2, r2, #8
 8002748:	e02f      	b.n	80027aa <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f7ff fd64 	bl	8002218 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002750:	2208      	movs	r2, #8
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002758:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800275a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	438a      	bics	r2, r1
 8002760:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	6931      	ldr	r1, [r6, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002766:	430a      	orrs	r2, r1
 8002768:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2000      	movs	r0, #0
      break;
 800276c:	e7d7      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800276e:	6820      	ldr	r0, [r4, #0]
 8002770:	f7ff ff82 	bl	8002678 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	6999      	ldr	r1, [r3, #24]
 800277c:	430a      	orrs	r2, r1
 800277e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	490b      	ldr	r1, [pc, #44]	; (80027b0 <HAL_TIM_PWM_ConfigChannel+0xb8>)
 8002784:	400a      	ands	r2, r1
 8002786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002788:	6932      	ldr	r2, [r6, #16]
 800278a:	6999      	ldr	r1, [r3, #24]
 800278c:	0212      	lsls	r2, r2, #8
 800278e:	e7ea      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002790:	6820      	ldr	r0, [r4, #0]
 8002792:	f7ff fd85 	bl	80022a0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002796:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	4315      	orrs	r5, r2
 800279e:	61dd      	str	r5, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	438a      	bics	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	6931      	ldr	r1, [r6, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027aa:	430a      	orrs	r2, r1
 80027ac:	61da      	str	r2, [r3, #28]
 80027ae:	e7dc      	b.n	800276a <HAL_TIM_PWM_ConfigChannel+0x72>
 80027b0:	fffffbff 	.word	0xfffffbff

080027b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027b4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	4d03      	ldr	r5, [pc, #12]	; (80027c8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ba:	430a      	orrs	r2, r1
 80027bc:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027be:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027c0:	4313      	orrs	r3, r2
 80027c2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c4:	6083      	str	r3, [r0, #8]
}
 80027c6:	bd30      	pop	{r4, r5, pc}
 80027c8:	ffff00ff 	.word	0xffff00ff

080027cc <HAL_TIM_ConfigClockSource>:
{
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80027ce:	0005      	movs	r5, r0
 80027d0:	2302      	movs	r3, #2
 80027d2:	353c      	adds	r5, #60	; 0x3c
{
 80027d4:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80027d6:	7828      	ldrb	r0, [r5, #0]
 80027d8:	001a      	movs	r2, r3
 80027da:	2801      	cmp	r0, #1
 80027dc:	d01d      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80027de:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80027e0:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80027e2:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80027e4:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80027e6:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	6820      	ldr	r0, [r4, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ea:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ee:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80027f0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80027f2:	680b      	ldr	r3, [r1, #0]
 80027f4:	2b60      	cmp	r3, #96	; 0x60
 80027f6:	d057      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xdc>
 80027f8:	d833      	bhi.n	8002862 <HAL_TIM_ConfigClockSource+0x96>
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d100      	bne.n	8002800 <HAL_TIM_ConfigClockSource+0x34>
 80027fe:	e06b      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x10c>
 8002800:	d815      	bhi.n	800282e <HAL_TIM_ConfigClockSource+0x62>
 8002802:	2b20      	cmp	r3, #32
 8002804:	d00d      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x56>
 8002806:	d80a      	bhi.n	800281e <HAL_TIM_ConfigClockSource+0x52>
 8002808:	2210      	movs	r2, #16
 800280a:	0019      	movs	r1, r3
 800280c:	4391      	bics	r1, r2
 800280e:	d008      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x56>
 8002810:	003a      	movs	r2, r7
  htim->State = HAL_TIM_STATE_READY;
 8002812:	2301      	movs	r3, #1
 8002814:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8002816:	2300      	movs	r3, #0
 8002818:	702b      	strb	r3, [r5, #0]
}
 800281a:	0010      	movs	r0, r2
 800281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800281e:	2b30      	cmp	r3, #48	; 0x30
 8002820:	d1f6      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002822:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002824:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002826:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002828:	4313      	orrs	r3, r2
 800282a:	2207      	movs	r2, #7
 800282c:	e016      	b.n	800285c <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 800282e:	2b50      	cmp	r3, #80	; 0x50
 8002830:	d1ee      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002832:	684a      	ldr	r2, [r1, #4]
 8002834:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002836:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002838:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800283a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283c:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800283e:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002840:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002842:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002844:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002846:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002848:	240a      	movs	r4, #10
 800284a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800284c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800284e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002850:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002852:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002854:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002856:	4393      	bics	r3, r2
 8002858:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285a:	2357      	movs	r3, #87	; 0x57
 800285c:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800285e:	6083      	str	r3, [r0, #8]
 8002860:	e016      	b.n	8002890 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8002862:	2280      	movs	r2, #128	; 0x80
 8002864:	0152      	lsls	r2, r2, #5
 8002866:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2200      	movs	r2, #0
  switch (sClockSourceConfig->ClockSource)
 800286a:	4563      	cmp	r3, ip
 800286c:	d0d1      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x46>
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	0192      	lsls	r2, r2, #6
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_TIM_ConfigClockSource+0xc8>
 8002876:	003a      	movs	r2, r7
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d1ca      	bne.n	8002812 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	68cb      	ldr	r3, [r1, #12]
 800287e:	684a      	ldr	r2, [r1, #4]
 8002880:	6889      	ldr	r1, [r1, #8]
 8002882:	f7ff ff97 	bl	80027b4 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288c:	430b      	orrs	r3, r1
 800288e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2200      	movs	r2, #0
}
 8002892:	e7be      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x46>
      TIM_ETR_SetConfig(htim->Instance,
 8002894:	68cb      	ldr	r3, [r1, #12]
 8002896:	684a      	ldr	r2, [r1, #4]
 8002898:	6889      	ldr	r1, [r1, #8]
 800289a:	f7ff ff8b 	bl	80027b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	01db      	lsls	r3, r3, #7
 80028a4:	6891      	ldr	r1, [r2, #8]
 80028a6:	e7f1      	b.n	800288c <HAL_TIM_ConfigClockSource+0xc0>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a8:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028aa:	684b      	ldr	r3, [r1, #4]
 80028ac:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ae:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b0:	4f15      	ldr	r7, [pc, #84]	; (8002908 <HAL_TIM_ConfigClockSource+0x13c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b2:	43a1      	bics	r1, r4
 80028b4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b8:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ba:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028bc:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028be:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80028c0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80028c2:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c4:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c6:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 80028cc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80028ce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d0:	4393      	bics	r3, r2
 80028d2:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d4:	2367      	movs	r3, #103	; 0x67
 80028d6:	e7c1      	b.n	800285c <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d8:	684a      	ldr	r2, [r1, #4]
 80028da:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80028dc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e2:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e4:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e8:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ea:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028ec:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ee:	240a      	movs	r4, #10
 80028f0:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80028f2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80028f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80028f6:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f8:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80028fa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fc:	4393      	bics	r3, r2
 80028fe:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002900:	2347      	movs	r3, #71	; 0x47
 8002902:	e7ab      	b.n	800285c <HAL_TIM_ConfigClockSource+0x90>
 8002904:	ffff0088 	.word	0xffff0088
 8002908:	ffff0fff 	.word	0xffff0fff

0800290c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800290c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800290e:	0004      	movs	r4, r0
 8002910:	2202      	movs	r2, #2
 8002912:	343c      	adds	r4, #60	; 0x3c
 8002914:	7825      	ldrb	r5, [r4, #0]
{
 8002916:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002918:	0010      	movs	r0, r2
 800291a:	2d01      	cmp	r5, #1
 800291c:	d01c      	beq.n	8002958 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002920:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002922:	353d      	adds	r5, #61	; 0x3d
 8002924:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800292a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800292c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800292e:	680e      	ldr	r6, [r1, #0]
 8002930:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002932:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002934:	4809      	ldr	r0, [pc, #36]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002936:	4283      	cmp	r3, r0
 8002938:	d005      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800293a:	4809      	ldr	r0, [pc, #36]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800293c:	4283      	cmp	r3, r0
 800293e:	d002      	beq.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002940:	4808      	ldr	r0, [pc, #32]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002942:	4283      	cmp	r3, r0
 8002944:	d104      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002946:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002948:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294a:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800294c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800294e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002950:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002952:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002954:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002956:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002958:	bd70      	pop	{r4, r5, r6, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40014000 	.word	0x40014000

08002968 <HAL_TIMEx_CommutCallback>:
 8002968:	4770      	bx	lr

0800296a <HAL_TIMEx_BreakCallback>:
 800296a:	4770      	bx	lr

0800296c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800296c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002972:	2201      	movs	r2, #1
 8002974:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002978:	6801      	ldr	r1, [r0, #0]
 800297a:	4d12      	ldr	r5, [pc, #72]	; (80029c4 <UART_EndRxTransfer+0x58>)
 800297c:	680b      	ldr	r3, [r1, #0]
 800297e:	402b      	ands	r3, r5
 8002980:	600b      	str	r3, [r1, #0]
 8002982:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002986:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298e:	6801      	ldr	r1, [r0, #0]
 8002990:	688b      	ldr	r3, [r1, #8]
 8002992:	4393      	bics	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
 8002996:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800299c:	4293      	cmp	r3, r2
 800299e:	d10a      	bne.n	80029b6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a8:	2410      	movs	r4, #16
 80029aa:	6802      	ldr	r2, [r0, #0]
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	43a3      	bics	r3, r4
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029b6:	2320      	movs	r3, #32
 80029b8:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ba:	2300      	movs	r3, #0
 80029bc:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029be:	6643      	str	r3, [r0, #100]	; 0x64
}
 80029c0:	bd30      	pop	{r4, r5, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	fffffedf 	.word	0xfffffedf

080029c8 <HAL_UART_TxCpltCallback>:
 80029c8:	4770      	bx	lr

080029ca <HAL_UART_ErrorCallback>:
 80029ca:	4770      	bx	lr

080029cc <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	0002      	movs	r2, r0
{
 80029d2:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80029d4:	325a      	adds	r2, #90	; 0x5a
 80029d6:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80029d8:	3a08      	subs	r2, #8
 80029da:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029dc:	f7ff fff5 	bl	80029ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e0:	bd10      	pop	{r4, pc}

080029e2 <HAL_UARTEx_RxEventCallback>:
}
 80029e2:	4770      	bx	lr

080029e4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029e4:	6801      	ldr	r1, [r0, #0]
{
 80029e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029e8:	69cb      	ldr	r3, [r1, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ea:	4d9f      	ldr	r5, [pc, #636]	; (8002c68 <HAL_UART_IRQHandler+0x284>)
{
 80029ec:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ee:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f0:	688a      	ldr	r2, [r1, #8]
  if (errorflags == 0U)
 80029f2:	422b      	tst	r3, r5
 80029f4:	d10b      	bne.n	8002a0e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f6:	2220      	movs	r2, #32
 80029f8:	4213      	tst	r3, r2
 80029fa:	d100      	bne.n	80029fe <HAL_UART_IRQHandler+0x1a>
 80029fc:	e07e      	b.n	8002afc <HAL_UART_IRQHandler+0x118>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029fe:	4210      	tst	r0, r2
 8002a00:	d100      	bne.n	8002a04 <HAL_UART_IRQHandler+0x20>
 8002a02:	e07b      	b.n	8002afc <HAL_UART_IRQHandler+0x118>
      if (huart->RxISR != NULL)
 8002a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8002a06:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d16d      	bne.n	8002ae8 <HAL_UART_IRQHandler+0x104>
 8002a0c:	e06d      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a0e:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a10:	4d96      	ldr	r5, [pc, #600]	; (8002c6c <HAL_UART_IRQHandler+0x288>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a12:	4032      	ands	r2, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a14:	4005      	ands	r5, r0
 8002a16:	4315      	orrs	r5, r2
 8002a18:	d100      	bne.n	8002a1c <HAL_UART_IRQHandler+0x38>
 8002a1a:	e06f      	b.n	8002afc <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a1c:	1d25      	adds	r5, r4, #4
 8002a1e:	4233      	tst	r3, r6
 8002a20:	d005      	beq.n	8002a2e <HAL_UART_IRQHandler+0x4a>
 8002a22:	05c7      	lsls	r7, r0, #23
 8002a24:	d503      	bpl.n	8002a2e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a26:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a28:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8002a2a:	433e      	orrs	r6, r7
 8002a2c:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a2e:	2602      	movs	r6, #2
 8002a30:	4233      	tst	r3, r6
 8002a32:	d006      	beq.n	8002a42 <HAL_UART_IRQHandler+0x5e>
 8002a34:	2a00      	cmp	r2, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a38:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a3a:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8002a3c:	19b6      	adds	r6, r6, r6
 8002a3e:	433e      	orrs	r6, r7
 8002a40:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a42:	2604      	movs	r6, #4
 8002a44:	4233      	tst	r3, r6
 8002a46:	d006      	beq.n	8002a56 <HAL_UART_IRQHandler+0x72>
 8002a48:	2a00      	cmp	r2, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a4c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a4e:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8002a50:	3e02      	subs	r6, #2
 8002a52:	433e      	orrs	r6, r7
 8002a54:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a56:	2608      	movs	r6, #8
 8002a58:	4233      	tst	r3, r6
 8002a5a:	d007      	beq.n	8002a6c <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a5c:	2720      	movs	r7, #32
 8002a5e:	4007      	ands	r7, r0
 8002a60:	433a      	orrs	r2, r7
 8002a62:	d003      	beq.n	8002a6c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a64:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a66:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002a68:	4316      	orrs	r6, r2
 8002a6a:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	4213      	tst	r3, r2
 8002a72:	d006      	beq.n	8002a82 <HAL_UART_IRQHandler+0x9e>
 8002a74:	0146      	lsls	r6, r0, #5
 8002a76:	d504      	bpl.n	8002a82 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a78:	620a      	str	r2, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002a84:	2a00      	cmp	r2, #0
 8002a86:	d030      	beq.n	8002aea <HAL_UART_IRQHandler+0x106>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a88:	2220      	movs	r2, #32
 8002a8a:	4213      	tst	r3, r2
 8002a8c:	d006      	beq.n	8002a9c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a8e:	4210      	tst	r0, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8002a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8002a98:	0020      	movs	r0, r4
 8002a9a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a9c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002a9e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aa0:	2740      	movs	r7, #64	; 0x40
 8002aa2:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aa6:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa8:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8002aaa:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aac:	431e      	orrs	r6, r3
 8002aae:	d021      	beq.n	8002af4 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 8002ab0:	f7ff ff5c 	bl	800296c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	423b      	tst	r3, r7
 8002aba:	d017      	beq.n	8002aec <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	6893      	ldr	r3, [r2, #8]
 8002aca:	43bb      	bics	r3, r7
 8002acc:	6093      	str	r3, [r2, #8]
 8002ace:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002ad2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d009      	beq.n	8002aec <HAL_UART_IRQHandler+0x108>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ad8:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <HAL_UART_IRQHandler+0x28c>)
 8002ada:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002adc:	f7fe ff24 	bl	8001928 <HAL_DMA_Abort_IT>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_UART_IRQHandler+0x106>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ae6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ae8:	4798      	blx	r3
}
 8002aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002aec:	0020      	movs	r0, r4
 8002aee:	f7ff ff6c 	bl	80029ca <HAL_UART_ErrorCallback>
 8002af2:	e7fa      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
        HAL_UART_ErrorCallback(huart);
 8002af4:	f7ff ff69 	bl	80029ca <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	67ee      	str	r6, [r5, #124]	; 0x7c
 8002afa:	e7f6      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002afe:	2a01      	cmp	r2, #1
 8002b00:	d000      	beq.n	8002b04 <HAL_UART_IRQHandler+0x120>
 8002b02:	e090      	b.n	8002c26 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b04:	2510      	movs	r5, #16
 8002b06:	422b      	tst	r3, r5
 8002b08:	d100      	bne.n	8002b0c <HAL_UART_IRQHandler+0x128>
 8002b0a:	e08c      	b.n	8002c26 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b0c:	4228      	tst	r0, r5
 8002b0e:	d100      	bne.n	8002b12 <HAL_UART_IRQHandler+0x12e>
 8002b10:	e089      	b.n	8002c26 <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b12:	620d      	str	r5, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	688b      	ldr	r3, [r1, #8]
 8002b16:	2140      	movs	r1, #64	; 0x40
 8002b18:	0018      	movs	r0, r3
 8002b1a:	4008      	ands	r0, r1
 8002b1c:	420b      	tst	r3, r1
 8002b1e:	d04c      	beq.n	8002bba <HAL_UART_IRQHandler+0x1d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b20:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002b22:	6803      	ldr	r3, [r0, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0de      	beq.n	8002aea <HAL_UART_IRQHandler+0x106>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b2c:	0026      	movs	r6, r4
 8002b2e:	3658      	adds	r6, #88	; 0x58
 8002b30:	8837      	ldrh	r7, [r6, #0]
 8002b32:	429f      	cmp	r7, r3
 8002b34:	d9d9      	bls.n	8002aea <HAL_UART_IRQHandler+0x106>
        huart->RxXferCount = nb_remaining_rx_data;
 8002b36:	0027      	movs	r7, r4
 8002b38:	375a      	adds	r7, #90	; 0x5a
 8002b3a:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b3c:	6983      	ldr	r3, [r0, #24]
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d031      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1c2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b42:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b4a:	6820      	ldr	r0, [r4, #0]
 8002b4c:	4d49      	ldr	r5, [pc, #292]	; (8002c74 <HAL_UART_IRQHandler+0x290>)
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	402b      	ands	r3, r5
 8002b52:	6003      	str	r3, [r0, #0]
 8002b54:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b58:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b60:	6820      	ldr	r0, [r4, #0]
 8002b62:	6883      	ldr	r3, [r0, #8]
 8002b64:	4393      	bics	r3, r2
 8002b66:	6083      	str	r3, [r0, #8]
 8002b68:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b70:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b74:	6820      	ldr	r0, [r4, #0]
 8002b76:	6883      	ldr	r3, [r0, #8]
 8002b78:	438b      	bics	r3, r1
 8002b7a:	6083      	str	r3, [r0, #8]
 8002b7c:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8002b80:	2320      	movs	r3, #32
 8002b82:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b84:	2300      	movs	r3, #0
 8002b86:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	3512      	adds	r5, #18
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	35ff      	adds	r5, #255	; 0xff
 8002b98:	43ab      	bics	r3, r5
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ba0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002ba2:	f7fe fea3 	bl	80018ec <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ba6:	0023      	movs	r3, r4
 8002ba8:	335a      	adds	r3, #90	; 0x5a
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	8831      	ldrh	r1, [r6, #0]
 8002bae:	1ac9      	subs	r1, r1, r3
 8002bb0:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bb2:	0020      	movs	r0, r4
 8002bb4:	f7ff ff15 	bl	80029e2 <HAL_UARTEx_RxEventCallback>
 8002bb8:	e797      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bba:	0026      	movs	r6, r4
 8002bbc:	365a      	adds	r6, #90	; 0x5a
 8002bbe:	8833      	ldrh	r3, [r6, #0]
      if ((huart->RxXferCount > 0U)
 8002bc0:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc2:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d100      	bne.n	8002bca <HAL_UART_IRQHandler+0x1e6>
 8002bc8:	e78f      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bca:	0021      	movs	r1, r4
 8002bcc:	3158      	adds	r1, #88	; 0x58
 8002bce:	8809      	ldrh	r1, [r1, #0]
 8002bd0:	1ac9      	subs	r1, r1, r3
 8002bd2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d100      	bne.n	8002bda <HAL_UART_IRQHandler+0x1f6>
 8002bd8:	e787      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bda:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be2:	6826      	ldr	r6, [r4, #0]
 8002be4:	4d24      	ldr	r5, [pc, #144]	; (8002c78 <HAL_UART_IRQHandler+0x294>)
 8002be6:	6833      	ldr	r3, [r6, #0]
 8002be8:	402b      	ands	r3, r5
 8002bea:	6033      	str	r3, [r6, #0]
 8002bec:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf8:	6826      	ldr	r6, [r4, #0]
 8002bfa:	68b3      	ldr	r3, [r6, #8]
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	60b3      	str	r3, [r6, #8]
 8002c00:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8002c04:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 8002c06:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8002c08:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0a:	6620      	str	r0, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c10:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c14:	6822      	ldr	r2, [r4, #0]
 8002c16:	3532      	adds	r5, #50	; 0x32
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	35ff      	adds	r5, #255	; 0xff
 8002c1c:	43ab      	bics	r3, r5
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	f380 8810 	msr	PRIMASK, r0
 8002c24:	e7c5      	b.n	8002bb2 <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	4213      	tst	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c2c:	4210      	tst	r0, r2
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_IRQHandler+0x250>
    if (huart->TxISR != NULL)
 8002c30:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002c32:	e6e8      	b.n	8002a06 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	4213      	tst	r3, r2
 8002c38:	d100      	bne.n	8002c3c <HAL_UART_IRQHandler+0x258>
 8002c3a:	e756      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
 8002c3c:	4210      	tst	r0, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_UART_IRQHandler+0x25e>
 8002c40:	e753      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c42:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c46:	2301      	movs	r3, #1
 8002c48:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c4c:	6821      	ldr	r1, [r4, #0]
 8002c4e:	680b      	ldr	r3, [r1, #0]
 8002c50:	4393      	bics	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
 8002c54:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	2320      	movs	r3, #32
 8002c5a:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c5c:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c5e:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002c60:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8002c62:	f7ff feb1 	bl	80029c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c66:	e740      	b.n	8002aea <HAL_UART_IRQHandler+0x106>
 8002c68:	0000080f 	.word	0x0000080f
 8002c6c:	04000120 	.word	0x04000120
 8002c70:	080029cd 	.word	0x080029cd
 8002c74:	fffffeff 	.word	0xfffffeff
 8002c78:	fffffedf 	.word	0xfffffedf

08002c7c <UART_SetConfig>:
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c80:	6925      	ldr	r5, [r4, #16]
 8002c82:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c84:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c86:	4329      	orrs	r1, r5
 8002c88:	6965      	ldr	r5, [r4, #20]
 8002c8a:	69c3      	ldr	r3, [r0, #28]
 8002c8c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c8e:	6810      	ldr	r0, [r2, #0]
 8002c90:	4d43      	ldr	r5, [pc, #268]	; (8002da0 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c92:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c94:	4028      	ands	r0, r5
 8002c96:	4301      	orrs	r1, r0
 8002c98:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9a:	6851      	ldr	r1, [r2, #4]
 8002c9c:	4841      	ldr	r0, [pc, #260]	; (8002da4 <UART_SetConfig+0x128>)
  tmpreg |= huart->Init.OneBitSampling;
 8002c9e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca0:	4001      	ands	r1, r0
 8002ca2:	68e0      	ldr	r0, [r4, #12]
 8002ca4:	4301      	orrs	r1, r0
 8002ca6:	6051      	str	r1, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002ca8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002caa:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002cac:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cae:	4d3e      	ldr	r5, [pc, #248]	; (8002da8 <UART_SetConfig+0x12c>)
 8002cb0:	4028      	ands	r0, r5
 8002cb2:	4301      	orrs	r1, r0
 8002cb4:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb6:	493d      	ldr	r1, [pc, #244]	; (8002dac <UART_SetConfig+0x130>)
 8002cb8:	428a      	cmp	r2, r1
 8002cba:	d115      	bne.n	8002ce8 <UART_SetConfig+0x6c>
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <UART_SetConfig+0x134>)
 8002cc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	2a02      	cmp	r2, #2
 8002cc8:	d81d      	bhi.n	8002d06 <UART_SetConfig+0x8a>
 8002cca:	493a      	ldr	r1, [pc, #232]	; (8002db4 <UART_SetConfig+0x138>)
 8002ccc:	5c88      	ldrb	r0, [r1, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	0212      	lsls	r2, r2, #8
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d143      	bne.n	8002d5e <UART_SetConfig+0xe2>
    switch (clocksource)
 8002cd6:	2808      	cmp	r0, #8
 8002cd8:	d860      	bhi.n	8002d9c <UART_SetConfig+0x120>
 8002cda:	f7fd fa1d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002cde:	5f1d      	.short	0x5f1d
 8002ce0:	5f265f29 	.word	0x5f265f29
 8002ce4:	5f5f      	.short	0x5f5f
 8002ce6:	2a          	.byte	0x2a
 8002ce7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce8:	4933      	ldr	r1, [pc, #204]	; (8002db8 <UART_SetConfig+0x13c>)
 8002cea:	428a      	cmp	r2, r1
 8002cec:	d00b      	beq.n	8002d06 <UART_SetConfig+0x8a>
 8002cee:	4933      	ldr	r1, [pc, #204]	; (8002dbc <UART_SetConfig+0x140>)
 8002cf0:	428a      	cmp	r2, r1
 8002cf2:	d008      	beq.n	8002d06 <UART_SetConfig+0x8a>
 8002cf4:	4932      	ldr	r1, [pc, #200]	; (8002dc0 <UART_SetConfig+0x144>)
 8002cf6:	428a      	cmp	r2, r1
 8002cf8:	d005      	beq.n	8002d06 <UART_SetConfig+0x8a>
 8002cfa:	4932      	ldr	r1, [pc, #200]	; (8002dc4 <UART_SetConfig+0x148>)
 8002cfc:	428a      	cmp	r2, r1
 8002cfe:	d002      	beq.n	8002d06 <UART_SetConfig+0x8a>
 8002d00:	4931      	ldr	r1, [pc, #196]	; (8002dc8 <UART_SetConfig+0x14c>)
 8002d02:	428a      	cmp	r2, r1
 8002d04:	d14a      	bne.n	8002d9c <UART_SetConfig+0x120>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0212      	lsls	r2, r2, #8
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <UART_SetConfig+0x9c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d0e:	f7ff f9ed 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d004      	beq.n	8002d20 <UART_SetConfig+0xa4>
 8002d16:	e02d      	b.n	8002d74 <UART_SetConfig+0xf8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d18:	f7ff f9e8 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1c:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002d1e:	d108      	bne.n	8002d32 <UART_SetConfig+0xb6>
 8002d20:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002d26:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8002d2a:	f7ff f92f 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8002d2e:	e7f5      	b.n	8002d1c <UART_SetConfig+0xa0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <UART_SetConfig+0x150>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d32:	0058      	lsls	r0, r3, #1
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	6861      	ldr	r1, [r4, #4]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	18c0      	adds	r0, r0, r3
 8002d3c:	f7fd f9f6 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d40:	4923      	ldr	r1, [pc, #140]	; (8002dd0 <UART_SetConfig+0x154>)
 8002d42:	b282      	uxth	r2, r0
 8002d44:	3a10      	subs	r2, #16
 8002d46:	0403      	lsls	r3, r0, #16
 8002d48:	428a      	cmp	r2, r1
 8002d4a:	d827      	bhi.n	8002d9c <UART_SetConfig+0x120>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4c:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d4e:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d50:	4390      	bics	r0, r2
 8002d52:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8002d54:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d56:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8002d58:	4318      	orrs	r0, r3
 8002d5a:	60d0      	str	r0, [r2, #12]
 8002d5c:	e7e0      	b.n	8002d20 <UART_SetConfig+0xa4>
    switch (clocksource)
 8002d5e:	2808      	cmp	r0, #8
 8002d60:	d81c      	bhi.n	8002d9c <UART_SetConfig+0x120>
 8002d62:	f7fd f9cf 	bl	8000104 <__gnu_thumb1_case_sqi>
 8002d66:	1bd4      	.short	0x1bd4
 8002d68:	1b161b19 	.word	0x1b161b19
 8002d6c:	1b1b      	.short	0x1b1b
 8002d6e:	05          	.byte	0x05
 8002d6f:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d70:	2080      	movs	r0, #128	; 0x80
 8002d72:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d74:	6863      	ldr	r3, [r4, #4]
 8002d76:	6861      	ldr	r1, [r4, #4]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	1818      	adds	r0, r3, r0
 8002d7c:	f7fd f9d6 	bl	800012c <__udivsi3>
 8002d80:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d82:	0002      	movs	r2, r0
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <UART_SetConfig+0x154>)
 8002d86:	3a10      	subs	r2, #16
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d807      	bhi.n	8002d9c <UART_SetConfig+0x120>
        huart->Instance->BRR = usartdiv;
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	60d8      	str	r0, [r3, #12]
 8002d90:	e7c6      	b.n	8002d20 <UART_SetConfig+0xa4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7ff f8fb 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
        break;
 8002d96:	e7bc      	b.n	8002d12 <UART_SetConfig+0x96>
        pclk = (uint32_t) HSI_VALUE;
 8002d98:	480c      	ldr	r0, [pc, #48]	; (8002dcc <UART_SetConfig+0x150>)
 8002d9a:	e7eb      	b.n	8002d74 <UART_SetConfig+0xf8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	e7c0      	b.n	8002d22 <UART_SetConfig+0xa6>
 8002da0:	efff69f3 	.word	0xefff69f3
 8002da4:	ffffcfff 	.word	0xffffcfff
 8002da8:	fffff4ff 	.word	0xfffff4ff
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	0800316e 	.word	0x0800316e
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	40004c00 	.word	0x40004c00
 8002dc4:	40005000 	.word	0x40005000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	007a1200 	.word	0x007a1200
 8002dd0:	0000ffef 	.word	0x0000ffef

08002dd4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002dd6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dd8:	07da      	lsls	r2, r3, #31
 8002dda:	d506      	bpl.n	8002dea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ddc:	6801      	ldr	r1, [r0, #0]
 8002dde:	4c28      	ldr	r4, [pc, #160]	; (8002e80 <UART_AdvFeatureConfig+0xac>)
 8002de0:	684a      	ldr	r2, [r1, #4]
 8002de2:	4022      	ands	r2, r4
 8002de4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002de6:	4322      	orrs	r2, r4
 8002de8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dea:	079a      	lsls	r2, r3, #30
 8002dec:	d506      	bpl.n	8002dfc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dee:	6801      	ldr	r1, [r0, #0]
 8002df0:	4c24      	ldr	r4, [pc, #144]	; (8002e84 <UART_AdvFeatureConfig+0xb0>)
 8002df2:	684a      	ldr	r2, [r1, #4]
 8002df4:	4022      	ands	r2, r4
 8002df6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002df8:	4322      	orrs	r2, r4
 8002dfa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dfc:	075a      	lsls	r2, r3, #29
 8002dfe:	d506      	bpl.n	8002e0e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e00:	6801      	ldr	r1, [r0, #0]
 8002e02:	4c21      	ldr	r4, [pc, #132]	; (8002e88 <UART_AdvFeatureConfig+0xb4>)
 8002e04:	684a      	ldr	r2, [r1, #4]
 8002e06:	4022      	ands	r2, r4
 8002e08:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002e0a:	4322      	orrs	r2, r4
 8002e0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0e:	071a      	lsls	r2, r3, #28
 8002e10:	d506      	bpl.n	8002e20 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e12:	6801      	ldr	r1, [r0, #0]
 8002e14:	4c1d      	ldr	r4, [pc, #116]	; (8002e8c <UART_AdvFeatureConfig+0xb8>)
 8002e16:	684a      	ldr	r2, [r1, #4]
 8002e18:	4022      	ands	r2, r4
 8002e1a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e1c:	4322      	orrs	r2, r4
 8002e1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e20:	06da      	lsls	r2, r3, #27
 8002e22:	d506      	bpl.n	8002e32 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e24:	6801      	ldr	r1, [r0, #0]
 8002e26:	4c1a      	ldr	r4, [pc, #104]	; (8002e90 <UART_AdvFeatureConfig+0xbc>)
 8002e28:	688a      	ldr	r2, [r1, #8]
 8002e2a:	4022      	ands	r2, r4
 8002e2c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002e2e:	4322      	orrs	r2, r4
 8002e30:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e32:	069a      	lsls	r2, r3, #26
 8002e34:	d506      	bpl.n	8002e44 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e36:	6801      	ldr	r1, [r0, #0]
 8002e38:	4c16      	ldr	r4, [pc, #88]	; (8002e94 <UART_AdvFeatureConfig+0xc0>)
 8002e3a:	688a      	ldr	r2, [r1, #8]
 8002e3c:	4022      	ands	r2, r4
 8002e3e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002e40:	4322      	orrs	r2, r4
 8002e42:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e44:	065a      	lsls	r2, r3, #25
 8002e46:	d510      	bpl.n	8002e6a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	4d13      	ldr	r5, [pc, #76]	; (8002e98 <UART_AdvFeatureConfig+0xc4>)
 8002e4c:	684a      	ldr	r2, [r1, #4]
 8002e4e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002e50:	402a      	ands	r2, r5
 8002e52:	4322      	orrs	r2, r4
 8002e54:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	0352      	lsls	r2, r2, #13
 8002e5a:	4294      	cmp	r4, r2
 8002e5c:	d105      	bne.n	8002e6a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e5e:	684a      	ldr	r2, [r1, #4]
 8002e60:	4c0e      	ldr	r4, [pc, #56]	; (8002e9c <UART_AdvFeatureConfig+0xc8>)
 8002e62:	4022      	ands	r2, r4
 8002e64:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e66:	4322      	orrs	r2, r4
 8002e68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	d506      	bpl.n	8002e7c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e6e:	6802      	ldr	r2, [r0, #0]
 8002e70:	490b      	ldr	r1, [pc, #44]	; (8002ea0 <UART_AdvFeatureConfig+0xcc>)
 8002e72:	6853      	ldr	r3, [r2, #4]
 8002e74:	400b      	ands	r3, r1
 8002e76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6053      	str	r3, [r2, #4]
}
 8002e7c:	bd30      	pop	{r4, r5, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	fffdffff 	.word	0xfffdffff
 8002e84:	fffeffff 	.word	0xfffeffff
 8002e88:	fffbffff 	.word	0xfffbffff
 8002e8c:	ffff7fff 	.word	0xffff7fff
 8002e90:	ffffefff 	.word	0xffffefff
 8002e94:	ffffdfff 	.word	0xffffdfff
 8002e98:	ffefffff 	.word	0xffefffff
 8002e9c:	ff9fffff 	.word	0xff9fffff
 8002ea0:	fff7ffff 	.word	0xfff7ffff

08002ea4 <UART_WaitOnFlagUntilTimeout>:
{
 8002ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ea6:	2780      	movs	r7, #128	; 0x80
{
 8002ea8:	0004      	movs	r4, r0
 8002eaa:	000d      	movs	r5, r1
 8002eac:	0016      	movs	r6, r2
 8002eae:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eb0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	69d3      	ldr	r3, [r2, #28]
 8002eb6:	402b      	ands	r3, r5
 8002eb8:	1b5b      	subs	r3, r3, r5
 8002eba:	4259      	negs	r1, r3
 8002ebc:	414b      	adcs	r3, r1
 8002ebe:	42b3      	cmp	r3, r6
 8002ec0:	d001      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e028      	b.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002ec6:	9b08      	ldr	r3, [sp, #32]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	d0f3      	beq.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ecc:	f7fe fb98 	bl	8001600 <HAL_GetTick>
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	1ac0      	subs	r0, r0, r3
 8002ed4:	9b08      	ldr	r3, [sp, #32]
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d801      	bhi.n	8002ede <UART_WaitOnFlagUntilTimeout+0x3a>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11d      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ede:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee8:	6821      	ldr	r1, [r4, #0]
 8002eea:	4d1e      	ldr	r5, [pc, #120]	; (8002f64 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8002eec:	680b      	ldr	r3, [r1, #0]
 8002eee:	402b      	ands	r3, r5
 8002ef0:	600b      	str	r3, [r1, #0]
 8002ef2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	688b      	ldr	r3, [r1, #8]
 8002f02:	4393      	bics	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
 8002f06:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002f10:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002f12:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002f14:	3474      	adds	r4, #116	; 0x74
 8002f16:	7023      	strb	r3, [r4, #0]
}
 8002f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f1a:	2104      	movs	r1, #4
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	420a      	tst	r2, r1
 8002f22:	d0c6      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	423a      	tst	r2, r7
 8002f28:	d0c3      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2a:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	2201      	movs	r2, #1
 8002f32:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f36:	6821      	ldr	r1, [r4, #0]
 8002f38:	4d0a      	ldr	r5, [pc, #40]	; (8002f64 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8002f3a:	680b      	ldr	r3, [r1, #0]
 8002f3c:	402b      	ands	r3, r5
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f44:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4c:	6821      	ldr	r1, [r4, #0]
 8002f4e:	688b      	ldr	r3, [r1, #8]
 8002f50:	4393      	bics	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
 8002f54:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8002f58:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f5a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8002f5c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f5e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f60:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002f62:	e7d5      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x6c>
 8002f64:	fffffe5f 	.word	0xfffffe5f

08002f68 <UART_CheckIdleState>:
{
 8002f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	2600      	movs	r6, #0
{
 8002f6c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	1d03      	adds	r3, r0, #4
 8002f70:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002f72:	f7fe fb45 	bl	8001600 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f76:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002f78:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	071b      	lsls	r3, r3, #28
 8002f7e:	d416      	bmi.n	8002fae <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	075b      	lsls	r3, r3, #29
 8002f86:	d50a      	bpl.n	8002f9e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <UART_CheckIdleState+0x60>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	0020      	movs	r0, r4
 8002f92:	002b      	movs	r3, r5
 8002f94:	03c9      	lsls	r1, r1, #15
 8002f96:	f7ff ff85 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d112      	bne.n	8002fc4 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8002f9e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002fa2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa6:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002fa8:	3474      	adds	r4, #116	; 0x74
 8002faa:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002fac:	e00b      	b.n	8002fc6 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <UART_CheckIdleState+0x60>)
 8002fb2:	0032      	movs	r2, r6
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	0389      	lsls	r1, r1, #14
 8002fb8:	0003      	movs	r3, r0
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7ff ff72 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d0dd      	beq.n	8002f80 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002fc4:	2003      	movs	r0, #3
}
 8002fc6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002fc8:	01ffffff 	.word	0x01ffffff

08002fcc <HAL_UART_Init>:
{
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
}
 8002fd4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002fdc:	0002      	movs	r2, r0
 8002fde:	3274      	adds	r2, #116	; 0x74
 8002fe0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002fe2:	f7fe f9e1 	bl	80013a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002fe6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002fe8:	2101      	movs	r1, #1
 8002fea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002fee:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002ff2:	438b      	bics	r3, r1
 8002ff4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff6:	f7ff fe41 	bl	8002c7c <UART_SetConfig>
 8002ffa:	2801      	cmp	r0, #1
 8002ffc:	d0e9      	beq.n	8002fd2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003004:	0020      	movs	r0, r4
 8003006:	f7ff fee5 	bl	8002dd4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	4907      	ldr	r1, [pc, #28]	; (800302c <HAL_UART_Init+0x60>)
 800300e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003010:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003012:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003014:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	438a      	bics	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800301e:	2201      	movs	r2, #1
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003026:	f7ff ff9f 	bl	8002f68 <UART_CheckIdleState>
 800302a:	e7d3      	b.n	8002fd4 <HAL_UART_Init+0x8>
 800302c:	fffff7ff 	.word	0xfffff7ff

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	2600      	movs	r6, #0
 8003034:	4d0c      	ldr	r5, [pc, #48]	; (8003068 <__libc_init_array+0x38>)
 8003036:	4c0d      	ldr	r4, [pc, #52]	; (800306c <__libc_init_array+0x3c>)
 8003038:	1b64      	subs	r4, r4, r5
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	42a6      	cmp	r6, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	2600      	movs	r6, #0
 8003042:	f000 f82b 	bl	800309c <_init>
 8003046:	4d0a      	ldr	r5, [pc, #40]	; (8003070 <__libc_init_array+0x40>)
 8003048:	4c0a      	ldr	r4, [pc, #40]	; (8003074 <__libc_init_array+0x44>)
 800304a:	1b64      	subs	r4, r4, r5
 800304c:	10a4      	asrs	r4, r4, #2
 800304e:	42a6      	cmp	r6, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	00b3      	lsls	r3, r6, #2
 8003056:	58eb      	ldr	r3, [r5, r3]
 8003058:	4798      	blx	r3
 800305a:	3601      	adds	r6, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	00b3      	lsls	r3, r6, #2
 8003060:	58eb      	ldr	r3, [r5, r3]
 8003062:	4798      	blx	r3
 8003064:	3601      	adds	r6, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	08003174 	.word	0x08003174
 800306c:	08003174 	.word	0x08003174
 8003070:	08003174 	.word	0x08003174
 8003074:	08003178 	.word	0x08003178

08003078 <memcpy>:
 8003078:	2300      	movs	r3, #0
 800307a:	b510      	push	{r4, lr}
 800307c:	429a      	cmp	r2, r3
 800307e:	d100      	bne.n	8003082 <memcpy+0xa>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	5ccc      	ldrb	r4, [r1, r3]
 8003084:	54c4      	strb	r4, [r0, r3]
 8003086:	3301      	adds	r3, #1
 8003088:	e7f8      	b.n	800307c <memcpy+0x4>

0800308a <memset>:
 800308a:	0003      	movs	r3, r0
 800308c:	1882      	adds	r2, r0, r2
 800308e:	4293      	cmp	r3, r2
 8003090:	d100      	bne.n	8003094 <memset+0xa>
 8003092:	4770      	bx	lr
 8003094:	7019      	strb	r1, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	e7f9      	b.n	800308e <memset+0x4>
	...

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
